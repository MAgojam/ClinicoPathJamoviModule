[
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "introduction",
        "dir": "",
        "previous_headings": "",
        "what": "Introduction",
        "title": "AGENTS.md",
        "text": "document defines suite specialized LLM-based agents designed streamline enhance development, testing, documentation, maintenance Jamovi modules, specifically: meddecide: Implements decision curve analysis, diagnostic decision models, clinical decision support tools. jjstatsplot: Generates statistical plots (e.g., waterfall plots, swimmer plots, heatmaps) Jamovi modules. jsurvival: Provides survival analysis routines, including Kaplan–Meier, Cox proportional hazards, multi-state models. clinicoPathDescriptives: Offers descriptive statistics advanced tables/visualizations tailored anatomic surgical pathologists. agent encapsulates focused set responsibilities expertise, enabling efficient collaboration Large Language Models (LLMs) code generation, debugging, documentation, quality assurance, refactoring, domain-specific analysis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "how-to-use-this-document",
        "dir": "",
        "previous_headings": "Introduction",
        "what": "How to Use This Document",
        "title": "AGENTS.md",
        "text": "Identify Task: Determine aspect module development need assistance (e.g., writing R functions, drafting YAML, creating unit tests, designing plot). Select Agent: Choose agent list whose responsibilities align task. Launch Prompt: Use example prompt templates invoke chosen agent. Copy paste template ChatGPT preferred LLM interface, replacing placeholders (e.g., <module_name>, <function_name>, <description>) context-specific details. Iterate: Agents designed iterative workflows; output needs refinement, provide additional context clarifications. Integrate Output: Incorporate generated code, documentation, tests, analyses Jamovi module project.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "agents-overview",
        "dir": "",
        "previous_headings": "",
        "what": "Agents Overview",
        "title": "AGENTS.md",
        "text": "agent described detail .",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "overview",
        "dir": "",
        "previous_headings": "",
        "what": "Overview",
        "title": "AGENTS.md",
        "text": "ClinicoPath statistical modules (meddecide, jjstatsplot, ClinicoPathDescriptives, jsurvival) follow consistent structure, treating analysis agent defined inputs, processing logic, outputs. agents implemented R6 classes (.b.R files) configured YAML files (..yaml, .u.yaml, .r.yaml). design cleanly separates user interface, analysis options, result definitions.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "core-patterns-extracted",
        "dir": "",
        "previous_headings": "Overview",
        "what": "Core Patterns Extracted",
        "title": "AGENTS.md",
        "text": "Function Calls Using private$: Agents delegate tasks private helper methods (e.g., .prepareData(), .computeMetrics(), .buildTable()) defined within private = list() block R6 class. Use self$options self$results: self$options: Holds inputs defined ..yaml. Access values directly (e.g., self$options$outcome, self$options$alpha). self$results: Contains output objects defined .r.yaml. Populate outputs using $setContent(), $setRow(), $addRow(), $setState(). YAML Files Relationship: ..yaml: Defines options (names, types, defaults, constraints) registers analysis. .u.yaml: Describes UI layout (controls, labels, grouping) referencing options ..yaml. .r.yaml: Specifies result objects (tables, plots, text), renderFun images, visibility conditions, dependencies (clearWith). Jamovi Developer Guidelines Integration: Based Jamovi Module Authoring, modules include: DESCRIPTION file: Lists dependencies (e.g., Imports: jmvcore, survival). jamovi-module.yml manifest: Registers version, dependencies, jmvcore compatibility. man/ folder: Contains Rd documentation generated roxygen2 comments R. R/ folder: Contains .b.R (implementation), .h.R (auto-generated base), supporting functions. resources/ folder: Provides icons additional JS/CSS custom UI needed. Testing structure: tests/testthat/ unit tests; ensure R CMD check passes CI workflows validate builds. examining real-world examples official guidelines, see inputs flow UI R code outputs formatted display.",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "id_1-analysis-definition-ayaml",
        "dir": "",
        "previous_headings": "YAML Configuration Files",
        "what": "1. Analysis Definition (.a.yaml)",
        "title": "AGENTS.md",
        "text": "Purpose: Register analysis, define options defaults, group menu. Pattern Example (meddecide/kappaSizeCI..yaml): Notes: option.name must match field R6 class (self$options$name). refs: section ensures citations appear output. analysis-name class fields must align R6 class names.",
        "code": "analysis-name: kappaSizeCI class: kappaSizeCIClass package: meddecide requiresData: false title: \"Kappa Sample Size Calculation\" menu:   - name: \"Interobserver Analysis\"     sub-menu:       - name: \"Kappa Sample Size\"  options:   - name: outcome     type: list     values: [\"2\", \"3\", \"4\", \"5\"]     default: \"2\"     title: \"Number of Outcome Levels\"    - name: kappa0     type: number     default: 0.60     minimum: 0.01     maximum: 0.99     title: \"Null Kappa (K<sub>0<\/sub>)\"     description: \"Expected kappa under null hypothesis\"    - name: kappaL     type: number     default: 0.40     minimum: 0.01     maximum: 0.99     title: \"Lower Bound of Kappa (K<sub>L<\/sub>)\"     description: \"Lower limit of clinically acceptable kappa\"    - name: kappaU     type: number     default: 0.80     minimum: 0.01     maximum: 0.99     title: \"Upper Bound of Kappa (K<sub>U<\/sub>)\"     description: \"Upper limit of clinically acceptable kappa\"    - name: props     type: string     default: \"0.20, 0.80\"     title: \"Category Proportions\"     description: \"Comma-separated proportions for each outcome level\"    - name: raters     type: integer     default: 2     minimum: 2     maximum: 10     title: \"Number of Raters\"    - name: alpha     type: number     default: 0.05     minimum: 0.01     maximum: 0.10     title: \"Significance Level (α)\"  refs:   - ClinicoPathJamoviModule   - kappaSize"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "id_2-user-interface-layout-uyaml",
        "dir": "",
        "previous_headings": "YAML Configuration Files",
        "what": "2. User Interface Layout (.u.yaml)",
        "title": "AGENTS.md",
        "text": "Purpose: Organize controls, labels, grouping user interface. Pattern Example (meddecide/kappaSizeCI.u.yaml): Notes: control’s name must match option ..yaml. Organize controls logical groups clarity. Use standard Jamovi control types (combobox, textbox, spinner, checkbox, etc.).",
        "code": "- type: label   title: \"Kappa Sample Size\"   text: \"Calculate sample size for desired kappa precision.\"   footnote: \"Based on Donner & Eliasziw (1992).\"  - type: group   title: \"Outcome Settings\"   content:     - type: combobox       name: outcome       title: \"Number of Outcome Levels\"       values: $(options.outcome.values)      - type: textbox       name: props       title: \"Category Proportions\"       placeholder: \"e.g., 0.20, 0.80\"  - type: group   title: \"Kappa Parameters\"   content:     - type: textbox       name: kappa0       title: \"Null Kappa (K0)\"      - type: textbox       name: kappaL       title: \"Lower Bound (KL)\"      - type: textbox       name: kappaU       title: \"Upper Bound (KU)\"  - type: group   title: \"Study Design\"   content:     - type: spinner       name: raters       title: \"Number of Raters\"       min: 2       max: 10      - type: textbox       name: alpha       title: \"Alpha (α)\"       placeholder: \"0.05\""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "id_3-results-specification-ryaml",
        "dir": "",
        "previous_headings": "YAML Configuration Files",
        "what": "3. Results Specification (.r.yaml)",
        "title": "AGENTS.md",
        "text": "Purpose: Define output objects, rendering functions, visibility conditions, dependencies. Pattern Example (meddecide/kappaSizeCI.r.yaml): Pattern Example (meddecide/decision.r.yaml): Key Points: clearWith: Lists options invalidate output changed. visible: Controls conditional display (e.g., (ci), (roc)). renderFun: Connects private plot methods R6 class. Jamovi Manifest (jamovi-module.yml): Must match analysis names specify version compatible jmvcore versions.",
        "code": "refs:   - ClinicoPathJamoviModule   - kappaSize  output:   - name: text1     type: \"preformatted\"     title: \"Required Sample Size\"     clearWith: [outcome, kappa0, kappaL, kappaU, props, raters, alpha]     visible: true    - name: text2     type: \"preformatted\"     title: \"Study Explanation\"     clearWith: [outcome, kappa0, kappaL, kappaU, props, raters, alpha]     visible: true refs:   - ClinicoPathJamoviModule   - epiR   - FaganNomogram   - pROC  output:   # Pre-populated Count Table   - name: cTable     type: table     title: \"Test vs Gold Standard\"     rows: 0     columns:       - name: newtest         type: text         title: \"Test Result\"       - name: GoldPos         type: number         title: \"Gold Positive\"       - name: GoldNeg         type: number         title: \"Gold Negative\"       - name: Total         type: number         title: \"Total\"     clearWith: [gold, newtest]    # Single-row summary   - name: nTable     type: table     title: \"Basic Counts\"     rows: 1     columns:       - name: TotalPop         type: integer         title: \"Total Population\"       - name: Diseased         type: integer         title: \"Diseased\"       - name: Healthy         type: integer         title: \"Healthy\"       - name: TP         type: integer         title: \"True Positive\"       - name: FP         type: integer         title: \"False Positive\"       - name: FN         type: integer         title: \"False Negative\"       - name: TN         type: integer         title: \"True Negative\"     clearWith: [gold, newtest]    # Ratio Table (Conditional on CI)   - name: epirTable_ratio     type: table     title: \"Effect Estimates (Ratio)\"     rows: 0     columns:       - name: statsnames         type: text         title: \"Statistic\"       - name: est         type: number         title: \"Estimate\"       - name: lower         type: number         title: \"Lower 95% CI\"       - name: upper         type: number         title: \"Upper 95% CI\"     visible: (ci)     clearWith: [gold, newtest, ci]    # Numeric Counts Table (Conditional)   - name: epirTable_number     type: table     title: \"Effect Estimates (Numbers)\"     rows: 0     columns:       - name: statsnames         type: text         title: \"Statistic\"       - name: value         type: integer         title: \"Value\"     visible: (ci)     clearWith: [gold, newtest, ci]    # Fagan Nomogram Plot   - name: plot1     type: image     title: \"Fagan Nomogram\"     renderFun: .plot1     width: 600     height: 450     visible: (fagan)     requiresData: true     clearWith: [gold, newtest, fagan]    # ROC Curve Plot   - name: plot2     type: image     title: \"ROC Curve\"     renderFun: .plot2     width: 600     height: 450     visible: (roc)     requiresData: true     clearWith: [gold, newtest, roc]"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "r6-analysis-class-patterns-br",
        "dir": "",
        "previous_headings": "",
        "what": "R6 Analysis Class Patterns (.b.R)",
        "title": "AGENTS.md",
        "text": "agent’s computation implemented R6 class, inheriting generated base class (.h.R) provides active bindings options results. .b.R file extends base implements analysis logic.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "id_1-structure-of-the-r6-class",
        "dir": "",
        "previous_headings": "R6 Analysis Class Patterns (.b.R)",
        "what": "1. Structure of the R6 Class",
        "title": "AGENTS.md",
        "text": "Naming: MyAnalysisClass inherits MyAnalysisBase (auto-generated). Guard Clause: (requireNamespace(\"jmvcore\", quietly = TRUE)) { ... } ensures Jamovi environment present. Private List: Contains methods: .init(): Pre-configures results. .run(): Performs main computations. .plot1(), .plot2(), etc.: Generates plots. Additional Helpers: e.g., .prepareData(), .computeMetrics(), .buildTableRows(). Example Skeleton:",
        "code": "kappaSizeCIClass <- R6::R6Class(   \"kappaSizeCIClass\",   inherit = kappaSizeCIBase,   private = list(     .init = function() {       # e.g., set initial visibility or pre-populate table rows     },      .run = function() {       # 1. Validate inputs       # 2. Access inputs: outcome <- self$options$outcome       # 3. Compute sample size via kappaSize package       # 4. text1 <- ...; text2 <- ...       # 5. Populate outputs:       #    self$results$text1$setContent(text1)       #    self$results$text2$setContent(text2)     },      .plot1 = function(image, ggtheme) {       # Retrieve data: plotData <- image$state       # Build ggplot object       # print(plot)       TRUE     }   ) )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "id_2-initialization-init",
        "dir": "",
        "previous_headings": "R6 Analysis Class Patterns (.b.R)",
        "what": "2. Initialization (.init)",
        "title": "AGENTS.md",
        "text": "Pre-populate Tables: Add rows computation (e.g., cTable$addRow(rowKey = \"Test Positive\", values = list(newtest = \"Test Positive\"))). Adjust Visibility: Hide show outputs via self$results$myOutput$setVisible(FALSE) based initial conditions (e.g., data loaded yet). Set Default States: Pre-compute values persist across runs. Example (meddecide/decision.b.R):",
        "code": ".decisionClass.init <- function() {   # Pre-populate cTable with row labels   cTable <- self$results$cTable   cTable$addRow(rowKey = 1, values = list(newtest = \"Test Positive\"))   cTable$addRow(rowKey = 2, values = list(newtest = \"Test Negative\"))   cTable$addRow(rowKey = 3, values = list(newtest = \"Total\")) }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "id_3-main-analysis-run",
        "dir": "",
        "previous_headings": "R6 Analysis Class Patterns (.b.R)",
        "what": "3. Main Analysis (.run)",
        "title": "AGENTS.md",
        "text": "Access Inputs: Data Validation: Check self$data required options. missing, display instructions via “todo” output return() early. Split, Convert, Compute: string inputs (e.g., props), split strsplit() convert numeric. Call External Packages: E.g., kappaSize::CIBinary(), epiR::epi.tests(), survival::survfit(), tableone::CreateTableOne(). Store Intermediate Results: complex heavy plots, store data image’s state: Populate Results: Text: self$results$text1$setContent(text1). Table (fixed row): self$results$irrtable$setRow(rowNo = 1, values = list(Method = \"Kappa\", Value = kappaVal)). Table (dynamic rows): Clear Hide Instructions: populating outputs, clear “todo” message:",
        "code": "outcome <- self$options$outcome kappa0   <- self$options$kappa0 props    <- self$options$props raters   <- self$options$raters alpha    <- self$options$alpha plotData <- list(Sens = sens, Spec = spec) self$results$plot1$setState(plotData) df <- someDataFrame for (i in seq_len(nrow(df))) {   self$results$myTable$addRow(rowKey = i, values = c(df[i, ])) } self$results$todo$setContent(\"\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "id_4-plot-rendering-plotx",
        "dir": "",
        "previous_headings": "R6 Analysis Class Patterns (.b.R)",
        "what": "4. Plot Rendering (.plotX)",
        "title": "AGENTS.md",
        "text": "Retrieve State: Construct Plot: Use ggplot2 helper functions (e.g., nomogrammer(plotData$Prevalence, plotData$Sens, ...)). Apply Theme: Use ggtheme jmvcore::theme() consistency Jamovi. Print Plot: print(p) return TRUE. Example (meddecide/decision.b.R):",
        "code": "plotData <- image$state .decisionClass.plot1 <- function(image, ggtheme) {   plotData <- image$state   p <- nomogrammer(     prevalence = plotData$Prevalence,     sens       = plotData$Sens,     spec       = plotData$Spec,     plr        = plotData$Plr,     nlr        = plotData$Nlr   ) + ggtheme   print(p)   TRUE }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "id_5-private-helper-methods",
        "dir": "",
        "previous_headings": "R6 Analysis Class Patterns (.b.R)",
        "what": "5. Private Helper Methods",
        "title": "AGENTS.md",
        "text": "Encapsulate reusable logic private methods. Common helpers: .prepareData(): Subset data, rename variables, handle factor levels. .computeMetrics(): Calculate statistics (e.g., sensitivity, specificity, hazard ratios). .buildTableRows(): Convert result objects data frames ready table insertion. Example (jsurvival/survival.b.R):",
        "code": ".survivalClass.getData <- function() {   data <- self$data   timeVar   <- self$options$time   eventVar  <- self$options$status   groupVar  <- self$options$group    # Convert factor levels if needed   data[[eventVar]] <- as.numeric(data[[eventVar]] == \"Yes\")    # Return list of cleaned data and variable names   list(     data    = data,     timeVar  = timeVar,     eventVar = eventVar,     groupVar = groupVar   ) }  .survivalClass.run <- function() {   args <- private$.getData()   survObj <- survival::Surv(time = args$data[[args$timeVar]],                              event = args$data[[args$eventVar]])   fit <- survival::survfit(survObj ~ args$data[[args$groupVar]], data = args$data)   # Populate KM plot state   self$results$survPlot$setState(list(fit = fit, data = args$data, group = args$groupVar))      # Other outputs: median survival table   medians <- summary(fit)$table   for (i in seq_along(medians)) {     self$results$medianTable$addRow(rowKey = i, values = list(       Group  = medians$group[i],       Median = medians$median[i]     ))   } }"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "example-1-kappa-sample-size-calculation-meddecide",
        "dir": "",
        "previous_headings": "End-to-End Examples of Agent Workflow",
        "what": "Example 1: Kappa Sample Size Calculation (meddecide)",
        "title": "AGENTS.md",
        "text": "Context: Computes required sample size inter-rater agreement study. ..yaml: Defines options: outcome, kappa0, kappaL, kappaU, props, raters, alpha. Includes references: ClinicoPathJamoviModule, kappaSize. .u.yaml: Groups: “Outcome Settings”, “Kappa Parameters”, “Study Design”. Controls: ComboBox outcome, TextBoxes kappa0, kappaL, kappaU, Spinner raters, TextBox alpha. .r.yaml: Outputs: text1 (Required Sample Size) text2 (Study Explanation). Properties: visible: true, clearWith: [inputs]. kappaSizeCI.b.R: .init: (pre-population needed). .run: Read input values: outcome, kappa0, kappaL, kappaU, props, raters, alpha. Convert props string numeric vector: propsVec <- .numeric(strsplit(props, \",\")[[1]]). Select appropriate function based outcome: \"2\", call kappaSize::CIBinary(), else call kappaSize::CI3Cats(), etc. Construct results: text1 <- paste0(\"Required N = \", res$N); text2 <- paste0(\"estimate kappa0 = \", kappa0, \" ...\"). Populate outputs: self$results$text1$setContent(text1); self$results$text2$setContent(text2[1]). Outcome: module displays computed sample size explanatory message illustrating parameter choices.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "example-2-decision-analysis-meddecide",
        "dir": "",
        "previous_headings": "End-to-End Examples of Agent Workflow",
        "what": "Example 2: Decision Analysis (meddecide)",
        "title": "AGENTS.md",
        "text": "Context: Computes diagnostic test accuracy metrics, populates count tables, renders plots (Fagan nomogram, ROC curve). ..yaml: Options: gold, newtest (variables), ci (checkbox), fagan (checkbox), roc (checkbox). References: ClinicoPathJamoviModule, epiR, FaganNomogram, pROC. .u.yaml: Controls grouped “Data Selection” (variable pickers) “Options” (checkboxes CI, Fagan, ROC). .r.yaml: cTable: Pre-populated 3 rows .init. nTable: Single-row summary. epirTable_ratio: Ratio table (visible ci true). epirTable_number: Numeric counts table (visible ci true). plot1: Fagan nomogram (render function .plot1, visible fagan true). plot2: ROC curve (render function .plot2, visible roc true). decision.b.R: .init: .run: gold newtest selected, display “todo” instruction return. Subset data: df <- self$data[, c(self$options$gold, self$options$newtest)]. Compute sensitivity specificity using epiR::epi.tests(). Populate nTable: Populate cTable: ci true, compute effect estimates: fagan true, compute Fagan nomogram parameters store state: roc true, compute ROC object store: Clear “todo” instructions: self$results$todo$setContent(\"\"). .plot1: .plot2:",
        "code": "cTable <- self$results$cTable cTable$addRow(rowKey = 1, values = list(newtest = \"Test Positive\")) cTable$addRow(rowKey = 2, values = list(newtest = \"Test Negative\")) cTable$addRow(rowKey = 3, values = list(newtest = \"Total\")) self$results$nTable$setRow(   1,   values = list(     TotalPop = N,     Diseased  = sum(...),     Healthy   = sum(...),     TP        = tp,     FP        = fp,     FN        = fn,     TN        = tn   ) ) self$results$cTable$setRow(   rowNo = 1,   values = list(GoldPos = tp, GoldNeg = fp, Total = tp + fp) ) # Similarly for rows 2 and 3 epir_ratio_df <- epiR::epi.2by2(..., conf.level = 0.95) for (i in seq_len(nrow(epir_ratio_df))) {   self$results$epirTable_ratio$addRow(rowKey = i, values = c(epir_ratio_df[i, ])) } # Repeat for epirTable_number plotData1 <- list(   Prevalence = prior,   Sens       = sens,   Spec       = spec,   Plr        = plr,   Nlr        = nlr ) self$results$plot1$setState(plotData1) rocObj <- pROC::roc(response = ..., predictor = ...) self$results$plot2$setState(rocObj) plotData <- image$state p <- nomogrammer(   prevalence = plotData$Prevalence,   sens       = plotData$Sens,   spec       = plotData$Spec,   plr        = plotData$Plr,   nlr        = plotData$Nlr ) + ggtheme print(p) TRUE rocObj <- image$state p <- ggroc(rocObj) + ggtheme + ggtitle(\"ROC Curve\") print(p) TRUE"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "example-3-table-one-clinicopathdescriptives",
        "dir": "",
        "previous_headings": "End-to-End Examples of Agent Workflow",
        "what": "Example 3: Table One (ClinicoPathDescriptives)",
        "title": "AGENTS.md",
        "text": "Context: Generates descriptive summary table (“Table One”) multiple formats: tableone, gtsummary, arsenal, janitor. ..yaml (excerpt): .u.yaml (excerpt): .r.yaml: tableone.b.R: .run: Notes: todo output informs users select variables. chosen style output visible (via visible: (sty:tx)). External packages used: tableone, gtsummary, arsenal, janitor.",
        "code": "options:   - name: vars     type: variable-list     title: \"Variables to Summarize\"    - name: excl     type: boolean     default: false     title: \"Exclude Missing Values\"    - name: sty     type: list     values: [\"t1\", \"t2\", \"t3\", \"t4\"]     default: \"t1\"     title: \"Table Style\" refs:   - ClinicoPathJamoviModule   - tableone   - gtsummary   - arsenal   - janitor - type: label   title: \"Table One\"   text: \"Generate descriptive statistics for selected variables.\"  - type: variables   name: vars   title: \"Select Variables (up to 10)\"  - type: checkbox   name: excl   title: \"Exclude Missing Values\"  - type: combobox   name: sty   title: \"Table Style\"   values: [\"t1\", \"t2\", \"t3\", \"t4\"]   display: [\"TableOne\", \"gtSummary\", \"Arsenal\", \"Janitor\"] refs:   - ClinicoPathJamoviModule   - tableone   - gtsummary   - arsenal   - janitor  output:   - name: todo     type: html     title: \"Instructions\"     visible: (vars:empty)    - name: tablestyle1     type: preformatted     title: \"TableOne Output\"     visible: (sty:t1)     clearWith: [vars, excl]    - name: tablestyle2     type: html     title: \"gtSummary Output\"     visible: (sty:t2)     clearWith: [vars, excl]    - name: tablestyle3     type: html     title: \"Arsenal Output\"     visible: (sty:t3)     clearWith: [vars, excl]    - name: tablestyle4     type: html     title: \"Janitor Output\"     visible: (sty:t4)     clearWith: [vars, excl] if (is.null(self$options$vars) || length(self$options$vars) == 0) {   todo_msg <- \"<ul><li>Select variables...<\/li><\/ul>\"   self$results$todo$setContent(todo_msg)   return() }  self$results$todo$setContent(\"\")  data <- self$data[, self$options$vars, drop = FALSE] if (self$options$excl) data <- jmvcore::naOmit(data)  style <- self$options$sty if (style == \"t1\") {   tbl <- tableone::CreateTableOne(vars = self$options$vars, data = data)   self$results$tablestyle1$setContent(tbl) } else if (style == \"t2\") {   tbl <- gtsummary::tbl_summary(data = data)   htmlTbl <- gtsummary::as_kable_extra(tbl)   self$results$tablestyle2$setContent(htmlTbl) } else if (style == \"t3\") {   tbl <- arsenal::tableby(~ ., data = data)   htmlTbl <- arsenal::summary.tbl(by = tbl, text = FALSE)   self$results$tablestyle3$setContent(htmlTbl) } else if (style == \"t4\") {   df <- janitor::tabyl(data)   htmlTbl <- knitr::kable(df, format = \"html\")   self$results$tablestyle4$setContent(htmlTbl) }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "shared-design-conventions-and-best-practices",
        "dir": "",
        "previous_headings": "",
        "what": "Shared Design Conventions and Best Practices",
        "title": "AGENTS.md",
        "text": "Consistent Naming Inheritance R6 classes: AnalysisClass inherits AnalysisBase. Base classes auto-generated YAML provide self$options self$results. Option Access Types Access inputs self$options$varName (matching ..yaml). List options return character strings; numeric options return numeric; variable-list returns vector column names. Immediately assign local variables apply transformations (e.g., .integer, .numeric, strsplit). Result Access Modification Text outputs: self$results$name$setContent(value). Fixed-row tables: self$results$name$setRow(rowNo, values = list(...)). Dynamic tables: self$results$name$addRow(rowKey, values = c(...)). Images/complex objects: self$results$name$setState(list(...)). Visibility overrides: self$results$name$setVisible(TRUE/FALSE). UI Guidance via Outputs Use todo HTML output guide users required inputs missing. Clear message inputs valid: self$results$todo$setContent(\"\"). ClearWith Dependencies List relevant options clearWith prevent stale outputs. images tables depending multiple inputs (e.g., gold, newtest, ci), include clearWith. Visible Conditions Use visible: (option) visible: (option:value) .r.yaml control output display. Common patterns: (ci), (fagan), (roc), (sty:t1), (vars:empty). Keeps interface uncluttered showing relevant outputs. Citing Sources Add external references refs: ..yaml .r.yaml. Ensure proper attribution statistical methods (e.g., epiR, survival, kappaSize, gtsummary). Coding Style Comments Use comment headers (e.g., # ----) separate logical sections (data prep, error handling, computations, output). Comment alternative approaches TODOs clarity future work. Adhere consistent code style (tidyverse base R) per project guidelines. Private Helper Functions Encapsulate reusable logic private methods (private$.functionName()). Examples: .getData(), .computeMetrics(), .preparePlotData(), .buildTableRows(). Storage Plot Data Use image$setState() .run store data plotting. Implement .plotX() methods retrieve visualize image$state. Ensures heavy computations occur , separated rendering logic.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "example-agent-workflow",
        "dir": "",
        "previous_headings": "",
        "what": "Example Agent Workflow",
        "title": "AGENTS.md",
        "text": "New Feature: Add Decision Curve Analysis meddecide Use YAMLConfigAgent draft UI (.u.yaml) computeDecisionCurve, defining inputs: data, outcome, predicted_prob, threshold_seq, plotROC. Use RFunctionGenAgent implement computeDecisionCurve R/decision_curve.R: validate inputs, calculate net benefit threshold, return jmvcore::Table Plot. Use PlotDesignAgent generate net benefit vs. threshold plot ggplot2, matching Jamovi’s style. Use TestQAAgent write tests net benefit computation (using toy dataset known expected values). Use DocumentationAgent add roxygen2 comments update .r.yaml ..yaml accordingly. Use CIIntegrationAgent ensure tests run CI/CD update GitHub Actions workflow needed. Use ReleaseManagerAgent draft release notes new function. Bug Fix: Handle Single-Level Group Error jsurvival Provide error message relevant code snippet BugTrackerAgent. BugTrackerAgent diagnoses issue (single-level grouping) proposes guard clause. Use RefactorAgent insert guard clause, handle edge case gracefully, refactor code clarity. Use TestQAAgent write test ensuring edge case longer errors. Use DocumentationAgent update help text: note grouping variables must least two levels, else return descriptive message.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "best-practices-for-crafting-prompts",
        "dir": "",
        "previous_headings": "",
        "what": "Best Practices for Crafting Prompts",
        "title": "AGENTS.md",
        "text": "Specific: Include function names, file paths, variable names, desired behavior. Provide Context: modifying existing code, paste relevant snippets commit history. Set Expectations: Indicate coding style preferences (e.g., tidyverse vs. base R), testing frameworks, documentation conventions. Iterate: output isn’t expected, clarify follow-prompts, highlighting parts adjust (e.g., “Use log scale x-axis”). Use Examples: Provide example inputs expected outputs possible. Leverage TDD: Writing tests first ensures code meets specifications.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "appendix-common-jamovi-module-components",
        "dir": "",
        "previous_headings": "",
        "what": "Appendix: Common Jamovi Module Components",
        "title": "AGENTS.md",
        "text": "jmvcore Basics: requirePackage() ensure dependencies. jmvcore::Options subclasses collect user options. jmvcore::Analysis subclasses define init(), run(), results. Use jmvcore::preprocessData(), jmvcore::table(), jmvcore::plot() standard functionality. YAML File Structure: .u.yaml: Defines UI elements. Example: .r.yaml: Maps UI options R function parameters. Example: ..yaml: Registers analyses. Example: Testing Conventions: Place tests tests/testthat/. Name test files test-<function>.R. Example structure: Plot Export: Jamovi expects plots returned via jmvcore::Image$new() render() method returns ggplot object grid. Example:",
        "code": "- type: choices   name: group   label: \"Grouping Variable\"   options:     - var1     - var2 - type: integer   name: alpha   label: \"Significance Level\"   default: 0.05 - function-name: computeSurvival   parameters:     group: group     time: time_col     status: status_col - analysis-name: SurvivalAnalysis   class: AnalysisClass   package: jsurvival   requires-data: true   allows-multiple-dependencies: false   title: \"Survival Analysis\" test_that(\"computeSurvival handles single-group edge case\", {   data <- data.frame(time = c(1,2,3), status = c(1,0,1), group = c('A','A','A'))   expect_error(computeSurvival(data), \"group must have at least two levels\") }) results$plot <- jmvcore::Image$new(   plot = function() {     p <- ggplot(data, aes(x = ..., y = ...)) + geom_line()     return(p)   },   width = 400,   height = 300 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/AGENTS.html",
        "id": "versioning",
        "dir": "",
        "previous_headings": "",
        "what": "Versioning",
        "title": "AGENTS.md",
        "text": "AGENTS.md file versioned v1.0.2. Future updates follow semantic versioning, reflecting changes agent responsibilities, new agents, prompt guidelines. End AGENTS.md",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": null,
        "dir": "",
        "previous_headings": "",
        "what": "CLAUDE.md",
        "title": "CLAUDE.md",
        "text": "file provides guidance Claude Code (claude.ai/code) working code repository.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "package-overview",
        "dir": "",
        "previous_headings": "",
        "what": "Package Overview",
        "title": "CLAUDE.md",
        "text": "ClinicoPath comprehensive jamovi module clinicopathological research analysis. provides statistical analysis tools specifically designed pathology clinical research, including survival analysis, decision analysis, descriptive statistics, specialized plots.",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "jamovi-module-structure",
        "dir": "",
        "previous_headings": "Core Architecture",
        "what": "Jamovi Module Structure",
        "title": "CLAUDE.md",
        "text": "jamovi R module specific 4-file architecture pattern: .b.R files: Backend implementation classes (e.g., crosstable.b.R, survival.b.R) ..yaml files: Analysis definitions options/parameters (e.g., crosstable..yaml) .u.yaml files: User interface definitions (e.g., crosstable.u.yaml) .r.yaml files: Results/output definitions (e.g., crosstable.r.yaml) .h.R files: Auto-generated header files (compiled .yaml files)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "key-backend-pattern",
        "dir": "",
        "previous_headings": "Core Architecture",
        "what": "Key Backend Pattern",
        "title": "CLAUDE.md",
        "text": "analysis classes inherit auto-generated base classes use R6 class system:",
        "code": "crosstableClass <- R6::R6Class(     \"crosstableClass\",      inherit = crosstableBase,  # Auto-generated from .yaml files     private = list(         .init = function() { ... },         .run = function() { ... }     ) )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "main-functional-areas",
        "dir": "",
        "previous_headings": "Core Architecture",
        "what": "Main Functional Areas",
        "title": "CLAUDE.md",
        "text": "ClinicoPath Descriptives: Summary statistics, Table One, cross tables, data checking ClinicoPath Survival: Survival analysis, Cox regression, Kaplan-Meier, competing risks meddecide: Medical decision analysis, ROC curves, sensitivity/specificity, diagnostic tests JJStatsPlot: Statistical plots using ggstatsplot wrappers Patient Follow-Plots: Swimmer plots, waterfall plots, treatment response visualization",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "testing",
        "dir": "",
        "previous_headings": "Development Commands",
        "what": "Testing",
        "title": "CLAUDE.md",
        "text": "",
        "code": "# Run all tests Rscript -e \"devtools::test()\"  # Run specific test file Rscript -e \"testthat::test_file('tests/testthat/test-roc.R')\""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "building-and-checking",
        "dir": "",
        "previous_headings": "Development Commands",
        "what": "Building and Checking",
        "title": "CLAUDE.md",
        "text": "",
        "code": "# Check package Rscript -e \"devtools::check()\"  # Build package Rscript -e \"devtools::build()\"  # Install development version Rscript -e \"devtools::install()\""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "jamovi-module-development",
        "dir": "",
        "previous_headings": "Development Commands",
        "what": "Jamovi Module Development",
        "title": "CLAUDE.md",
        "text": "",
        "code": "# Build jamovi module (.jmo file) # This requires jamovi development tools Rscript -e \"jmvtools::prepare()\" Rscript -e \"devtools::document()\" Rscript -e \"jmvtools::install()\"  # Install module in jamovi for testing # Copy .jmo file to jamovi modules directory"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "core-dependencies",
        "dir": "",
        "previous_headings": "Key Dependencies and Patterns",
        "what": "Core Dependencies",
        "title": "CLAUDE.md",
        "text": "jmvcore: Jamovi module framework R6: Class system analysis classes magrittr: Pipe operators finalfit: Survival analysis medical tables ggstatsplot: Statistical plotting gtsummary: Summary tables survival/survminer: Survival analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "data-processing-pattern",
        "dir": "",
        "previous_headings": "Key Dependencies and Patterns",
        "what": "Data Processing Pattern",
        "title": "CLAUDE.md",
        "text": "modules follow pattern: Clean variable names janitor::clean_names() Set variable labels labelled::set_variable_labels() Build formulas dynamically based user inputs Apply appropriate statistical tests Format results display",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "output-types",
        "dir": "",
        "previous_headings": "Key Dependencies and Patterns",
        "what": "Output Types",
        "title": "CLAUDE.md",
        "text": "HTML tables: Primary output format analyses Plots: ggplot2-based visualizations Text summaries: Natural language interpretations Export options: CSV downloads modules",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "exploration-menu",
        "dir": "",
        "previous_headings": "Module Categories by Menu Structure",
        "what": "Exploration Menu",
        "title": "CLAUDE.md",
        "text": "ClinicoPath Descriptives: tableone, summarydata, reportcat, benford ClinicoPath Comparisons: crosstable, chisqposttest ClinicoPath Descriptive Plots: agepyramid, alluvial, vartree, venn Patient Follow-Plots: waterfall, swimmerplot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "survival-menu",
        "dir": "",
        "previous_headings": "Module Categories by Menu Structure",
        "what": "Survival Menu",
        "title": "CLAUDE.md",
        "text": "ClinicoPath Survival: survival, survivalcont, multisurvival, oddsratio, singlearm",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "meddecide-menu",
        "dir": "",
        "previous_headings": "Module Categories by Menu Structure",
        "what": "meddecide Menu",
        "title": "CLAUDE.md",
        "text": "Agreement: agreement, icccoeff Decision: decision, decisioncalculator, nogoldstandard, decisioncompare ROC: psychopdaroc, roc Power Analysis: kappasizeci, kappasizefixedn, kappasizepower",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "jjstatsplot-menu",
        "dir": "",
        "previous_headings": "Module Categories by Menu Structure",
        "what": "JJStatsPlot Menu",
        "title": "CLAUDE.md",
        "text": "Categorical vs Continuous: jjbetweenstats, jjwithinstats, jjdotplotstats Categorical vs Categorical: jjbarstats, jjpiestats Continuous vs Continuous: jjcorrmat, jjscatterstats",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "adding-new-analysis-module",
        "dir": "",
        "previous_headings": "Common Development Tasks",
        "what": "Adding New Analysis Module",
        "title": "CLAUDE.md",
        "text": "Create 4 jamovi files: ..yaml, .u.yaml, .r.yaml, .b.R Add entry jamovi/0000.yaml Implement R6 class inheriting auto-generated base Add appropriate menu group/subgroup",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "testing-strategy",
        "dir": "",
        "previous_headings": "Common Development Tasks",
        "what": "Testing Strategy",
        "title": "CLAUDE.md",
        "text": "Unit tests tests/testthat/ Test data data/ directory (many .csv, .omv, .rda files) Example analyses jamovi format (.omv files)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "documentation",
        "dir": "",
        "previous_headings": "Common Development Tasks",
        "what": "Documentation",
        "title": "CLAUDE.md",
        "text": "Function documentation .R files using roxygen2 Vignettes vignettes/ directory using R Markdown/Quarto Package website built pkgdown",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "file-structure-notes",
        "dir": "",
        "previous_headings": "",
        "what": "File Structure Notes",
        "title": "CLAUDE.md",
        "text": "R/: Backend R code (.b.R analysis classes, utility functions) jamovi/: Module definitions (.yaml files) data/: Example datasets multiple formats man/: Auto-generated documentation inst/extdata/: Additional example data files vignettes/: Documentation tutorials",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "automated-module-distribution",
        "dir": "",
        "previous_headings": "Module Update Workflow",
        "what": "Automated Module Distribution",
        "title": "CLAUDE.md",
        "text": "project uses _updateModules.R script synchronize code across 4 separate repositories: Main repository: ClinicoPathJamoviModule (umbrella package) jjstatsplot: Statistical plotting functions using ggstatsplot meddecide: Medical decision analysis tools jsurvival: Survival analysis functions ClinicoPathDescriptives: Descriptive statistics summary tables script automatically: 1. Updates version numbers across DESCRIPTION YAML files 2. Copies module files (.b.R, ..yaml, .u.yaml, .r.yaml) appropriate repos 3. Updates documentation installs modules 4. Commits changes consistent commit messages",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "version-management",
        "dir": "",
        "previous_headings": "Module Update Workflow",
        "what": "Version Management",
        "title": "CLAUDE.md",
        "text": "Version format: X.Y.Z.BUILD (e.g., 0.0.3.22) Date format: YYYY-MM-DD Versions updated centrally distributed sub-modules module maintains 3-part semantic version ..yaml files",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "module-distribution-strategy",
        "dir": "",
        "previous_headings": "Module Update Workflow",
        "what": "Module Distribution Strategy",
        "title": "CLAUDE.md",
        "text": "WIP vs Release Modes: - WIP mode: Limited module sets testing - Release mode: Full module distribution - Controlled WIP flag update script",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "test-structure",
        "dir": "",
        "previous_headings": "Testing and Quality Assurance",
        "what": "Test Structure",
        "title": "CLAUDE.md",
        "text": "Unit tests tests/testthat/ directory Test data provided multiple formats (.csv, .omv, .rda) Example analyses embedded jamovi files (.omv) Key test files: test-decision.R, test-roc.R",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/CLAUDE.html",
        "id": "data-management",
        "dir": "",
        "previous_headings": "Testing and Quality Assurance",
        "what": "Data Management",
        "title": "CLAUDE.md",
        "text": "Example datasets data/ directory multiple format support Comprehensive test data generation scripts datageneration/ sub-module receives relevant subset example data",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/LICENSE.html",
        "id": null,
        "dir": "",
        "previous_headings": "",
        "what": "GNU General Public License",
        "title": "GNU General Public License",
        "text": "Version 2, June 1991Copyright © 1989, 1991 Free Software Foundation, Inc.,51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA Everyone permitted copy distribute verbatim copies license document, changing allowed.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/LICENSE.html",
        "id": "preamble",
        "dir": "",
        "previous_headings": "",
        "what": "Preamble",
        "title": "GNU General Public License",
        "text": "licenses software designed take away freedom share change . contrast, GNU General Public License intended guarantee freedom share change free software–make sure software free users. General Public License applies Free Software Foundation’s software program whose authors commit using . (Free Software Foundation software covered GNU Lesser General Public License instead.) can apply programs, . speak free software, referring freedom, price. General Public Licenses designed make sure freedom distribute copies free software (charge service wish), receive source code can get want , can change software use pieces new free programs; know can things. protect rights, need make restrictions forbid anyone deny rights ask surrender rights. restrictions translate certain responsibilities distribute copies software, modify . example, distribute copies program, whether gratis fee, must give recipients rights . must make sure , , receive can get source code. must show terms know rights. protect rights two steps: (1) copyright software, (2) offer license gives legal permission copy, distribute /modify software. Also, author’s protection , want make certain everyone understands warranty free software. software modified someone else passed , want recipients know original, problems introduced others reflect original authors’ reputations. Finally, free program threatened constantly software patents. wish avoid danger redistributors free program individually obtain patent licenses, effect making program proprietary. prevent , made clear patent must licensed everyone’s free use licensed . precise terms conditions copying, distribution modification follow.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/LICENSE.html",
        "id": "terms-and-conditions-for-copying-distribution-and-modification",
        "dir": "",
        "previous_headings": "",
        "what": "TERMS AND CONDITIONS FOR COPYING, DISTRIBUTION AND MODIFICATION",
        "title": "GNU General Public License",
        "text": "0. License applies program work contains notice placed copyright holder saying may distributed terms General Public License. “Program”, , refers program work, “work based Program” means either Program derivative work copyright law: say, work containing Program portion , either verbatim modifications /translated another language. (Hereinafter, translation included without limitation term “modification”.) licensee addressed “”. Activities copying, distribution modification covered License; outside scope. act running Program restricted, output Program covered contents constitute work based Program (independent made running Program). Whether true depends Program . 1. may copy distribute verbatim copies Program’s source code receive , medium, provided conspicuously appropriately publish copy appropriate copyright notice disclaimer warranty; keep intact notices refer License absence warranty; give recipients Program copy License along Program. may charge fee physical act transferring copy, may option offer warranty protection exchange fee. 2. may modify copy copies Program portion , thus forming work based Program, copy distribute modifications work terms Section 1 , provided also meet conditions: ) must cause modified files carry prominent notices stating changed files date change. b) must cause work distribute publish, whole part contains derived Program part thereof, licensed whole charge third parties terms License. c) modified program normally reads commands interactively run, must cause , started running interactive use ordinary way, print display announcement including appropriate copyright notice notice warranty (else, saying provide warranty) users may redistribute program conditions, telling user view copy License. (Exception: Program interactive normally print announcement, work based Program required print announcement.) requirements apply modified work whole. identifiable sections work derived Program, can reasonably considered independent separate works , License, terms, apply sections distribute separate works. distribute sections part whole work based Program, distribution whole must terms License, whose permissions licensees extend entire whole, thus every part regardless wrote . Thus, intent section claim rights contest rights work written entirely ; rather, intent exercise right control distribution derivative collective works based Program. addition, mere aggregation another work based Program Program (work based Program) volume storage distribution medium bring work scope License. 3. may copy distribute Program (work based , Section 2) object code executable form terms Sections 1 2 provided also one following: ) Accompany complete corresponding machine-readable source code, must distributed terms Sections 1 2 medium customarily used software interchange; , b) Accompany written offer, valid least three years, give third party, charge cost physically performing source distribution, complete machine-readable copy corresponding source code, distributed terms Sections 1 2 medium customarily used software interchange; , c) Accompany information received offer distribute corresponding source code. (alternative allowed noncommercial distribution received program object code executable form offer, accord Subsection b .) source code work means preferred form work making modifications . executable work, complete source code means source code modules contains, plus associated interface definition files, plus scripts used control compilation installation executable. However, special exception, source code distributed need include anything normally distributed (either source binary form) major components (compiler, kernel, ) operating system executable runs, unless component accompanies executable. distribution executable object code made offering access copy designated place, offering equivalent access copy source code place counts distribution source code, even though third parties compelled copy source along object code. 4. may copy, modify, sublicense, distribute Program except expressly provided License. attempt otherwise copy, modify, sublicense distribute Program void, automatically terminate rights License. However, parties received copies, rights, License licenses terminated long parties remain full compliance. 5. required accept License, since signed . However, nothing else grants permission modify distribute Program derivative works. actions prohibited law accept License. Therefore, modifying distributing Program (work based Program), indicate acceptance License , terms conditions copying, distributing modifying Program works based . 6. time redistribute Program (work based Program), recipient automatically receives license original licensor copy, distribute modify Program subject terms conditions. may impose restrictions recipients’ exercise rights granted herein. responsible enforcing compliance third parties License. 7. , consequence court judgment allegation patent infringement reason (limited patent issues), conditions imposed (whether court order, agreement otherwise) contradict conditions License, excuse conditions License. distribute satisfy simultaneously obligations License pertinent obligations, consequence may distribute Program . example, patent license permit royalty-free redistribution Program receive copies directly indirectly , way satisfy License refrain entirely distribution Program. portion section held invalid unenforceable particular circumstance, balance section intended apply section whole intended apply circumstances. purpose section induce infringe patents property right claims contest validity claims; section sole purpose protecting integrity free software distribution system, implemented public license practices. Many people made generous contributions wide range software distributed system reliance consistent application system; author/donor decide willing distribute software system licensee impose choice. section intended make thoroughly clear believed consequence rest License. 8. distribution /use Program restricted certain countries either patents copyrighted interfaces, original copyright holder places Program License may add explicit geographical distribution limitation excluding countries, distribution permitted among countries thus excluded. case, License incorporates limitation written body License. 9. Free Software Foundation may publish revised /new versions General Public License time time. new versions similar spirit present version, may differ detail address new problems concerns. version given distinguishing version number. Program specifies version number License applies “later version”, option following terms conditions either version later version published Free Software Foundation. Program specify version number License, may choose version ever published Free Software Foundation. 10. wish incorporate parts Program free programs whose distribution conditions different, write author ask permission. software copyrighted Free Software Foundation, write Free Software Foundation; sometimes make exceptions . decision guided two goals preserving free status derivatives free software promoting sharing reuse software generally.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/LICENSE.html",
        "id": "no-warranty",
        "dir": "",
        "previous_headings": "",
        "what": "NO WARRANTY",
        "title": "GNU General Public License",
        "text": "11. PROGRAM LICENSED FREE CHARGE, WARRANTY PROGRAM, EXTENT PERMITTED APPLICABLE LAW. EXCEPT OTHERWISE STATED WRITING COPYRIGHT HOLDERS /PARTIES PROVIDE PROGRAM “” WITHOUT WARRANTY KIND, EITHER EXPRESSED IMPLIED, INCLUDING, LIMITED , IMPLIED WARRANTIES MERCHANTABILITY FITNESS PARTICULAR PURPOSE. ENTIRE RISK QUALITY PERFORMANCE PROGRAM . PROGRAM PROVE DEFECTIVE, ASSUME COST NECESSARY SERVICING, REPAIR CORRECTION. 12. EVENT UNLESS REQUIRED APPLICABLE LAW AGREED WRITING COPYRIGHT HOLDER, PARTY MAY MODIFY /REDISTRIBUTE PROGRAM PERMITTED , LIABLE DAMAGES, INCLUDING GENERAL, SPECIAL, INCIDENTAL CONSEQUENTIAL DAMAGES ARISING USE INABILITY USE PROGRAM (INCLUDING LIMITED LOSS DATA DATA RENDERED INACCURATE LOSSES SUSTAINED THIRD PARTIES FAILURE PROGRAM OPERATE PROGRAMS), EVEN HOLDER PARTY ADVISED POSSIBILITY DAMAGES. END TERMS CONDITIONS",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/LICENSE.html",
        "id": "how-to-apply-these-terms-to-your-new-programs",
        "dir": "",
        "previous_headings": "",
        "what": "How to Apply These Terms to Your New Programs",
        "title": "GNU General Public License",
        "text": "develop new program, want greatest possible use public, best way achieve make free software everyone can redistribute change terms. , attach following notices program. safest attach start source file effectively convey exclusion warranty; file least “copyright” line pointer full notice found. Also add information contact electronic paper mail. program interactive, make output short notice like starts interactive mode: hypothetical commands show w show c show appropriate parts General Public License. course, commands use may called something show w show c; even mouse-clicks menu items–whatever suits program. also get employer (work programmer) school, , sign “copyright disclaimer” program, necessary. sample; alter names: General Public License permit incorporating program proprietary programs. program subroutine library, may consider useful permit linking proprietary applications library. want , use GNU Lesser General Public License instead License.",
        "code": "<one line to give the program's name and a brief idea of what it does.> Copyright (C) <year>  <name of author>  This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later version.  This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.  You should have received a copy of the GNU General Public License along with this program; if not, write to the Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA. Gnomovision version 69, Copyright (C) year name of author Gnomovision comes with ABSOLUTELY NO WARRANTY; for details type `show w'. This is free software, and you are welcome to redistribute it under certain conditions; type `show c' for details. Yoyodyne, Inc., hereby disclaims all copyright interest in the program `Gnomovision' (which makes passes at compilers) written by James Hacker.  <signature of Ty Coon>, 1 April 1989 Ty Coon, President of Vice"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/agreement-analysis.html",
        "id": "example-dataset",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Example Dataset",
        "title": "Agreement and Reliability",
        "text": "",
        "code": "df_agr <- read.csv(system.file(\"extdata\", \"agreement_example.csv\", package = \"meddecide\")) head(df_agr)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/agreement-analysis.html",
        "id": "calculating-agreement",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Calculating Agreement",
        "title": "Agreement and Reliability",
        "text": "Use agreement() function compute Cohen’s Fleiss’ Kappa statistics depending number raters.",
        "code": "agr_res <- agreement(data = df_agr) agr_res$kappa"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/agreement-analysis.html",
        "id": "sample-size-for-agreement-studies",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Sample Size for Agreement Studies",
        "title": "Agreement and Reliability",
        "text": "functions kappaSizeCI(), kappaSizeFixedN() kappaSizePower() help determine sample size needed agreement research. calculations support planning reliability experiments clinical research.",
        "code": "# precision based approach kappaSizeCI(kappa0 = 0.7, conf.level = 0.95, w = 0.1)  # fixed number of raters kappaSizeFixedN(kappa0 = 0.7, n = 60)  # power based approach kappaSizePower(kappa0 = 0.7, kappa1 = 0.8, power = 0.8)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/categorical-plots.html",
        "id": "bar-charts-with-jjbarstats",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Bar charts with jjbarstats()",
        "title": "Categorical Plot Functions",
        "text": "jjbarstats() creates bar chart automatically performs chi-squared test compare distribution two categorical variables. example compares number cylinders (cyl) across transmission types ().",
        "code": "jjbarstats(data = mtcars, dep = cyl, group = am, grvar = NULL) #>  #>  BAR CHARTS #>  #>  You have selected to use a barplot to compare a categorical variable #>  with another."
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/categorical-plots.html",
        "id": "pie-charts-with-jjpiestats",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Pie charts with jjpiestats()",
        "title": "Categorical Plot Functions",
        "text": "jjpiestats() similar jjbarstats() displays results pie chart.",
        "code": "jjpiestats(data = mtcars, dep = cyl, group = am, grvar = NULL) #>  #>  PIE CHARTS #>  #>  You have selected to use Pie Charts."
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/categorical-plots.html",
        "id": "dot-charts-with-jjdotplotstats",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Dot charts with jjdotplotstats()",
        "title": "Categorical Plot Functions",
        "text": "jjdotplotstats() shows group means using dot plot. example plot horsepower (hp) engine configuration (vs).  function returns results object whose plot element contains ggplot2 visualisation.",
        "code": "jjdotplotstats(data = mtcars, dep = hp, group = vs, grvar = NULL) #>  #>  DOT CHART #>  #>  You have selected to use a Dot Plot to compare continuous variables by #>  groups."
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "introduction",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Introduction",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "ClinicoPathDescriptives provides suite functions summarising visualising clinicopathological data. vignette showcases main tools package reproducible examples. package ships example data sets histopathology treatmentResponse illustrate typical workflows.",
        "code": "# install.packages(\"ClinicoPathDescriptives\") library(ClinicoPathDescriptives)  # Example data data(histopathology) head(histopathology)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "summaries-of-continuous-variables",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Summaries of Continuous Variables",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "Use summarydata() obtain descriptive statistics numeric variables.",
        "code": "summarydata(data = histopathology, vars = vars(Age, TumorSize))"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "summaries-of-categorical-variables",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Summaries of Categorical Variables",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "reportcat() creates frequency tables counts categorical variables.",
        "code": "reportcat(data = histopathology, vars = vars(Sex, Grade))"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "cross-tables",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Cross Tables",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "Generate cross tabulations chi-square tests using crosstable().",
        "code": "crosstable(   data = histopathology,   vars = vars(Sex, Grade),   group = \"PreinvasiveComponent\",   sty = \"nejm\",   excl = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "table-one",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Table One",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "tableone() produces formatted baseline characteristic tables reports.",
        "code": "tableone(   data = histopathology,   vars = vars(Sex, PreinvasiveComponent, LVI, PNI, Grade, Age),   sty = \"t3\",   excl = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "visualisations",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Visualisations",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "package includes multiple plotting functions explore data.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "age-pyramid",
        "dir": "Articles",
        "previous_headings": "Visualisations",
        "what": "Age Pyramid",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "",
        "code": "agepyramid(   data = histopathology,   age = \"Age\",   gender = \"Sex\",   female = \"Female\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "alluvial-diagrams",
        "dir": "Articles",
        "previous_headings": "Visualisations",
        "what": "Alluvial Diagrams",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "",
        "code": "alluvial(   data = histopathology,   vars = vars(Grade, LVI, PNI),   fill = \"first_variable\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "benford-analysis",
        "dir": "Articles",
        "previous_headings": "Visualisations",
        "what": "Benford Analysis",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "",
        "code": "benford(data = histopathology, var = \"TumorSize\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "venn-and-variable-trees",
        "dir": "Articles",
        "previous_headings": "Visualisations",
        "what": "Venn and Variable Trees",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "",
        "code": "venn(data = histopathology, vars = vars(LVI, PNI, PreinvasiveComponent)) vartree(   data = histopathology,   vars = vars(Grade, LVI, PNI),   percvar = \"Grade\",   percvarLevel = \"High\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "waterfall-plots",
        "dir": "Articles",
        "previous_headings": "Visualisations",
        "what": "Waterfall Plots",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "waterfall() visualises tumor response time.",
        "code": "waterfall(   data = treatmentResponse,   patientID = \"PatientID\",   responseVar = \"Response\",   timeVar = \"Month\",   inputType = \"percentage\",   showWaterfallPlot = TRUE,   showSpiderPlot = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/clinicoPathDescriptives-introduction.html",
        "id": "conclusion",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Conclusion",
        "title": "Getting Started with ClinicoPathDescriptives",
        "text": "examples demonstrate versatility ClinicoPathDescriptives summarising visualising clinicopathological data. Explore help pages function additional options customisation.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/continuous-comparisons.html",
        "id": "bar-charts-with-jjbarstats",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Bar charts with jjbarstats()",
        "title": "Categorical Plot Functions",
        "text": "jjbarstats() function creates bar charts performs chi-squared tests compare categorical variables. wraps ggstatsplot::ggbarstats().",
        "code": "# Underlying function that jjbarstats() wraps ggstatsplot::ggbarstats(   data = mtcars,   x = cyl,   y = am,   title = \"Cylinders by Transmission Type\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/continuous-comparisons.html",
        "id": "pie-charts-with-jjpiestats",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Pie charts with jjpiestats()",
        "title": "Categorical Plot Functions",
        "text": "jjpiestats() function creates pie charts categorical data visualization. wraps ggstatsplot::ggpiestats().",
        "code": "# Underlying function that jjpiestats() wraps ggstatsplot::ggpiestats(   data = mtcars,   x = cyl,   y = am,   title = \"Distribution of Cylinders by Transmission\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/continuous-comparisons.html",
        "id": "dot-charts-with-jjdotplotstats",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Dot charts with jjdotplotstats()",
        "title": "Categorical Plot Functions",
        "text": "jjdotplotstats() function shows group comparisons using dot plots. wraps ggstatsplot::ggdotplotstats().",
        "code": "# Underlying function that jjdotplotstats() wraps ggstatsplot::ggdotplotstats(   data = mtcars,   x = hp,   y = vs,   title = \"Horsepower by Engine Configuration\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/continuous-comparisons.html",
        "id": "within-group-comparisons-with-jjwithinstats",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Within-group comparisons with jjwithinstats()",
        "title": "Categorical Plot Functions",
        "text": "jjwithinstats() function compares repeated measurements within groups. wraps ggstatsplot::ggwithinstats().",
        "code": "# Create long format data for within-group comparison library(tidyr) mtcars_long <- mtcars %>%   select(mpg, hp, wt, qsec) %>%   mutate(id = row_number()) %>%   pivot_longer(cols = c(mpg, hp, wt, qsec),                 names_to = \"measure\",                 values_to = \"value\") %>%   # Standardize values for comparison   group_by(measure) %>%   mutate(value = scale(value)[,1]) %>%   ungroup()  # Underlying function that jjwithinstats() wraps ggstatsplot::ggwithinstats(   data = mtcars_long,   x = measure,   y = value,   paired = TRUE,   id = id,   title = \"Comparison of Standardized Car Measurements\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/continuous-comparisons.html",
        "id": "usage-in-jamovi",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Usage in jamovi",
        "title": "Categorical Plot Functions",
        "text": "functions designed used jamovi graphical interface, provide: Interactive parameter selection Automatic data type handling Integrated results display Export capabilities use functions jamovi: Install jjstatsplot module Load data Navigate JJStatsPlot menu Select appropriate plot type Configure variables options interface jamovi interface handles parameter validation, data preprocessing, result presentation automatically.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/correlations-scatterplots.html",
        "id": "correlation-matrices-with-jjcorrmat",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Correlation matrices with jjcorrmat()",
        "title": "Correlations and Scatter Plots",
        "text": "jjcorrmat() visualises pairwise correlations numeric variables reports associated tests. look relationships mpg, hp wt mtcars data.",
        "code": "jjcorrmat(data = mtcars, dep = c(mpg, hp, wt), grvar = NULL) #>  #>  CORRELATION MATRIX #>  #>  You have selected to use a correlation matrix to compare continuous #>  variables."
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/correlations-scatterplots.html",
        "id": "scatter-plots-with-jjscatterstats",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Scatter plots with jjscatterstats()",
        "title": "Correlations and Scatter Plots",
        "text": "jjscatterstats() produces scatter plot regression line textual output describing correlation regression statistics.",
        "code": "jjscatterstats(data = mtcars, dep = mpg, group = hp, grvar = NULL) #>  #>  SCATTER PLOT #>  #>  You have selected to use a scatter plot."
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/data-summary.html",
        "id": "continuous-variables",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Continuous Variables",
        "title": "Summarising Clinicopathological Data",
        "text": "summarydata() provides descriptive statistics (mean, median, quartiles) numeric variables.",
        "code": "summarydata(   data = histopathology,   vars = vars(Age, TumorSize) )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/data-summary.html",
        "id": "categorical-variables",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Categorical Variables",
        "title": "Summarising Clinicopathological Data",
        "text": "reportcat() summarises categorical variables counts percentages.",
        "code": "reportcat(   data = histopathology,   vars = vars(Sex, Grade) )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/data-summary.html",
        "id": "cross-tables",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Cross Tables",
        "title": "Summarising Clinicopathological Data",
        "text": "Use crosstable() create cross tabulations statistical tests. group argument defines column variable.",
        "code": "crosstable(   data = histopathology,   vars = vars(Sex, Grade),   group = \"PreinvasiveComponent\",   sty = \"nejm\",   excl = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/data-summary.html",
        "id": "table-one-for-publications",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Table One for Publications",
        "title": "Summarising Clinicopathological Data",
        "text": "tableone() creates publication-ready tables baseline characteristics. functions output results objects contain tables can converted data frames customisation.",
        "code": "tableone(   data = histopathology,   vars = vars(Sex, PreinvasiveComponent, LVI, PNI, Grade, Age),   sty = \"t3\",   excl = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "introduction",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Introduction",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "vignette covers advanced features Decision Panel Optimization module, including custom optimization functions, complex constraints, programmatic access results.",
        "code": "# Load required packages library(meddecide) #> Warning: replacing previous import 'jmvcore::select' by 'dplyr::select' when #> loading 'meddecide' library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) #> Warning: package 'ggplot2' was built under R version 4.3.3 library(rpart) #> Warning: package 'rpart' was built under R version 4.3.3 library(rpart.plot) library(knitr) #> Warning: package 'knitr' was built under R version 4.3.3 library(forcats) # Set seed for reproducibility set.seed(123)"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "defining-custom-utility-functions",
        "dir": "Articles",
        "previous_headings": "Custom Optimization Functions",
        "what": "Defining Custom Utility Functions",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "module allows custom utility functions incorporate domain-specific knowledge:",
        "code": "# Define a custom utility function for COVID screening # Prioritizes not missing cases while considering hospital capacity covid_utility <- function(TP, FP, TN, FN, test_cost, hospital_capacity = 100) {   # Base utilities   u_TP <- 100    # Correctly identified case   u_TN <- 10     # Correctly ruled out   u_FP <- -20    # Unnecessary isolation   u_FN <- -1000  # Missed case (high penalty)      # Capacity penalty - increases FP cost when near capacity   current_positives <- TP + FP   capacity_factor <- ifelse(current_positives > hospital_capacity * 0.8,                            (current_positives / hospital_capacity)^2,                            1)   u_FP_adjusted <- u_FP * capacity_factor      # Calculate total utility   total_utility <- (TP * u_TP + TN * u_TN +                     FP * u_FP_adjusted + FN * u_FN - test_cost)      return(total_utility) }  # Example calculation n_total <- 1000 prevalence <- 0.15 test_cost <- 55  # Combined test cost  # Scenario 1: Low capacity utility_low_capacity <- covid_utility(   TP = 147,  # 98% sensitivity   FP = 26,   # 97% specificity     TN = 824,   FN = 3,   test_cost = test_cost,   hospital_capacity = 50 )  # Scenario 2: High capacity utility_high_capacity <- covid_utility(   TP = 147,   FP = 26,   TN = 824,   FN = 3,   test_cost = test_cost,   hospital_capacity = 200 )  cat(\"Utility with low capacity:\", utility_low_capacity, \"\\n\") #> Utility with low capacity: 13659.77 cat(\"Utility with high capacity:\", utility_high_capacity, \"\\n\") #> Utility with high capacity: 19495.92"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "implementing-multi-objective-optimization",
        "dir": "Articles",
        "previous_headings": "Custom Optimization Functions",
        "what": "Implementing Multi-Objective Optimization",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "multiple objectives conflict, use Pareto optimization:",
        "code": "# Generate test combinations and their performance generate_pareto_data <- function(data, tests, gold, gold_positive) {   # Get all possible test combinations   all_combinations <- list()      for (i in 1:length(tests)) {     combos <- combn(tests, i, simplify = FALSE)     all_combinations <- c(all_combinations, combos)   }      # Calculate metrics for each combination   results <- data.frame()      for (combo in all_combinations) {     # Simulate parallel ANY rule     test_positive <- rowSums(data[combo] == \"Positive\" |                             data[combo] == \"Abnormal\" |                             data[combo] == \"MTB detected\",                            na.rm = TRUE) > 0          truth <- data[[gold]] == gold_positive          # Calculate metrics     TP <- sum(test_positive & truth)     FP <- sum(test_positive & !truth)     TN <- sum(!test_positive & !truth)     FN <- sum(!test_positive & truth)          sensitivity <- TP / (TP + FN)     specificity <- TN / (TN + FP)          # Simulated costs     test_costs <- c(rapid_antigen = 5, pcr = 50, chest_ct = 200)     total_cost <- sum(test_costs[combo])          results <- rbind(results, data.frame(       tests = paste(combo, collapse = \"+\"),       n_tests = length(combo),       sensitivity = sensitivity,       specificity = specificity,       cost = total_cost     ))   }      return(results) }  # Generate Pareto frontier for COVID tests pareto_data <- generate_pareto_data(   covid_screening_data[1:500,],  # Use subset for speed   tests = c(\"rapid_antigen\", \"pcr\", \"chest_ct\"),   gold = \"covid_status\",   gold_positive = \"Positive\" )  # Identify Pareto optimal solutions is_pareto_optimal <- function(data, objectives) {   n <- nrow(data)   pareto <- rep(TRUE, n)      for (i in 1:n) {     for (j in 1:n) {       if (i != j) {         # Check if j dominates i         dominates <- all(data[j, objectives] >= data[i, objectives]) &&                     any(data[j, objectives] > data[i, objectives])         if (dominates) {           pareto[i] <- FALSE           break         }       }     }   }      return(pareto) }  # For sensitivity and cost (cost should be minimized, so use negative) pareto_data$neg_cost <- -pareto_data$cost pareto_data$pareto_optimal <- is_pareto_optimal(   pareto_data,    c(\"sensitivity\", \"neg_cost\") )  # Visualize Pareto frontier ggplot(pareto_data, aes(x = cost, y = sensitivity * 100)) +   geom_point(aes(color = pareto_optimal, size = n_tests), alpha = 0.7) +   geom_line(data = pareto_data[pareto_data$pareto_optimal,] %>% arrange(cost),             color = \"red\", size = 1) +   geom_text(data = pareto_data[pareto_data$pareto_optimal,],             aes(label = tests), vjust = -1, size = 3) +   scale_color_manual(values = c(\"gray\", \"red\")) +   labs(     title = \"Pareto Frontier for Multi-Objective Optimization\",     x = \"Total Cost ($)\",     y = \"Sensitivity (%)\",     caption = \"Red points and line show Pareto optimal solutions\"   ) +   theme_minimal() +   theme(legend.position = \"none\") #> Warning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0. #> ℹ Please use `linewidth` instead. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated."
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "cost-sensitive-decision-trees",
        "dir": "Articles",
        "previous_headings": "Advanced Decision Trees",
        "what": "Cost-Sensitive Decision Trees",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "Implement decision trees consider accuracy cost:  Performance Comparison: Standard vs Cost-Sensitive Trees",
        "code": "# Prepare data for decision tree tree_data <- covid_screening_data %>%   select(rapid_antigen, pcr, chest_ct, symptom_score,           age, risk_group, covid_status) %>%   na.omit()  # Create cost matrix # Rows: predicted, Columns: actual # Cost of false negative is 10x cost of false positive cost_matrix <- matrix(c(0, 1,     # Predict Negative                        10, 0),    # Predict Positive                      nrow = 2, byrow = TRUE)  # Build cost-sensitive tree cost_tree <- rpart(   covid_status ~ rapid_antigen + pcr + chest_ct +                   symptom_score + age + risk_group,   data = tree_data,   method = \"class\",   parms = list(loss = cost_matrix),   control = rpart.control(cp = 0.01, maxdepth = 4) )  # Visualize tree rpart.plot(cost_tree,             main = \"Cost-Sensitive Decision Tree for COVID-19\",            extra = 104,  # Show probability and number            under = TRUE,            faclen = 0,            cex = 0.8) # Compare with standard tree standard_tree <- rpart(   covid_status ~ rapid_antigen + pcr + chest_ct +                   symptom_score + age + risk_group,   data = tree_data,   method = \"class\",   control = rpart.control(cp = 0.01, maxdepth = 4) )  # Performance comparison tree_comparison <- data.frame(   Model = c(\"Standard\", \"Cost-Sensitive\"),   Accuracy = c(     sum(predict(standard_tree, type = \"class\") == tree_data$covid_status) / nrow(tree_data),     sum(predict(cost_tree, type = \"class\") == tree_data$covid_status) / nrow(tree_data)   ),   Sensitivity = c(     {       pred <- predict(standard_tree, type = \"class\")       sum(pred == \"Positive\" & tree_data$covid_status == \"Positive\") /          sum(tree_data$covid_status == \"Positive\")     },     {       pred <- predict(cost_tree, type = \"class\")       sum(pred == \"Positive\" & tree_data$covid_status == \"Positive\") /          sum(tree_data$covid_status == \"Positive\")     }   ) )  kable(tree_comparison, digits = 3,       caption = \"Performance Comparison: Standard vs Cost-Sensitive Trees\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "ensemble-decision-trees",
        "dir": "Articles",
        "previous_headings": "Advanced Decision Trees",
        "what": "Ensemble Decision Trees",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "Combine multiple trees robust decisions: Single Tree vs Ensemble Performance",
        "code": "# Create bootstrap samples and build multiple trees n_trees <- 10 trees <- list() tree_weights <- numeric(n_trees)  for (i in 1:n_trees) {   # Bootstrap sample   boot_indices <- sample(nrow(tree_data), replace = TRUE)   boot_data <- tree_data[boot_indices,]      # Build tree with random feature subset   features <- c(\"rapid_antigen\", \"pcr\", \"chest_ct\",                  \"symptom_score\", \"age\", \"risk_group\")   selected_features <- sample(features, size = 4)      formula <- as.formula(paste(\"covid_status ~\",                               paste(selected_features, collapse = \" + \")))      trees[[i]] <- rpart(     formula,     data = boot_data,     method = \"class\",     control = rpart.control(cp = 0.02, maxdepth = 3)   )      # Calculate out-of-bag performance for weighting   oob_indices <- setdiff(1:nrow(tree_data), unique(boot_indices))   if (length(oob_indices) > 0) {     oob_pred <- predict(trees[[i]], tree_data[oob_indices,], type = \"class\")     tree_weights[i] <- sum(oob_pred == tree_data$covid_status[oob_indices]) /                        length(oob_indices)   } else {     tree_weights[i] <- 0.5   } }  # Normalize weights tree_weights <- tree_weights / sum(tree_weights)  # Ensemble prediction function ensemble_predict <- function(trees, weights, newdata) {   # Get probability predictions from each tree   prob_matrix <- matrix(0, nrow = nrow(newdata), ncol = 2)      for (i in 1:length(trees)) {     probs <- predict(trees[[i]], newdata, type = \"prob\")     prob_matrix <- prob_matrix + probs * weights[i]   }      # Return class with highest probability   classes <- levels(tree_data$covid_status)   predicted_class <- classes[apply(prob_matrix, 1, which.max)]      return(list(class = predicted_class, prob = prob_matrix)) }  # Test ensemble ensemble_pred <- ensemble_predict(trees, tree_weights, tree_data)  # Compare performance ensemble_comparison <- data.frame(   Model = c(\"Single Tree\", \"Ensemble\"),   Accuracy = c(     sum(predict(trees[[1]], type = \"class\") == tree_data$covid_status) / nrow(tree_data),     sum(ensemble_pred$class == tree_data$covid_status) / nrow(tree_data)   ) )  kable(ensemble_comparison, digits = 3,       caption = \"Single Tree vs Ensemble Performance\")"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "implementing-complex-constraints",
        "dir": "Articles",
        "previous_headings": "Complex Constraints and Business Rules",
        "what": "Implementing Complex Constraints",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "Real-world scenarios often complex constraints:",
        "code": "# Function to check if a test combination meets constraints meets_constraints <- function(tests, constraints) {   # Example constraints for TB testing      # 1. If GeneXpert is used, must have sputum collection capability   if (\"genexpert\" %in% tests && !(\"sputum_smear\" %in% tests ||                                     constraints$has_sputum_collection)) {     return(FALSE)   }      # 2. Culture requires biosafety level 3 lab   if (\"culture\" %in% tests && !constraints$has_bsl3_lab) {     return(FALSE)   }      # 3. Maximum turnaround time constraint   test_times <- c(symptoms = 0, sputum_smear = 0.5, genexpert = 0.1,                    culture = 21, chest_xray = 0.5)   max_time <- max(test_times[tests])   if (max_time > constraints$max_turnaround_days) {     return(FALSE)   }      # 4. Budget constraint   test_costs <- c(symptoms = 1, sputum_smear = 3, genexpert = 20,                    culture = 30, chest_xray = 10)   total_cost <- sum(test_costs[tests])   if (total_cost > constraints$budget_per_patient) {     return(FALSE)   }      return(TRUE) }  # Define facility-specific constraints facility_constraints <- list(   rural_clinic = list(     has_sputum_collection = TRUE,     has_bsl3_lab = FALSE,     max_turnaround_days = 1,     budget_per_patient = 15   ),   district_hospital = list(     has_sputum_collection = TRUE,     has_bsl3_lab = FALSE,     max_turnaround_days = 7,     budget_per_patient = 50   ),   reference_lab = list(     has_sputum_collection = TRUE,     has_bsl3_lab = TRUE,     max_turnaround_days = 30,     budget_per_patient = 100   ) )  # Find valid combinations for each facility type tb_tests <- c(\"symptoms\", \"sputum_smear\", \"genexpert\", \"culture\", \"chest_xray\")  for (facility in names(facility_constraints)) {   valid_combos <- list()      # Check all combinations   for (i in 1:length(tb_tests)) {     combos <- combn(tb_tests, i, simplify = FALSE)     for (combo in combos) {       if (meets_constraints(combo, facility_constraints[[facility]])) {         valid_combos <- c(valid_combos, list(combo))       }     }   }      cat(\"\\n\", facility, \": \", length(valid_combos), \" valid combinations\\n\", sep = \"\")   cat(\"Examples: \\n\")   for (j in 1:min(3, length(valid_combos))) {     cat(\"  -\", paste(valid_combos[[j]], collapse = \" + \"), \"\\n\")   } } #>  #> rural_clinic: 7 valid combinations #> Examples:  #>   - symptoms  #>   - sputum_smear  #>   - chest_xray  #>  #> district_hospital: 15 valid combinations #> Examples:  #>   - symptoms  #>   - sputum_smear  #>   - genexpert  #>  #> reference_lab: 31 valid combinations #> Examples:  #>   - symptoms  #>   - sputum_smear  #>   - genexpert"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "time-dependent-testing-strategies",
        "dir": "Articles",
        "previous_headings": "Complex Constraints and Business Rules",
        "what": "Time-Dependent Testing Strategies",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "Implement strategies change based time constraints:",
        "code": "# Time-dependent chest pain protocol time_dependent_protocol <- function(patient_data, time_available_hours) {      decisions <- data.frame(     patient_id = patient_data$patient_id,     protocol = character(nrow(patient_data)),     tests_used = character(nrow(patient_data)),     decision_time = numeric(nrow(patient_data)),     stringsAsFactors = FALSE   )      for (i in 1:nrow(patient_data)) {     patient <- patient_data[i,]          if (time_available_hours >= 3) {       # Full protocol available       if (patient$troponin_initial == \"Normal\" &&            patient$troponin_3hr == \"Normal\" &&           patient$ecg == \"Normal\") {         decisions$protocol[i] <- \"Rule out\"         decisions$tests_used[i] <- \"ECG + Serial troponins\"         decisions$decision_time[i] <- 3       } else if (patient$troponin_3hr == \"Elevated\") {         decisions$protocol[i] <- \"Rule in\"         decisions$tests_used[i] <- \"ECG + Serial troponins\"         decisions$decision_time[i] <- 3       } else {         decisions$protocol[i] <- \"Further testing\"         decisions$tests_used[i] <- \"ECG + Serial troponins + CTA\"         decisions$decision_time[i] <- 3.5       }            } else if (time_available_hours >= 1) {       # Rapid protocol       if (patient$troponin_initial == \"Normal\" &&            patient$ecg == \"Normal\" &&           patient$age < 40) {         decisions$protocol[i] <- \"Low risk discharge\"         decisions$tests_used[i] <- \"ECG + Initial troponin\"         decisions$decision_time[i] <- 1       } else {         decisions$protocol[i] <- \"Requires admission\"         decisions$tests_used[i] <- \"ECG + Initial troponin\"         decisions$decision_time[i] <- 1       }            } else {       # Ultra-rapid       if (patient$ecg == \"Ischemic changes\") {         decisions$protocol[i] <- \"Immediate cath lab\"         decisions$tests_used[i] <- \"ECG only\"         decisions$decision_time[i] <- 0.2       } else {         decisions$protocol[i] <- \"Clinical decision\"         decisions$tests_used[i] <- \"ECG only\"         decisions$decision_time[i] <- 0.2       }     }   }      return(decisions) }  # Apply to sample patients sample_mi <- mi_ruleout_data[1:20,]  # Different time scenarios time_scenarios <- c(0.5, 1, 3, 6)  for (time_limit in time_scenarios) {   results <- time_dependent_protocol(sample_mi, time_limit)      cat(\"\\nTime available:\", time_limit, \"hours\\n\")   cat(\"Protocols used:\\n\")   print(table(results$protocol))   cat(\"Average decision time:\", mean(results$decision_time), \"hours\\n\") } #>  #> Time available: 0.5 hours #> Protocols used: #>  #>  Clinical decision Immediate cath lab  #>                 17                  3  #> Average decision time: 0.2 hours #>  #> Time available: 1 hours #> Protocols used: #>  #> Low risk discharge Requires admission  #>                  3                 17  #> Average decision time: 1 hours #>  #> Time available: 3 hours #> Protocols used: #>  #>  Rule in Rule out  #>        3       17  #> Average decision time: 3 hours #>  #> Time available: 6 hours #> Protocols used: #>  #>  Rule in Rule out  #>        3       17  #> Average decision time: 3 hours"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "efficient-computation-for-large-datasets",
        "dir": "Articles",
        "previous_headings": "Performance Optimization",
        "what": "Efficient Computation for Large Datasets",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "Performance Optimization Comparison",
        "code": "# Performance Optimization and Benchmarking # This section demonstrates different approaches to optimize performance calculations  # Function to safely calculate performance metrics with NA handling safe_performance_metrics <- function(predictions, actual, positive_class = \"Positive\") {   # Handle missing values   complete_cases <- !is.na(predictions) & !is.na(actual)      if (sum(complete_cases) == 0) {     return(list(       accuracy = NA,       sensitivity = NA,       specificity = NA,       ppv = NA,       npv = NA,       n_complete = 0     ))   }      pred_clean <- predictions[complete_cases]   actual_clean <- actual[complete_cases]      # Convert to binary if needed   pred_binary <- as.character(pred_clean) == positive_class   actual_binary <- as.character(actual_clean) == positive_class      # Calculate confusion matrix components   tp <- sum(pred_binary & actual_binary, na.rm = TRUE)   tn <- sum(!pred_binary & !actual_binary, na.rm = TRUE)   fp <- sum(pred_binary & !actual_binary, na.rm = TRUE)   fn <- sum(!pred_binary & actual_binary, na.rm = TRUE)      # Calculate metrics with division by zero protection   total <- tp + tn + fp + fn   accuracy <- if (total > 0) (tp + tn) / total else NA      sensitivity <- if ((tp + fn) > 0) tp / (tp + fn) else NA   specificity <- if ((tn + fp) > 0) tn / (tn + fp) else NA   ppv <- if ((tp + fp) > 0) tp / (tp + fp) else NA   npv <- if ((tn + fn) > 0) tn / (tn + fn) else NA      return(list(     accuracy = accuracy,     sensitivity = sensitivity,     specificity = specificity,     ppv = ppv,     npv = npv,     n_complete = sum(complete_cases)   )) }  # Optimized confusion matrix calculation fast_confusion_matrix <- function(predictions, actual, positive_class = \"Positive\") {   # Handle NAs upfront   complete_cases <- !is.na(predictions) & !is.na(actual)      if (sum(complete_cases) < 2) {     return(matrix(c(0, 0, 0, 0), nrow = 2,                    dimnames = list(                     Predicted = c(\"Negative\", \"Positive\"),                     Actual = c(\"Negative\", \"Positive\")                   )))   }      pred_clean <- predictions[complete_cases]   actual_clean <- actual[complete_cases]      # Use table for fast cross-tabulation   conf_table <- table(     Predicted = factor(pred_clean, levels = c(setdiff(unique(c(pred_clean, actual_clean)), positive_class), positive_class)),     Actual = factor(actual_clean, levels = c(setdiff(unique(c(pred_clean, actual_clean)), positive_class), positive_class))   )      return(conf_table) }  # Vectorized performance calculation vectorized_metrics <- function(pred_vector, actual_vector, positive_class = \"Positive\") {   # Remove NAs   complete_idx <- !is.na(pred_vector) & !is.na(actual_vector)      if (sum(complete_idx) == 0) {     return(data.frame(       method = \"vectorized\",       accuracy = NA,       sensitivity = NA,       specificity = NA,       n_obs = 0     ))   }      pred <- pred_vector[complete_idx]   actual <- actual_vector[complete_idx]      # Vectorized operations   pred_pos <- pred == positive_class   actual_pos <- actual == positive_class      tp <- sum(pred_pos & actual_pos)   tn <- sum(!pred_pos & !actual_pos)   fp <- sum(pred_pos & !actual_pos)   fn <- sum(!pred_pos & actual_pos)      n_total <- length(pred)   n_pos <- sum(actual_pos)   n_neg <- sum(!actual_pos)      data.frame(     method = \"vectorized\",     accuracy = (tp + tn) / n_total,     sensitivity = if (n_pos > 0) tp / n_pos else NA,     specificity = if (n_neg > 0) tn / n_neg else NA,     n_obs = n_total   ) }  # Create test data for benchmarking (ensure no NAs in critical columns) set.seed(123) n_test <- 1000  # Create predictions with some realistic accuracy actual_test <- factor(sample(c(\"Negative\", \"Positive\"), n_test,                             replace = TRUE, prob = c(0.8, 0.2)))  # Create predictions that correlate with actual (realistic scenario) pred_prob <- ifelse(actual_test == \"Positive\", 0.85, 0.15) pred_test <- factor(ifelse(runif(n_test) < pred_prob, \"Positive\", \"Negative\"))  # Introduce some missing values (but not in the benchmarked functions) missing_idx <- sample(n_test, size = floor(n_test * 0.05)) actual_test_with_na <- actual_test pred_test_with_na <- pred_test actual_test_with_na[missing_idx[1:length(missing_idx)/2]] <- NA pred_test_with_na[missing_idx[(length(missing_idx)/2 + 1):length(missing_idx)]] <- NA  cat(\"Test data created:\\n\") #> Test data created: cat(\"Total observations:\", n_test, \"\\n\") #> Total observations: 1000 cat(\"Missing values in actual:\", sum(is.na(actual_test_with_na)), \"\\n\") #> Missing values in actual: 25 cat(\"Missing values in predictions:\", sum(is.na(pred_test_with_na)), \"\\n\") #> Missing values in predictions: 25 cat(\"Complete cases:\", sum(!is.na(actual_test_with_na) & !is.na(pred_test_with_na)), \"\\n\") #> Complete cases: 950  # Test the functions with clean data first cat(\"\\nTesting functions with clean data:\\n\") #>  #> Testing functions with clean data: clean_metrics <- safe_performance_metrics(pred_test, actual_test) print(clean_metrics) #> $accuracy #> [1] 0.857 #>  #> $sensitivity #> [1] 0.8636364 #>  #> $specificity #> [1] 0.8553616 #>  #> $ppv #> [1] 0.5958188 #>  #> $npv #> [1] 0.9621318 #>  #> $n_complete #> [1] 1000  clean_confusion <- fast_confusion_matrix(pred_test, actual_test) print(clean_confusion) #>           Actual #> Predicted  Negative Positive #>   Negative      686       27 #>   Positive      116      171  # Test with data containing NAs cat(\"\\nTesting functions with NA values:\\n\") #>  #> Testing functions with NA values: na_metrics <- safe_performance_metrics(pred_test_with_na, actual_test_with_na) print(na_metrics) #> $accuracy #> [1] 0.8610526 #>  #> $sensitivity #> [1] 0.859375 #>  #> $specificity #> [1] 0.8614776 #>  #> $ppv #> [1] 0.6111111 #>  #> $npv #> [1] 0.9602941 #>  #> $n_complete #> [1] 950  # Benchmark different approaches (using clean data to avoid NA issues in timing) cat(\"\\nPerformance benchmarking:\\n\") #>  #> Performance benchmarking:  # Only benchmark if microbenchmark is available if (requireNamespace(\"microbenchmark\", quietly = TRUE)) {   tryCatch({     benchmark_results <- microbenchmark::microbenchmark(       \"safe_metrics\" = safe_performance_metrics(pred_test, actual_test),       \"fast_confusion\" = fast_confusion_matrix(pred_test, actual_test),       \"vectorized\" = vectorized_metrics(pred_test, actual_test),       times = 10     )          print(benchmark_results)          # Plot benchmark results if possible     if (requireNamespace(\"ggplot2\", quietly = TRUE)) {       plot(benchmark_results)     }        }, error = function(e) {     cat(\"Benchmark error (using fallback timing):\", e$message, \"\\n\")          # Fallback timing method     cat(\"Using system.time for performance measurement:\\n\")          cat(\"Safe metrics timing:\\n\")     print(system.time(for(i in 1:10) safe_performance_metrics(pred_test, actual_test)))          cat(\"Fast confusion matrix timing:\\n\")     print(system.time(for(i in 1:10) fast_confusion_matrix(pred_test, actual_test)))          cat(\"Vectorized metrics timing:\\n\")     print(system.time(for(i in 1:10) vectorized_metrics(pred_test, actual_test)))   }) } else {   cat(\"microbenchmark package not available, using system.time:\\n\")      cat(\"Safe metrics timing:\\n\")   print(system.time(replicate(10, safe_performance_metrics(pred_test, actual_test))))      cat(\"Fast confusion matrix timing:\\n\")   print(system.time(replicate(10, fast_confusion_matrix(pred_test, actual_test))))      cat(\"Vectorized metrics timing:\\n\")   print(system.time(replicate(10, vectorized_metrics(pred_test, actual_test)))) } #> Warning in microbenchmark::microbenchmark(safe_metrics = #> safe_performance_metrics(pred_test, : less accurate nanosecond times to avoid #> potential integer overflows #> Unit: microseconds #>            expr     min      lq     mean   median      uq      max neval cld #>    safe_metrics  46.494  47.273  51.2377  50.3275  55.719   59.286    10   a #>  fast_confusion 253.216 255.676 267.7136 260.4525 275.889  307.746    10   a #>      vectorized 148.051 151.946 746.3640 154.5905 164.410 6049.509    10   a # Performance comparison table performance_comparison <- data.frame(   Method = c(\"Safe Metrics\", \"Fast Confusion Matrix\", \"Vectorized Metrics\"),   `Handles NAs` = c(\"Yes\", \"Yes\", \"Yes\"),   `Memory Efficient` = c(\"Medium\", \"High\", \"High\"),   `Speed` = c(\"Medium\", \"Fast\", \"Fastest\"),   `Use Case` = c(\"General purpose\", \"Detailed analysis\", \"Large datasets\"),   stringsAsFactors = FALSE )  knitr::kable(performance_comparison,               caption = \"Performance Optimization Comparison\",              align = 'c')"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "caching-and-memoization",
        "dir": "Articles",
        "previous_headings": "Performance Optimization",
        "what": "Caching and Memoization",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "",
        "code": "# Create memoized function for expensive calculations library(memoise)  # Original expensive function calculate_test_performance <- function(test_data, gold_standard) {   # Simulate expensive calculation   Sys.sleep(0.1)  # Pretend this takes time      conf_matrix <- table(test_data, gold_standard)   sensitivity <- conf_matrix[2,2] / sum(conf_matrix[,2])   specificity <- conf_matrix[1,1] / sum(conf_matrix[,1])      return(list(sensitivity = sensitivity, specificity = specificity)) }  # Memoized version calculate_test_performance_memo <- memoise(calculate_test_performance)  # Demonstration test_vector <- as.numeric(covid_screening_data$rapid_antigen == \"Positive\") gold_vector <- as.numeric(covid_screening_data$covid_status == \"Positive\")  # First call - slow system.time({   result1 <- calculate_test_performance_memo(test_vector[1:100], gold_vector[1:100]) }) #>    user  system elapsed  #>   0.001   0.000   0.101  # Second call with same data - fast (cached) system.time({   result2 <- calculate_test_performance_memo(test_vector[1:100], gold_vector[1:100]) }) #>    user  system elapsed  #>   0.007   0.000   0.006  cat(\"Results match:\", identical(result1, result2), \"\\n\") #> Results match: TRUE"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "exporting-results-for-clinical-decision-support-systems",
        "dir": "Articles",
        "previous_headings": "Integration with External Systems",
        "what": "Exporting Results for Clinical Decision Support Systems",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "Available Export Formats Decision Rules",
        "code": "# Export Clinical Decision Support System Rules  # Safe function to export tree rules with proper error handling export_tree_as_rules <- function(tree_model, data) {   # Check if tree model exists and is valid   if (is.null(tree_model) || !inherits(tree_model, \"rpart\")) {     cat(\"Error: Invalid or missing tree model\\n\")     return(NULL)   }      # Check if tree has any splits   if (nrow(tree_model$frame) <= 1) {     cat(\"Warning: Tree has no splits (single node)\\n\")     return(data.frame(       rule_id = 1,       condition = \"Always true\",       prediction = \"Default\",       confidence = 1.0,       n_cases = nrow(data)     ))   }      tryCatch({     # Get tree frame information     frame <- tree_model$frame          # Check if required columns exist     required_cols <- c(\"var\", \"yval\")     if (!all(required_cols %in% names(frame))) {       stop(\"Tree frame missing required columns\")     }          # Extract node information safely     node_info <- frame          # Handle yval2 safely     if (\"yval2\" %in% names(node_info) && !is.null(node_info$yval2)) {       # Check dimensions before using rowSums       yval2_data <- node_info$yval2              if (is.matrix(yval2_data) && ncol(yval2_data) >= 2) {         # Safe to use rowSums         node_counts <- rowSums(yval2_data[, 1:min(2, ncol(yval2_data)), drop = FALSE])       } else if (is.data.frame(yval2_data) && ncol(yval2_data) >= 2) {         # Convert to matrix first         yval2_matrix <- as.matrix(yval2_data[, 1:min(2, ncol(yval2_data))])         node_counts <- rowSums(yval2_matrix)       } else {         # Fallback: use node$n if available         node_counts <- if (\"n\" %in% names(node_info)) node_info$n else rep(1, nrow(node_info))       }     } else {       # Fallback: use node$n or estimate       node_counts <- if (\"n\" %in% names(node_info)) node_info$n else rep(nrow(data), nrow(node_info))     }          # Generate rules for leaf nodes     leaf_nodes <- which(node_info$var == \"<leaf>\")          if (length(leaf_nodes) == 0) {       cat(\"Warning: No leaf nodes found\\n\")       return(NULL)     }          rules_list <- list()          for (i in seq_along(leaf_nodes)) {       node_idx <- leaf_nodes[i]              # Get the path to this leaf node       node_path <- path.rpart(tree_model, nodes = as.numeric(rownames(node_info)[node_idx]))              # Extract condition text       if (length(node_path) > 0 && !is.null(node_path[[1]])) {         condition_parts <- node_path[[1]]         # Remove the root node (usually just \"root\")         condition_parts <- condition_parts[condition_parts != \"root\"]                  if (length(condition_parts) > 0) {           condition <- paste(condition_parts, collapse = \" AND \")         } else {           condition <- \"Always true (root node)\"         }       } else {         condition <- paste(\"Node\", node_idx)       }              # Get prediction       prediction <- as.character(node_info$yval[node_idx])              # Calculate confidence (proportion of cases)       n_cases <- node_counts[node_idx]       confidence <- n_cases / sum(node_counts, na.rm = TRUE)              rules_list[[i]] <- data.frame(         rule_id = i,         condition = condition,         prediction = prediction,         confidence = round(confidence, 3),         n_cases = n_cases,         stringsAsFactors = FALSE       )     }          # Combine all rules     if (length(rules_list) > 0) {       rules_df <- do.call(rbind, rules_list)       return(rules_df)     } else {       return(NULL)     }        }, error = function(e) {     cat(\"Error in export_tree_as_rules:\", e$message, \"\\n\")     cat(\"Tree structure:\\n\")     if (exists(\"frame\")) {       print(str(frame))     } else {       print(str(tree_model))     }     return(NULL)   }) }  # Alternative simple rule extraction function simple_tree_rules <- function(tree_model, data) {   if (is.null(tree_model) || !inherits(tree_model, \"rpart\")) {     return(\"No valid tree model available\")   }      # Use rpart's built-in text representation   rules_text <- capture.output(print(tree_model))      return(paste(rules_text, collapse = \"\\n\")) }  # Generate exportable rules cat(\"Generating Clinical Decision Support Rules...\\n\") #> Generating Clinical Decision Support Rules... # Check if we have a valid tree from previous chunks if (exists(\"cost_tree\") && !is.null(cost_tree)) {   cat(\"Exporting rules from cost-sensitive tree...\\n\")      # Try the main function first   exported_rules <- export_tree_as_rules(cost_tree, covid_screening_data)      if (!is.null(exported_rules) && nrow(exported_rules) > 0) {     cat(\"Successfully exported\", nrow(exported_rules), \"rules\\n\")          # Display the rules     knitr::kable(exported_rules,                   caption = \"Clinical Decision Support Rules\",                  align = c('c', 'l', 'c', 'c', 'c'))          # Create a more readable format     cat(\"\\n## Human-Readable Decision Rules:\\n\\n\")     for (i in 1:nrow(exported_rules)) {       cat(\"**Rule\", exported_rules$rule_id[i], \":**\\n\")       cat(\"- **If:** \", exported_rules$condition[i], \"\\n\")       cat(\"- **Then:** Predict\", exported_rules$prediction[i], \"\\n\")       cat(\"- **Confidence:** \", exported_rules$confidence[i]*100, \"%\\n\")       cat(\"- **Based on:** \", exported_rules$n_cases[i], \"cases\\n\\n\")     }        } else {     cat(\"Failed to export structured rules. Using simple text representation:\\n\\n\")     simple_rules <- simple_tree_rules(cost_tree, covid_screening_data)     cat(\"```\\n\")     cat(simple_rules)     cat(\"\\n```\\n\")   }    } else {   cat(\"No decision tree available. Creating a simple example tree...\\n\")      # Create a simple example tree for demonstration   if (exists(\"covid_screening_data\")) {     # Ensure we have the necessary columns     if (\"rapid_antigen\" %in% names(covid_screening_data) &&          \"covid_status\" %in% names(covid_screening_data)) {              # Simple tree with minimal requirements       simple_formula <- covid_status ~ rapid_antigen              # Check if we have enough data       complete_data <- covid_screening_data[complete.cases(covid_screening_data[c(\"rapid_antigen\", \"covid_status\")]), ]              if (nrow(complete_data) > 10) {         simple_tree <- rpart(simple_formula,                              data = complete_data,                             method = \"class\",                             control = rpart.control(minbucket = 5, cp = 0.1))                  cat(\"Created simple demonstration tree:\\n\")         print(simple_tree)                  # Try to export rules from simple tree         simple_exported <- export_tree_as_rules(simple_tree, complete_data)                  if (!is.null(simple_exported)) {           knitr::kable(simple_exported,                         caption = \"Simple Decision Rules (Example)\",                        align = c('c', 'l', 'c', 'c', 'c'))         }       } else {         cat(\"Insufficient data for tree creation\\n\")       }     } else {       cat(\"Required columns not found in data\\n\")     }   } else {     cat(\"No data available for tree creation\\n\")   } } #> Exporting rules from cost-sensitive tree... #>  #>  node number: 4  #>    root #>    pcr=Negative #>    rapid_antigen=Negative #>  #>  node number: 10  #>    root #>    pcr=Negative #>    rapid_antigen=Positive #>    chest_ct=Normal #>  #>  node number: 11  #>    root #>    pcr=Negative #>    rapid_antigen=Positive #>    chest_ct=Abnormal #>  #>  node number: 3  #>    root #>    pcr=Positive #> Successfully exported 4 rules #>  #> ## Human-Readable Decision Rules: #>  #> **Rule 1 :** #> - **If:**  pcr=Negative AND rapid_antigen=Negative  #> - **Then:** Predict 1  #> - **Confidence:**  31.5 % #> - **Based on:**  574 cases #>  #> **Rule 2 :** #> - **If:**  pcr=Negative AND rapid_antigen=Positive AND chest_ct=Normal  #> - **Then:** Predict 1  #> - **Confidence:**  0.9 % #> - **Based on:**  16 cases #>  #> **Rule 3 :** #> - **If:**  pcr=Negative AND rapid_antigen=Positive AND chest_ct=Abnormal  #> - **Then:** Predict 2  #> - **Confidence:**  0.4 % #> - **Based on:**  8 cases #>  #> **Rule 4 :** #> - **If:**  pcr=Positive  #> - **Then:** Predict 2  #> - **Confidence:**  0.3 % #> - **Based on:**  6 cases  # Export formats section cat(\"\\n## Export Formats\\n\\n\") #>  #> ## Export Formats  export_formats <- data.frame(   Format = c(\"JSON\", \"XML\", \"CSV\", \"SQL\", \"R Code\"),   `Use Case` = c(     \"Web applications, APIs\",     \"Healthcare standards (HL7)\",     \"Spreadsheet analysis\",     \"Database integration\",     \"R/Statistical software\"   ),   Complexity = c(\"Medium\", \"High\", \"Low\", \"Medium\", \"Low\"),   Implementation = c(     \"jsonlite::toJSON()\",     \"XML::xmlTree()\",     \"write.csv()\",     \"Custom SQL generation\",     \"dput() or custom function\"   ),   stringsAsFactors = FALSE )  knitr::kable(export_formats,              caption = \"Available Export Formats for Decision Rules\",              align = c('l', 'l', 'c', 'l')) cat(\"\\n## Implementation Example\\n\\n\") #>  #> ## Implementation Example cat(\"Here's how these rules could be implemented in a clinical system:\\n\\n\") #> Here's how these rules could be implemented in a clinical system: implementation_example <- ' # Example implementation in R clinical_decision <- function(rapid_antigen_result) {   if (rapid_antigen_result == \"Positive\") {     return(list(       decision = \"Positive\",       confidence = 0.95,       recommendation = \"Confirm with PCR if needed for official diagnosis\"     ))   } else {     return(list(       decision = \"Negative\",        confidence = 0.85,       recommendation = \"Consider PCR if high clinical suspicion\"     ))   } }  # Usage example: # result <- clinical_decision(\"Positive\") # print(result$decision) '  cat(\"```r\\n\") #> ```r cat(implementation_example) #>  #> # Example implementation in R #> clinical_decision <- function(rapid_antigen_result) { #>   if (rapid_antigen_result == \"Positive\") { #>     return(list( #>       decision = \"Positive\", #>       confidence = 0.95, #>       recommendation = \"Confirm with PCR if needed for official diagnosis\" #>     )) #>   } else { #>     return(list( #>       decision = \"Negative\",  #>       confidence = 0.85, #>       recommendation = \"Consider PCR if high clinical suspicion\" #>     )) #>   } #> } #>  #> # Usage example: #> # result <- clinical_decision(\"Positive\") #> # print(result$decision) cat(\"```\\n\") #> ```"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "creating-api-ready-outputs",
        "dir": "Articles",
        "previous_headings": "Integration with External Systems",
        "what": "Creating API-Ready Outputs",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "",
        "code": "# Function to create API response for test panel recommendation create_api_response <- function(patient_data, optimal_panel) {   response <- list(     timestamp = Sys.time(),     patient_id = patient_data$patient_id,     recommendations = list(       primary = list(         tests = optimal_panel$tests,         strategy = optimal_panel$strategy,         expected_performance = list(           sensitivity = round(optimal_panel$sensitivity * 100, 1),           specificity = round(optimal_panel$specificity * 100, 1),           ppv = round(optimal_panel$ppv * 100, 1),           npv = round(optimal_panel$npv * 100, 1)         ),         estimated_cost = optimal_panel$cost       ),       alternative_protocols = list(         rapid = \"Rapid antigen only\",         comprehensive = \"All available tests\"       )     ),     warnings = list(),     metadata = list(       model_version = \"1.0.0\",       confidence_level = \"high\"     )   )      # Add warnings based on patient characteristics   if (patient_data$age > 65) {     response$warnings <- append(response$warnings,                                 \"High-risk age group - consider lower threshold\")   }      return(response) }  # Example API response example_patient <- covid_screening_data[1,] example_panel <- list(   tests = \"rapid_antigen+pcr\",   strategy = \"parallel_any\",   sensitivity = 0.97,   specificity = 0.97,   ppv = 0.82,   npv = 0.99,   cost = 55 )  api_response <- create_api_response(example_patient, example_panel) cat(\"API Response:\\n\") #> API Response: print(jsonlite::toJSON(api_response, pretty = TRUE)) #> { #>   \"timestamp\": [\"2025-06-15 18:11:49\"], #>   \"patient_id\": [1], #>   \"recommendations\": { #>     \"primary\": { #>       \"tests\": [\"rapid_antigen+pcr\"], #>       \"strategy\": [\"parallel_any\"], #>       \"expected_performance\": { #>         \"sensitivity\": [97], #>         \"specificity\": [97], #>         \"ppv\": [82], #>         \"npv\": [99] #>       }, #>       \"estimated_cost\": [55] #>     }, #>     \"alternative_protocols\": { #>       \"rapid\": [\"Rapid antigen only\"], #>       \"comprehensive\": [\"All available tests\"] #>     } #>   }, #>   \"warnings\": [], #>   \"metadata\": { #>     \"model_version\": [\"1.0.0\"], #>     \"confidence_level\": [\"high\"] #>   } #> }"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "cross-validation-with-custom-splits",
        "dir": "Articles",
        "previous_headings": "Validation and Quality Control",
        "what": "Cross-Validation with Custom Splits",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "",
        "code": "# Time-based cross-validation for temporal data time_based_cv <- function(data, date_column, n_splits = 5) {   # Sort by date   data <- data[order(data[[date_column]]),]   n <- nrow(data)      # Create time-based splits   splits <- list()   test_size <- floor(n / (n_splits + 1))      for (i in 1:n_splits) {     train_end <- test_size * i     test_start <- train_end + 1     test_end <- min(test_start + test_size - 1, n)          splits[[i]] <- list(       train = 1:train_end,       test = test_start:test_end     )   }      return(splits) }  # Stratified cross-validation ensuring prevalence balance stratified_cv <- function(data, outcome_column, n_folds = 5) {   # Separate by outcome   positive_idx <- which(data[[outcome_column]] == levels(data[[outcome_column]])[2])   negative_idx <- which(data[[outcome_column]] == levels(data[[outcome_column]])[1])      # Shuffle within strata   positive_idx <- sample(positive_idx)   negative_idx <- sample(negative_idx)      # Create folds maintaining proportion   folds <- list()   pos_per_fold <- length(positive_idx) %/% n_folds   neg_per_fold <- length(negative_idx) %/% n_folds      for (i in 1:n_folds) {     if (i < n_folds) {       fold_pos <- positive_idx[((i-1)*pos_per_fold + 1):(i*pos_per_fold)]       fold_neg <- negative_idx[((i-1)*neg_per_fold + 1):(i*neg_per_fold)]     } else {       # Last fold gets remaining       fold_pos <- positive_idx[((i-1)*pos_per_fold + 1):length(positive_idx)]       fold_neg <- negative_idx[((i-1)*neg_per_fold + 1):length(negative_idx)]     }          folds[[i]] <- c(fold_pos, fold_neg)   }      return(folds) }  # Apply stratified CV folds <- stratified_cv(covid_screening_data, \"covid_status\", n_folds = 5)  # Check fold balance for (i in 1:length(folds)) {   fold_data <- covid_screening_data[folds[[i]],]   prevalence <- mean(fold_data$covid_status == \"Positive\")   cat(\"Fold\", i, \": n =\", length(folds[[i]]),        \", prevalence =\", round(prevalence * 100, 1), \"%\\n\") } #> Fold 1 : n = 199 , prevalence = 14.6 % #> Fold 2 : n = 199 , prevalence = 14.6 % #> Fold 3 : n = 199 , prevalence = 14.6 % #> Fold 4 : n = 199 , prevalence = 14.6 % #> Fold 5 : n = 204 , prevalence = 16.2 %"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "conclusion",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Conclusion",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "vignette covered advanced features including: Custom Optimization: Multi-objective optimization, Pareto frontiers Advanced Trees: Cost-sensitive ensemble methods Complex Constraints: Business rules time-dependent strategies Performance: Efficient computation caching Integration: API outputs clinical decision support Validation: Custom cross-validation schemes advanced features enable Decision Panel Optimization module handle complex real-world scenarios maintaining computational efficiency clinical relevance.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_advanced.html",
        "id": "session-information",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Session Information",
        "title": "Advanced Features and Customization in Decision Panel Optimization",
        "text": "",
        "code": "sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: aarch64-apple-darwin20 (64-bit) #> Running under: macOS 15.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/Istanbul #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] memoise_2.0.1      forcats_1.0.0      knitr_1.50         rpart.plot_3.1.2   #> [5] rpart_4.1.24       ggplot2_3.5.2      dplyr_1.1.4        meddecide_0.0.3.12 #>  #> loaded via a namespace (and not attached): #>  [1] tidyselect_1.2.1        farver_2.1.2            fastmap_1.2.0           #>  [4] jmvcore_2.6.3           fontquiver_0.2.1        digest_0.6.37           #>  [7] timechange_0.3.0        lifecycle_1.0.4         sf_1.0-21               #> [10] survival_3.8-3          magrittr_2.0.3          compiler_4.3.2          #> [13] rlang_1.1.6             sass_0.4.10             tools_4.3.2             #> [16] yaml_2.3.10             data.table_1.17.4       askpass_1.2.1           #> [19] labeling_0.4.3          htmlwidgets_1.6.4       classInt_0.4-11         #> [22] xml2_1.3.8              RColorBrewer_1.1-3      irr_0.84.1              #> [25] KernSmooth_2.23-26      withr_3.0.2             purrr_1.0.4             #> [28] desc_1.4.3              grid_4.3.2              gdtools_0.4.2           #> [31] e1071_1.7-16            cutpointr_1.2.0         scales_1.4.0            #> [34] iterators_1.0.14        MASS_7.3-60             cli_3.6.5               #> [37] rmarkdown_2.29          crayon_1.5.3            ragg_1.4.0              #> [40] generics_0.1.4          rstudioapi_0.17.1       DBI_1.2.3               #> [43] cachem_1.1.0            proxy_0.4-27            epiR_2.0.84             #> [46] pander_0.6.6            stringr_1.5.1           splines_4.3.2           #> [49] BiasedUrn_2.0.12        vctrs_0.6.5             boot_1.3-31             #> [52] Matrix_1.6-1.1          jsonlite_2.0.0          fontBitstreamVera_0.1.1 #> [55] htmlTable_2.4.3         systemfonts_1.2.3       foreach_1.5.2           #> [58] jquerylib_0.1.4         units_0.8-7             glue_1.8.0              #> [61] pkgdown_2.1.3           codetools_0.2-20        lubridate_1.9.4         #> [64] stringi_1.8.7           flextable_0.9.9         gtable_0.3.6            #> [67] tibble_3.2.1            pillar_1.10.2           htmltools_0.5.8.1       #> [70] openssl_2.3.3           R6_2.6.1                textshaping_1.0.1       #> [73] evaluate_1.0.3          lpSolve_5.6.23          lattice_0.22-7          #> [76] backports_1.5.0         fontLiberation_0.1.0    bslib_0.9.0             #> [79] class_7.3-23            Rcpp_1.0.14             zip_2.3.3               #> [82] uuid_1.2-1              checkmate_2.3.2         officer_0.6.10          #> [85] xfun_0.52               fs_1.6.6                zoo_1.8-14              #> [88] pkgconfig_2.0.3"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "introduction",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Introduction",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "vignette demonstrates real-world clinical applications Decision Panel Optimization module across different medical specialties scenarios.",
        "code": "# Load required packages library(meddecide) library(dplyr) library(ggplot2) library(rpart) library(rpart.plot) library(knitr) library(forcats)"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "clinical-context",
        "dir": "Articles",
        "previous_headings": "Scenario 1: Emergency Department COVID-19 Screening",
        "what": "Clinical Context",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "emergency department needs rapidly screen patients COVID-19 managing limited resources preventing nosocomial transmission. Individual Test Performance (%)",
        "code": "# Examine test characteristics covid_tests <- covid_screening_data %>%   select(rapid_antigen, pcr, chest_ct, covid_status) %>%   na.omit()  # Calculate individual test performance test_performance <- function(test, truth) {   tab <- table(test, truth)   sens <- tab[2,2] / sum(tab[,2])   spec <- tab[1,1] / sum(tab[,1])   ppv <- tab[2,2] / sum(tab[2,])   npv <- tab[1,1] / sum(tab[1,])      return(data.frame(     Sensitivity = sens,     Specificity = spec,     PPV = ppv,     NPV = npv   )) }  # Individual test performance rapid_perf <- test_performance(covid_tests$rapid_antigen, covid_tests$covid_status) pcr_perf <- test_performance(covid_tests$pcr, covid_tests$covid_status) ct_perf <- test_performance(covid_tests$chest_ct, covid_tests$covid_status)  performance_table <- rbind(   `Rapid Antigen` = rapid_perf,   `PCR` = pcr_perf,   `Chest CT` = ct_perf )  kable(round(performance_table * 100, 1),        caption = \"Individual Test Performance (%)\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "optimization-analysis",
        "dir": "Articles",
        "previous_headings": "Scenario 1: Emergency Department COVID-19 Screening",
        "what": "Optimization Analysis",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "# Run optimization for different scenarios # 1. Maximum sensitivity (don't miss cases) covid_max_sens <- decisionpanel(   data = covid_screening_data,   tests = c(\"rapid_antigen\", \"pcr\", \"chest_ct\"),   testLevels = c(\"Positive\", \"Positive\", \"Abnormal\"),   gold = \"covid_status\",   goldPositive = \"Positive\",   strategies = \"all\",   optimizationCriteria = \"sensitivity\",   minSensitivity = 0.95 )  # 2. Cost-effective screening covid_cost_effective <- decisionpanel(   data = covid_screening_data,   tests = c(\"rapid_antigen\", \"pcr\", \"chest_ct\"),   testLevels = c(\"Positive\", \"Positive\", \"Abnormal\"),   gold = \"covid_status\",   goldPositive = \"Positive\",   strategies = \"all\",   optimizationCriteria = \"efficiency\",   useCosts = TRUE,   testCosts = \"5,50,200\",   fpCost = 500,   fnCost = 5000 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "clinical-decision-algorithm",
        "dir": "Articles",
        "previous_headings": "Scenario 1: Emergency Department COVID-19 Screening",
        "what": "Clinical Decision Algorithm",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "Based analysis, ’s practical algorithm:",
        "code": "# Implement sequential testing algorithm apply_covid_algorithm <- function(data) {   n <- nrow(data)   decisions <- character(n)   tests_used <- character(n)      for (i in 1:n) {     # Step 1: Rapid antigen test     if (data$rapid_antigen[i] == \"Positive\") {       decisions[i] <- \"Isolate, Confirm with PCR\"       tests_used[i] <- \"Rapid\"     } else if (data$symptom_score[i] >= 6) {       # Step 2: High symptom score → CT       if (!is.na(data$chest_ct[i]) && data$chest_ct[i] == \"Abnormal\") {         decisions[i] <- \"Probable COVID, Isolate, PCR\"         tests_used[i] <- \"Rapid + CT\"       } else {         decisions[i] <- \"Low probability, Standard care\"         tests_used[i] <- \"Rapid + CT\"       }     } else {       decisions[i] <- \"Low probability, Standard care\"       tests_used[i] <- \"Rapid\"     }   }      return(data.frame(Decision = decisions, Tests = tests_used)) }  # Apply algorithm algorithm_results <- apply_covid_algorithm(covid_screening_data[1:10,]) kable(cbind(covid_screening_data[1:10, c(\"patient_id\", \"rapid_antigen\",                                           \"symptom_score\", \"covid_status\")],             algorithm_results))"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "cost-effectiveness-visualization",
        "dir": "Articles",
        "previous_headings": "Scenario 1: Emergency Department COVID-19 Screening",
        "what": "Cost-Effectiveness Visualization",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "# Simulate different strategies strategies <- expand.grid(   use_rapid = c(TRUE, FALSE),   use_pcr = c(TRUE, FALSE),   use_ct = c(TRUE, FALSE) ) %>%   filter(use_rapid | use_pcr | use_ct) # At least one test  # Calculate performance for each strategy strategy_performance <- strategies %>%   rowwise() %>%   mutate(     tests = paste(c(       if(use_rapid) \"RAT\" else NULL,       if(use_pcr) \"PCR\" else NULL,       if(use_ct) \"CT\" else NULL     ), collapse = \"+\"),     cost = sum(c(       if(use_rapid) 5 else 0,       if(use_pcr) 50 else 0,       if(use_ct) 200 else 0     )),     # Simulated performance (would come from actual analysis)     sensitivity = case_when(       use_rapid & use_pcr & use_ct ~ 0.99,       use_pcr & use_ct ~ 0.98,       use_rapid & use_pcr ~ 0.97,       use_pcr ~ 0.95,       use_rapid & use_ct ~ 0.94,       use_ct ~ 0.90,       use_rapid ~ 0.65     ),     specificity = case_when(       use_rapid & use_pcr & use_ct ~ 0.83,       use_pcr & use_ct ~ 0.84,       use_rapid & use_pcr ~ 0.97,       use_pcr ~ 0.99,       use_rapid & use_ct ~ 0.83,       use_ct ~ 0.85,       use_rapid ~ 0.98     )   )  # Create cost-effectiveness plot ggplot(strategy_performance, aes(x = cost, y = sensitivity * 100)) +   geom_point(aes(size = specificity * 100), alpha = 0.6) +   geom_text(aes(label = tests), vjust = -1, size = 3) +   geom_line(data = strategy_performance %>%                arrange(cost) %>%               filter(sensitivity == cummax(sensitivity)),             color = \"red\", alpha = 0.5) +   scale_size_continuous(name = \"Specificity (%)\", range = c(3, 10)) +   labs(     title = \"Cost-Effectiveness of COVID-19 Testing Strategies\",     x = \"Cost per Patient ($)\",     y = \"Sensitivity (%)\",     caption = \"Red line shows cost-effectiveness frontier\"   ) +   theme_minimal()"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "clinical-context-1",
        "dir": "Articles",
        "previous_headings": "Scenario 2: Breast Cancer Screening Program",
        "what": "Clinical Context",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "population-based breast cancer screening program needs optimize use mammography, ultrasound, MRI based risk factors. Population Characteristics",
        "code": "# Examine population characteristics breast_summary <- breast_cancer_data %>%   summarise(     n = n(),     prevalence = mean(cancer_status == \"Cancer\"),     mean_age = mean(age),     pct_family_history = mean(family_history == \"Yes\") * 100,     pct_brca = mean(brca_mutation == \"Positive\") * 100,     pct_dense_breast = mean(breast_density %in% c(\"C\", \"D\")) * 100   )  kable(breast_summary, digits = 2,       caption = \"Population Characteristics\") # Risk stratification breast_cancer_data <- breast_cancer_data %>%   mutate(     risk_category = case_when(       brca_mutation == \"Positive\" ~ \"High Risk\",       family_history == \"Yes\" & age < 50 ~ \"High Risk\",       family_history == \"Yes\" | breast_density == \"D\" ~ \"Moderate Risk\",       TRUE ~ \"Average Risk\"     )   )  table(breast_cancer_data$risk_category) #>  #>  Average Risk     High Risk Moderate Risk  #>          1451           138           411"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "risk-stratified-analysis",
        "dir": "Articles",
        "previous_headings": "Scenario 2: Breast Cancer Screening Program",
        "what": "Risk-Stratified Analysis",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "# Analyze each risk group separately risk_groups <- split(breast_cancer_data, breast_cancer_data$risk_category)  # High-risk group optimization high_risk_panel <- decisionpanel(   data = risk_groups$`High Risk`,   tests = c(\"mammography\", \"ultrasound\", \"mri\"),   testLevels = c(\"BIRADS 3-5\", \"Suspicious\", \"Suspicious\"),   gold = \"cancer_status\",   goldPositive = \"Cancer\",   strategies = \"all\",   optimizationCriteria = \"sensitivity\",   minSensitivity = 0.95 )  # Average-risk group optimization (cost-conscious) average_risk_panel <- decisionpanel(   data = risk_groups$`Average Risk`,   tests = c(\"clinical_exam\", \"mammography\", \"ultrasound\"),   testLevels = c(\"Abnormal\", \"BIRADS 3-5\", \"Suspicious\"),   gold = \"cancer_status\",   goldPositive = \"Cancer\",   strategies = \"all\",   optimizationCriteria = \"efficiency\",   useCosts = TRUE,   testCosts = \"20,100,150\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "screening-recommendations-by-risk",
        "dir": "Articles",
        "previous_headings": "Scenario 2: Breast Cancer Screening Program",
        "what": "Screening Recommendations by Risk",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "Risk-Stratified Screening Recommendations",
        "code": "# Create recommendation table recommendations <- data.frame(   Risk_Category = c(\"High Risk\", \"Moderate Risk\", \"Average Risk\"),   Recommended_Tests = c(     \"Annual MRI + Mammography\",     \"Annual Mammography + US if dense\",     \"Biennial Mammography\"   ),   Expected_Sensitivity = c(\"99%\", \"90%\", \"85%\"),   Expected_Specificity = c(\"80%\", \"92%\", \"95%\"),   Cost_per_Screen = c(\"$1,100\", \"$250\", \"$100\"),   NNS = c(50, 200, 500)  # Number needed to screen )  kable(recommendations,        caption = \"Risk-Stratified Screening Recommendations\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "age-specific-performance",
        "dir": "Articles",
        "previous_headings": "Scenario 2: Breast Cancer Screening Program",
        "what": "Age-Specific Performance",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "# Analyze performance by age group age_groups <- breast_cancer_data %>%   mutate(age_group = cut(age, breaks = c(40, 50, 60, 70, 80),                          labels = c(\"40-49\", \"50-59\", \"60-69\", \"70-79\")))  # Calculate mammography performance by age age_performance <- age_groups %>%   group_by(age_group) %>%   summarise(     n = n(),     prevalence = mean(cancer_status == \"Cancer\"),     mammography_sens = {       tab <- table(mammography, cancer_status)       if(nrow(tab) == 2 && ncol(tab) == 2) {         tab[2,2] / sum(tab[,2])       } else NA     },     mammography_spec = {       tab <- table(mammography, cancer_status)       if(nrow(tab) == 2 && ncol(tab) == 2) {         tab[1,1] / sum(tab[,1])       } else NA     }   )  # Visualize ggplot(age_performance, aes(x = age_group)) +   geom_bar(aes(y = mammography_sens * 100), stat = \"identity\",             fill = \"skyblue\", alpha = 0.7) +   geom_line(aes(y = prevalence * 1000, group = 1), color = \"red\", size = 2) +   geom_point(aes(y = prevalence * 1000), color = \"red\", size = 3) +   scale_y_continuous(     name = \"Mammography Sensitivity (%)\",     sec.axis = sec_axis(~./10, name = \"Cancer Prevalence per 1000\")   ) +   labs(     title = \"Mammography Performance by Age Group\",     x = \"Age Group\"   ) +   theme_minimal()"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "clinical-context-2",
        "dir": "Articles",
        "previous_headings": "Scenario 3: Tuberculosis Case Finding",
        "what": "Clinical Context",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "TB program high-burden setting needs optimize case finding limited resources. TB Testing Scenarios Setting",
        "code": "# TB test combinations for different settings tb_settings <- data.frame(   Setting = c(\"Community\", \"Clinic\", \"Hospital\", \"Contact Tracing\"),   Prevalence = c(0.02, 0.20, 0.40, 0.10),   Available_Tests = c(     \"Symptoms, CXR\",     \"Symptoms, Smear, GeneXpert, CXR\",     \"All tests\",     \"Symptoms, GeneXpert\"   ),   Budget_per_case = c(10, 30, 100, 50) )  kable(tb_settings, caption = \"TB Testing Scenarios by Setting\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "sequential-testing-algorithm",
        "dir": "Articles",
        "previous_headings": "Scenario 3: Tuberculosis Case Finding",
        "what": "Sequential Testing Algorithm",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "# Implement WHO-recommended algorithm apply_tb_algorithm <- function(data) {   decisions <- character(nrow(data))      for (i in 1:nrow(data)) {     if (data$symptoms[i] == \"Yes\" || data$contact_history[i] == \"Yes\") {       # Symptomatic or contact: get GeneXpert       if (!is.na(data$genexpert[i]) && data$genexpert[i] == \"MTB detected\") {         decisions[i] <- \"Start TB treatment\"       } else if (!is.na(data$chest_xray[i]) && data$chest_xray[i] == \"Abnormal\") {         # CXR abnormal but GeneXpert negative         if (!is.na(data$culture[i])) {           decisions[i] <- ifelse(data$culture[i] == \"Positive\",                                 \"Start TB treatment\",                                 \"Not TB, investigate other causes\")         } else {           decisions[i] <- \"Clinical decision needed\"         }       } else {         decisions[i] <- \"TB unlikely\"       }     } else {       # Asymptomatic: screen with CXR if available       if (!is.na(data$chest_xray[i]) && data$chest_xray[i] == \"Abnormal\") {         decisions[i] <- \"Needs further testing\"       } else {         decisions[i] <- \"No TB screening needed\"       }     }   }      return(decisions) }  # Apply to sample tb_sample <- tb_diagnosis_data[1:20,] tb_sample$decision <- apply_tb_algorithm(tb_sample)  # Show results kable(tb_sample %>%        select(patient_id, symptoms, genexpert, chest_xray, tb_status, decision) %>%       head(10))"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "cost-effectiveness-by-strategy",
        "dir": "Articles",
        "previous_headings": "Scenario 3: Tuberculosis Case Finding",
        "what": "Cost-Effectiveness by Strategy",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "# Compare different TB screening strategies tb_strategies <- data.frame(   Strategy = c(     \"Symptoms only\",     \"Symptoms → Smear\",     \"Symptoms → GeneXpert\",      \"Symptoms → CXR → GeneXpert\",     \"Universal GeneXpert\",     \"Universal CXR → GeneXpert\"   ),   Tests_per_case_found = c(100, 50, 20, 15, 10, 12),   Cost_per_case_found = c(100, 200, 400, 350, 800, 600),   Sensitivity = c(60, 70, 85, 92, 95, 93),   Time_to_diagnosis = c(0, 3, 1, 2, 1, 1) )  # Create multi-dimensional comparison ggplot(tb_strategies, aes(x = Cost_per_case_found, y = Sensitivity)) +   geom_point(aes(size = Tests_per_case_found,                   color = factor(Time_to_diagnosis)), alpha = 0.7) +   geom_text(aes(label = Strategy), vjust = -1, size = 3) +   scale_size_continuous(name = \"Tests per case\", range = c(3, 10)) +   scale_color_discrete(name = \"Days to diagnosis\") +   labs(     title = \"TB Screening Strategy Comparison\",     x = \"Cost per TB case found ($)\",     y = \"Sensitivity (%)\"   ) +   theme_minimal()"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "clinical-context-3",
        "dir": "Articles",
        "previous_headings": "Scenario 4: Chest Pain Evaluation",
        "what": "Clinical Context",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "Emergency department evaluation chest pain requires rapid, accurate rule-myocardial infarction. MI Prevalence Risk Category (%)",
        "code": "# Risk stratification using HEART score components mi_ruleout_data <- mi_ruleout_data %>%   mutate(     heart_score = (age > 65) * 1 +                   (chest_pain == \"Typical\") * 2 +                   (chest_pain == \"Atypical\") * 1 +                   (ecg == \"Ischemic changes\") * 2 +                   (prior_cad == \"Yes\") * 1 +                   (diabetes == \"Yes\" | smoking == \"Yes\") * 1,     risk_category = cut(heart_score,                         breaks = c(-1, 3, 6, 10),                        labels = c(\"Low\", \"Moderate\", \"High\"))   )  # Show risk distribution risk_table <- table(mi_ruleout_data$risk_category, mi_ruleout_data$mi_status) kable(prop.table(risk_table, margin = 1) * 100,       digits = 1,       caption = \"MI Prevalence by Risk Category (%)\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "time-sensitive-protocols",
        "dir": "Articles",
        "previous_headings": "Scenario 4: Chest Pain Evaluation",
        "what": "Time-Sensitive Protocols",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "Protocol Performance Metrics",
        "code": "# Define protocols by urgency protocols <- list(   rapid_rule_out = function(data) {     # 0/1-hour protocol     data$troponin_initial == \"Normal\" &      data$ecg == \"Normal\" &      data$heart_score <= 3   },      standard_rule_out = function(data) {     # 0/3-hour protocol     data$troponin_initial == \"Normal\" &      data$troponin_3hr == \"Normal\" &     data$ecg == \"Normal\"   },      rule_in = function(data) {     # Immediate rule-in     data$troponin_initial == \"Elevated\" &      data$ecg == \"Ischemic changes\"   } )  # Apply protocols mi_ruleout_data <- mi_ruleout_data %>%   mutate(     rapid_rule_out = protocols$rapid_rule_out(.),     standard_rule_out = protocols$standard_rule_out(.) & !rapid_rule_out,     rule_in = protocols$rule_in(.),     need_further_testing = !rapid_rule_out & !standard_rule_out & !rule_in   )  # Summarize protocol performance protocol_performance <- mi_ruleout_data %>%   summarise(     rapid_rule_out_pct = mean(rapid_rule_out) * 100,     rapid_rule_out_npv = sum(rapid_rule_out & mi_status == \"No MI\") /                           sum(rapid_rule_out) * 100,     standard_rule_out_pct = mean(standard_rule_out) * 100,     standard_rule_out_npv = sum(standard_rule_out & mi_status == \"No MI\") /                             sum(standard_rule_out) * 100,     rule_in_pct = mean(rule_in) * 100,     rule_in_ppv = sum(rule_in & mi_status == \"MI\") / sum(rule_in) * 100   )  kable(t(protocol_performance), digits = 1,       caption = \"Protocol Performance Metrics\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "visualization-of-patient-flow",
        "dir": "Articles",
        "previous_headings": "Scenario 4: Chest Pain Evaluation",
        "what": "Visualization of Patient Flow",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "# Create patient flow diagram data flow_data <- mi_ruleout_data %>%   mutate(     disposition = case_when(       rapid_rule_out ~ \"Discharge (1 hour)\",       standard_rule_out ~ \"Discharge (3 hours)\",       rule_in ~ \"Admit CCU\",       TRUE ~ \"Observation/Further testing\"     )   ) %>%   group_by(disposition, mi_status) %>%   summarise(n = n()) %>%   mutate(pct = n / sum(n) * 100)  # Create flow diagram ggplot(flow_data, aes(x = disposition, y = n, fill = mi_status)) +   geom_bar(stat = \"identity\", position = \"stack\") +   geom_text(aes(label = sprintf(\"%.0f%%\", pct)),              position = position_stack(vjust = 0.5)) +   scale_fill_manual(values = c(\"No MI\" = \"lightgreen\", \"MI\" = \"salmon\")) +   labs(     title = \"Patient Disposition by Protocol\",     x = \"Disposition\",     y = \"Number of Patients\",     fill = \"Final Diagnosis\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "clinical-context-4",
        "dir": "Articles",
        "previous_headings": "Scenario 5: Thyroid Nodule Evaluation",
        "what": "Clinical Context",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "Thyroid nodules common cancer rare. Optimize use FNA, molecular testing, surgery. Thyroid Nodule Characteristics Size",
        "code": "# Analyze by nodule size thyroid_by_size <- thyroid_nodule_data %>%   mutate(size_category = cut(nodule_size,                               breaks = c(0, 10, 20, 40, 100),                              labels = c(\"<1cm\", \"1-2cm\", \"2-4cm\", \">4cm\"))) %>%   group_by(size_category) %>%   summarise(     n = n(),     cancer_rate = mean(cancer_status == \"Malignant\") * 100,     fna_done = mean(!is.na(fna_cytology)) * 100,     molecular_done = mean(!is.na(molecular_test)) * 100   )  kable(thyroid_by_size, digits = 1,       caption = \"Thyroid Nodule Characteristics by Size\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "diagnostic-algorithm-implementation",
        "dir": "Articles",
        "previous_headings": "Scenario 5: Thyroid Nodule Evaluation",
        "what": "Diagnostic Algorithm Implementation",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "# Implement Bethesda-based algorithm thyroid_algorithm <- decisionpanel(   data = thyroid_nodule_data,   tests = c(\"ultrasound\", \"fna_cytology\", \"molecular_test\"),   testLevels = c(\"TI-RADS 4-5\", \"Suspicious/Malignant\", \"Suspicious\"),   gold = \"cancer_status\",   goldPositive = \"Malignant\",   strategies = \"sequential\",   sequentialStop = \"positive\",   createTree = TRUE,   treeMethod = \"cart\",   useCosts = TRUE,   testCosts = \"200,300,3000\",  # US, FNA, Molecular   fpCost = 10000,  # Unnecessary surgery   fnCost = 50000   # Missed cancer )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "decision-tree-visualization",
        "dir": "Articles",
        "previous_headings": "Scenario 5: Thyroid Nodule Evaluation",
        "what": "Decision Tree Visualization",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "# Simplified decision tree representation cat(\"Thyroid Nodule Evaluation Algorithm:\\n\") #> Thyroid Nodule Evaluation Algorithm: cat(\"1. Ultrasound Assessment\\n\") #> 1. Ultrasound Assessment cat(\"   ├─ TI-RADS 1-2: No FNA needed\\n\") #>    ├─ TI-RADS 1-2: No FNA needed cat(\"   └─ TI-RADS 3-5: Proceed to FNA\\n\") #>    └─ TI-RADS 3-5: Proceed to FNA cat(\"      ├─ Benign (Bethesda II): Follow-up\\n\") #>       ├─ Benign (Bethesda II): Follow-up cat(\"      ├─ Indeterminate (Bethesda III-IV): Molecular testing\\n\") #>       ├─ Indeterminate (Bethesda III-IV): Molecular testing cat(\"      │  ├─ Benign profile: Follow-up\\n\") #>       │  ├─ Benign profile: Follow-up cat(\"      │  └─ Suspicious profile: Surgery\\n\") #>       │  └─ Suspicious profile: Surgery cat(\"      └─ Suspicious/Malignant (Bethesda V-VI): Surgery\\n\") #>       └─ Suspicious/Malignant (Bethesda V-VI): Surgery  # Create visual representation of outcomes outcomes <- data.frame(   Test_Path = c(\"US only\", \"US+FNA\", \"US+FNA+Molecular\", \"Direct Surgery\"),   Patients_pct = c(40, 30, 20, 10),   Cancers_found_pct = c(0, 20, 60, 20),   Cost = c(200, 500, 3500, 200) )  ggplot(outcomes, aes(x = Test_Path, y = Patients_pct)) +   geom_bar(stat = \"identity\", fill = \"lightblue\", alpha = 0.7) +   geom_line(aes(y = Cancers_found_pct, group = 1), color = \"red\", size = 2) +   geom_point(aes(y = Cancers_found_pct), color = \"red\", size = 3) +   scale_y_continuous(     name = \"Percentage of Patients\",     sec.axis = sec_axis(~., name = \"Percentage of Cancers Found\")   ) +   labs(     title = \"Thyroid Nodule Evaluation Pathways\",     x = \"Testing Path\"   ) +   theme_minimal() +   theme(axis.text.x = element_text(angle = 45, hjust = 1))"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "key-learnings-across-scenarios",
        "dir": "Articles",
        "previous_headings": "Summary and Best Practices",
        "what": "Key Learnings Across Scenarios",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "Context Matters: Optimal strategies differ screening diagnosis Sequential Testing: Often efficient parallel testing Risk Stratification: Improves efficiency outcomes Cost Considerations: Must balance performance resources Implementation: Clear algorithms improve adoption",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "general-recommendations",
        "dir": "Articles",
        "previous_headings": "Summary and Best Practices",
        "what": "General Recommendations",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "Testing Strategy Recommendations Clinical Scenario",
        "code": "summary_recommendations <- data.frame(   Scenario = c(\"Screening\", \"Diagnosis\", \"Emergency\", \"Surveillance\"),   Priority = c(\"High Sensitivity\", \"Balanced\", \"Speed + Accuracy\", \"Specificity\"),   Strategy = c(\"Parallel OR\", \"Sequential\", \"Rapid protocols\", \"Confirmatory\"),   Key_Metric = c(\"NPV\", \"Accuracy\", \"Time to decision\", \"PPV\"),   Example = c(\"Cancer screening\", \"TB diagnosis\", \"Chest pain\", \"Cancer follow-up\") )  kable(summary_recommendations,       caption = \"Testing Strategy Recommendations by Clinical Scenario\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "future-directions",
        "dir": "Articles",
        "previous_headings": "Summary and Best Practices",
        "what": "Future Directions",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "Machine Learning Integration: Combine multiple variables beyond just test results Dynamic Protocols: Adapt based local prevalence resources Real-time Optimization: Update algorithms based performance data Patient Preferences: Include patient values decision-making",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_clinical.html",
        "id": "session-information",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Session Information",
        "title": "Clinical Applications of Decision Panel Optimization",
        "text": "",
        "code": "sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: aarch64-apple-darwin20 (64-bit) #> Running under: macOS 15.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/Istanbul #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] forcats_1.0.0      knitr_1.50         rpart.plot_3.1.2   rpart_4.1.24       #> [5] ggplot2_3.5.2      dplyr_1.1.4        meddecide_0.0.3.12 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6            xfun_0.52               bslib_0.9.0             #>  [4] htmlwidgets_1.6.4       lattice_0.22-7          vctrs_0.6.5             #>  [7] tools_4.3.2             generics_0.1.4          tibble_3.2.1            #> [10] proxy_0.4-27            pkgconfig_2.0.3         Matrix_1.6-1.1          #> [13] KernSmooth_2.23-26      checkmate_2.3.2         data.table_1.17.4       #> [16] irr_0.84.1              cutpointr_1.2.0         RColorBrewer_1.1-3      #> [19] desc_1.4.3              uuid_1.2-1              jmvcore_2.6.3           #> [22] lifecycle_1.0.4         flextable_0.9.9         stringr_1.5.1           #> [25] compiler_4.3.2          farver_2.1.2            textshaping_1.0.1       #> [28] codetools_0.2-20        fontquiver_0.2.1        fontLiberation_0.1.0    #> [31] htmltools_0.5.8.1       class_7.3-23            sass_0.4.10             #> [34] yaml_2.3.10             htmlTable_2.4.3         pillar_1.10.2           #> [37] pkgdown_2.1.3           jquerylib_0.1.4         MASS_7.3-60             #> [40] openssl_2.3.3           classInt_0.4-11         cachem_1.1.0            #> [43] BiasedUrn_2.0.12        iterators_1.0.14        boot_1.3-31             #> [46] foreach_1.5.2           fontBitstreamVera_0.1.1 zip_2.3.3               #> [49] tidyselect_1.2.1        digest_0.6.37           stringi_1.8.7           #> [52] sf_1.0-21               pander_0.6.6            purrr_1.0.4             #> [55] labeling_0.4.3          splines_4.3.2           fastmap_1.2.0           #> [58] grid_4.3.2              cli_3.6.5               magrittr_2.0.3          #> [61] survival_3.8-3          e1071_1.7-16            withr_3.0.2             #> [64] backports_1.5.0         gdtools_0.4.2           scales_1.4.0            #> [67] lubridate_1.9.4         timechange_0.3.0        rmarkdown_2.29          #> [70] officer_0.6.10          askpass_1.2.1           ragg_1.4.0              #> [73] zoo_1.8-14              lpSolve_5.6.23          evaluate_1.0.3          #> [76] epiR_2.0.84             rlang_1.1.6             Rcpp_1.0.14             #> [79] glue_1.8.0              DBI_1.2.3               xml2_1.3.8              #> [82] rstudioapi_0.17.1       jsonlite_2.0.0          R6_2.6.1                #> [85] systemfonts_1.2.3       fs_1.6.6                units_0.8-7"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "introduction",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Introduction",
        "title": "Introduction to Decision Panel Optimization",
        "text": "Decision Panel Optimization module meddecide package provides comprehensive framework optimizing diagnostic test combinations medical decision-making. vignette introduces basic concepts demonstrates core functionality.",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "testing-strategies",
        "dir": "Articles",
        "previous_headings": "Key Concepts",
        "what": "Testing Strategies",
        "title": "Introduction to Decision Panel Optimization",
        "text": "multiple diagnostic tests available, can combined different ways: Single Testing: Use individual tests independently rule (): Positive test positive rule (): Positive tests positive MAJORITY rule: Positive majority tests positive Stop first positive Confirmatory (require multiple positives) Exclusion (require multiple negatives)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "optimization-criteria",
        "dir": "Articles",
        "previous_headings": "Key Concepts",
        "what": "Optimization Criteria",
        "title": "Introduction to Decision Panel Optimization",
        "text": "module can optimize test panels based various criteria: Accuracy: Overall correct classification rate Sensitivity: Ability detect disease (minimize false negatives) Specificity: Ability rule disease (minimize false positives) Predictive Values: PPV NPV Cost-Effectiveness: Balance performance resource utilization Utility: Custom utility functions incorporating costs errors",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "installation-and-loading",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Installation and Loading",
        "title": "Introduction to Decision Panel Optimization",
        "text": "",
        "code": "# Install meddecide package install.packages(\"meddecide\")  # Or install from GitHub devtools::install_github(\"ClinicoPath/meddecide\") # Load required packages library(meddecide) #> Warning: replacing previous import 'jmvcore::select' by 'dplyr::select' when #> loading 'meddecide' library(dplyr) #>  #> Attaching package: 'dplyr' #> The following objects are masked from 'package:stats': #>  #>     filter, lag #> The following objects are masked from 'package:base': #>  #>     intersect, setdiff, setequal, union library(ggplot2) #> Warning: package 'ggplot2' was built under R version 4.3.3 library(rpart) #> Warning: package 'rpart' was built under R version 4.3.3 library(rpart.plot) library(knitr) #> Warning: package 'knitr' was built under R version 4.3.3 library(forcats)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "basic-example-covid-19-screening",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Basic Example: COVID-19 Screening",
        "title": "Introduction to Decision Panel Optimization",
        "text": "Let’s start simple example using COVID-19 screening data:",
        "code": "# Examine the data structure str(covid_screening_data) #> 'data.frame':    1000 obs. of  8 variables: #>  $ patient_id   : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ rapid_antigen: Factor w/ 2 levels \"Negative\",\"Positive\": 1 2 1 1 1 1 1 1 1 1 ... #>  $ pcr          : Factor w/ 2 levels \"Negative\",\"Positive\": 1 2 NA NA 1 1 NA 1 1 NA ... #>  $ chest_ct     : Factor w/ 2 levels \"Normal\",\"Abnormal\": 2 1 1 1 1 1 1 1 1 1 ... #>  $ symptom_score: num  8 6 1 1 5 5 5 4 2 5 ... #>  $ covid_status : Factor w/ 2 levels \"Negative\",\"Positive\": 2 2 1 1 1 1 1 1 1 1 ... #>  $ age          : num  35 33 39 28 62 32 64 23 58 36 ... #>  $ risk_group   : Factor w/ 3 levels \"High\",\"Low\",\"Medium\": 2 2 2 2 2 3 3 3 2 2 ...  # Check disease prevalence table(covid_screening_data$covid_status) #>  #> Negative Positive  #>      851      149 prop.table(table(covid_screening_data$covid_status)) #>  #> Negative Positive  #>    0.851    0.149"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "running-basic-analysis",
        "dir": "Articles",
        "previous_headings": "Basic Example: COVID-19 Screening",
        "what": "Running Basic Analysis",
        "title": "Introduction to Decision Panel Optimization",
        "text": "",
        "code": "# Basic decision panel analysis covid_panel <- decisionpanel(   data = covid_screening_data,   tests = c(\"rapid_antigen\", \"pcr\", \"chest_ct\"),   testLevels = c(\"Positive\", \"Positive\", \"Abnormal\"),   gold = \"covid_status\",   goldPositive = \"Positive\",   strategies = \"all\",   optimizationCriteria = \"accuracy\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "interpreting-results",
        "dir": "Articles",
        "previous_headings": "Basic Example: COVID-19 Screening",
        "what": "Interpreting Results",
        "title": "Introduction to Decision Panel Optimization",
        "text": "analysis provides several key outputs: Individual Test Performance: test performs alone Optimal Panel: best combination tests Strategy Comparison: Performance different testing approaches Decision Tree: Optimal sequence testing",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "parallel-testing-example",
        "dir": "Articles",
        "previous_headings": "Understanding Testing Strategies",
        "what": "Parallel Testing Example",
        "title": "Introduction to Decision Panel Optimization",
        "text": "",
        "code": "# Simulate parallel testing with ANY rule # Positive if rapid_antigen OR pcr is positive parallel_any <- with(covid_screening_data,    rapid_antigen == \"Positive\" | pcr == \"Positive\" )  # Create confusion matrix conf_matrix_any <- table(   Predicted = parallel_any,   Actual = covid_screening_data$covid_status == \"Positive\" )  print(conf_matrix_any) #>          Actual #> Predicted FALSE TRUE #>     FALSE   573    1 #>     TRUE     25  134  # Calculate metrics sensitivity_any <- conf_matrix_any[2,2] / sum(conf_matrix_any[,2]) specificity_any <- conf_matrix_any[1,1] / sum(conf_matrix_any[,1])  cat(\"Parallel ANY Rule:\\n\") #> Parallel ANY Rule: cat(sprintf(\"Sensitivity: %.1f%%\\n\", sensitivity_any * 100)) #> Sensitivity: 99.3% cat(sprintf(\"Specificity: %.1f%%\\n\", specificity_any * 100)) #> Specificity: 95.8%"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "sequential-testing-example",
        "dir": "Articles",
        "previous_headings": "Understanding Testing Strategies",
        "what": "Sequential Testing Example",
        "title": "Introduction to Decision Panel Optimization",
        "text": "",
        "code": "# Simulate sequential testing # Start with rapid test, only do PCR if rapid is positive sequential_result <- rep(\"Negative\", nrow(covid_screening_data))  # Those with positive rapid test rapid_pos_idx <- which(covid_screening_data$rapid_antigen == \"Positive\")  # Among those, check PCR sequential_result[rapid_pos_idx] <-    ifelse(covid_screening_data$pcr[rapid_pos_idx] == \"Positive\",           \"Positive\", \"Negative\")  # Create confusion matrix conf_matrix_seq <- table(   Predicted = sequential_result == \"Positive\",   Actual = covid_screening_data$covid_status == \"Positive\" )  print(conf_matrix_seq) #>          Actual #> Predicted FALSE TRUE #>     FALSE   851   51 #>     TRUE      0   98  # Calculate metrics sensitivity_seq <- conf_matrix_seq[2,2] / sum(conf_matrix_seq[,2]) specificity_seq <- conf_matrix_seq[1,1] / sum(conf_matrix_seq[,1])  cat(\"\\nSequential Testing:\\n\") #>  #> Sequential Testing: cat(sprintf(\"Sensitivity: %.1f%%\\n\", sensitivity_seq * 100)) #> Sensitivity: 65.8% cat(sprintf(\"Specificity: %.1f%%\\n\", specificity_seq * 100)) #> Specificity: 100.0%  # Calculate cost savings pcr_tests_saved <- sum(covid_screening_data$rapid_antigen == \"Negative\") cat(sprintf(\"PCR tests saved: %d (%.1f%%)\\n\",              pcr_tests_saved,              pcr_tests_saved/nrow(covid_screening_data) * 100)) #> PCR tests saved: 876 (87.6%)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "cost-effectiveness-analysis",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Cost-Effectiveness Analysis",
        "title": "Introduction to Decision Panel Optimization",
        "text": "costs considered, optimal strategy may change:",
        "code": "# Analysis with costs covid_panel_cost <- decisionpanel(   data = covid_screening_data,   tests = c(\"rapid_antigen\", \"pcr\", \"chest_ct\"),   testLevels = c(\"Positive\", \"Positive\", \"Abnormal\"),   gold = \"covid_status\",   goldPositive = \"Positive\",   strategies = \"all\",   optimizationCriteria = \"utility\",   useCosts = TRUE,   testCosts = \"5,50,200\",  # Costs for each test   fpCost = 500,            # Cost of false positive   fnCost = 5000            # Cost of false negative )"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "performance-comparison-plot",
        "dir": "Articles",
        "previous_headings": "Visualization",
        "what": "Performance Comparison Plot",
        "title": "Introduction to Decision Panel Optimization",
        "text": "",
        "code": "# Create performance comparison data strategies <- data.frame(   Strategy = c(\"Rapid Only\", \"PCR Only\", \"Parallel ANY\", \"Sequential\"),   Sensitivity = c(65, 95, 98, 62),   Specificity = c(98, 99, 97, 99.9),   Cost = c(5, 50, 55, 15) )  # Plot sensitivity vs specificity ggplot(strategies, aes(x = 100 - Specificity, y = Sensitivity)) +   geom_point(aes(size = Cost), alpha = 0.6) +   geom_text(aes(label = Strategy), vjust = -1) +   scale_size_continuous(range = c(3, 10)) +   xlim(0, 5) + ylim(60, 100) +   labs(     title = \"Testing Strategy Comparison\",     x = \"False Positive Rate (%)\",     y = \"Sensitivity (%)\",     size = \"Cost ($)\"   ) +   theme_minimal()"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "decision-trees",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Decision Trees",
        "title": "Introduction to Decision Panel Optimization",
        "text": "Decision trees provide clear algorithms clinical use:",
        "code": "# Generate decision tree covid_tree <- decisionpanel(   data = covid_screening_data,   tests = c(\"rapid_antigen\", \"pcr\", \"chest_ct\", \"symptom_score\"),   testLevels = c(\"Positive\", \"Positive\", \"Abnormal\", \">5\"),   gold = \"covid_status\",   goldPositive = \"Positive\",   createTree = TRUE,   treeMethod = \"cart\",   maxDepth = 3 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "interpreting-the-tree",
        "dir": "Articles",
        "previous_headings": "Decision Trees",
        "what": "Interpreting the Tree",
        "title": "Introduction to Decision Panel Optimization",
        "text": "typical decision tree output might look like:",
        "code": "1. Start with Rapid Antigen Test    ├─ If Positive (2% of patients)    │  └─ Confirm with PCR    │     ├─ If Positive → COVID Positive (PPV: 95%)    │     └─ If Negative → COVID Negative (NPV: 98%)    └─ If Negative (98% of patients)       ├─ If Symptoms > 5       │  └─ Perform Chest CT       │     ├─ If Abnormal → Perform PCR       │     └─ If Normal → COVID Negative       └─ If Symptoms ≤ 5 → COVID Negative"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "cross-validation",
        "dir": "Articles",
        "previous_headings": "Advanced Features",
        "what": "Cross-Validation",
        "title": "Introduction to Decision Panel Optimization",
        "text": "Validate panel performance using k-fold cross-validation:",
        "code": "# Run with cross-validation covid_panel_cv <- decisionpanel(   data = covid_screening_data,   tests = c(\"rapid_antigen\", \"pcr\", \"chest_ct\"),   testLevels = c(\"Positive\", \"Positive\", \"Abnormal\"),   gold = \"covid_status\",   goldPositive = \"Positive\",   crossValidate = TRUE,   nFolds = 5,   seed = 123 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "bootstrap-confidence-intervals",
        "dir": "Articles",
        "previous_headings": "Advanced Features",
        "what": "Bootstrap Confidence Intervals",
        "title": "Introduction to Decision Panel Optimization",
        "text": "Get uncertainty estimates performance metrics:",
        "code": "# Run with bootstrap covid_panel_boot <- decisionpanel(   data = covid_screening_data,   tests = c(\"rapid_antigen\", \"pcr\", \"chest_ct\"),   testLevels = c(\"Positive\", \"Positive\", \"Abnormal\"),   gold = \"covid_status\",   goldPositive = \"Positive\",   bootstrap = TRUE,   bootReps = 1000,   seed = 123 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "best-practices",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Best Practices",
        "title": "Introduction to Decision Panel Optimization",
        "text": "Start Simple: Begin individual test performance combinations Consider Context: Screening vs. diagnosis requires different strategies Validate Results: Use cross-validation separate test sets Include Costs: Real-world decisions must consider resources Think Sequentially: Often efficient parallel testing Set Constraints: Define minimum acceptable performance Interpret Clinically: Statistical optimality isn’t everything",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "conclusion",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Conclusion",
        "title": "Introduction to Decision Panel Optimization",
        "text": "Decision Panel Optimization module provides systematic approach combining diagnostic tests. considering various strategies, costs, constraints, helps identify practical testing algorithms balance performance resource utilization.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "next-steps",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Next Steps",
        "title": "Introduction to Decision Panel Optimization",
        "text": "See “Clinical Applications” vignette disease-specific examples Review “Advanced Optimization” complex scenarios Check “Implementation Guide” deploying algorithms practice",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/decisionpanel_optimisation.html",
        "id": "session-information",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Session Information",
        "title": "Introduction to Decision Panel Optimization",
        "text": "",
        "code": "sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: aarch64-apple-darwin20 (64-bit) #> Running under: macOS 15.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/Istanbul #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> other attached packages: #> [1] forcats_1.0.0      knitr_1.50         rpart.plot_3.1.2   rpart_4.1.24       #> [5] ggplot2_3.5.2      dplyr_1.1.4        meddecide_0.0.3.12 #>  #> loaded via a namespace (and not attached): #>  [1] gtable_0.3.6            xfun_0.52               bslib_0.9.0             #>  [4] htmlwidgets_1.6.4       lattice_0.22-7          vctrs_0.6.5             #>  [7] tools_4.3.2             generics_0.1.4          tibble_3.2.1            #> [10] proxy_0.4-27            pkgconfig_2.0.3         Matrix_1.6-1.1          #> [13] KernSmooth_2.23-26      checkmate_2.3.2         data.table_1.17.4       #> [16] irr_0.84.1              cutpointr_1.2.0         RColorBrewer_1.1-3      #> [19] desc_1.4.3              uuid_1.2-1              jmvcore_2.6.3           #> [22] lifecycle_1.0.4         flextable_0.9.9         stringr_1.5.1           #> [25] compiler_4.3.2          farver_2.1.2            textshaping_1.0.1       #> [28] codetools_0.2-20        fontquiver_0.2.1        fontLiberation_0.1.0    #> [31] htmltools_0.5.8.1       class_7.3-23            sass_0.4.10             #> [34] yaml_2.3.10             htmlTable_2.4.3         pillar_1.10.2           #> [37] pkgdown_2.1.3           jquerylib_0.1.4         MASS_7.3-60             #> [40] openssl_2.3.3           classInt_0.4-11         cachem_1.1.0            #> [43] BiasedUrn_2.0.12        iterators_1.0.14        boot_1.3-31             #> [46] foreach_1.5.2           fontBitstreamVera_0.1.1 zip_2.3.3               #> [49] tidyselect_1.2.1        digest_0.6.37           stringi_1.8.7           #> [52] sf_1.0-21               pander_0.6.6            purrr_1.0.4             #> [55] labeling_0.4.3          splines_4.3.2           fastmap_1.2.0           #> [58] grid_4.3.2              cli_3.6.5               magrittr_2.0.3          #> [61] survival_3.8-3          e1071_1.7-16            withr_3.0.2             #> [64] backports_1.5.0         gdtools_0.4.2           scales_1.4.0            #> [67] lubridate_1.9.4         timechange_0.3.0        rmarkdown_2.29          #> [70] officer_0.6.10          askpass_1.2.1           ragg_1.4.0              #> [73] zoo_1.8-14              lpSolve_5.6.23          evaluate_1.0.3          #> [76] epiR_2.0.84             rlang_1.1.6             Rcpp_1.0.14             #> [79] glue_1.8.0              DBI_1.2.3               xml2_1.3.8              #> [82] rstudioapi_0.17.1       jsonlite_2.0.0          R6_2.6.1                #> [85] systemfonts_1.2.3       fs_1.6.6                units_0.8-7"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/diagnostic-tests.html",
        "id": "example-data",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Example Data",
        "title": "Diagnostic Test Evaluation",
        "text": "Small example datasets included package. can load using system.file() read.csv().",
        "code": "df_dec <- read.csv(system.file(\"extdata\", \"decision_example.csv\", package = \"meddecide\")) head(df_dec)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/diagnostic-tests.html",
        "id": "calculating-diagnostic-metrics",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Calculating Diagnostic Metrics",
        "title": "Diagnostic Test Evaluation",
        "text": "decision() function computes sensitivity, specificity related metrics raw test results. four counts (true positives, false positives, true negatives false negatives) can use decisioncalculator() directly. option fagan = TRUE adds Fagan nomogram illustrate pre-test probability updated diagnostic result. tools help summarise diagnostic performance can combined functions meddecide advanced analysis.",
        "code": "res <- decision(data = df_dec,                 gold = df_dec$gold,                 goldPositive = 1,                 newtest = df_dec$newtest,                 testPositive = 1,                 ci = TRUE) res$ratioTable calc <- decisioncalculator(TP = 90, FN = 10, TN = 80, FP = 20,                            ci = TRUE, fagan = TRUE) calc$ratioTable calc$fagan"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/jsurvival.html",
        "id": "overview",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Overview",
        "title": "Using jsurvival for Survival Analysis",
        "text": "jsurvival package provides functions help researchers carry survival analyses produce publication ready tables plots. supports several workflows ranging simple survival summaries multi‑arm comparisons. vignette gives brief tour main functions example code using built histopathology data set.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/jsurvival.html",
        "id": "example-data",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Example data",
        "title": "Using jsurvival for Survival Analysis",
        "text": "package ships small demonstration data frame histopathology. available variables : Sex Race Group Grade SurgeryDate LastFollowUpDate Death DeathTime",
        "code": "# load the included data library(jsurvival) data(histopathology) head(histopathology)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/jsurvival.html",
        "id": "overall-survival",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Overall survival",
        "title": "Using jsurvival for Survival Analysis",
        "text": "core function package survival(), calculates Kaplan–Meier estimates related summaries. minimal usage requires data frame follow time event indicator.",
        "code": "res <- survival(   data = histopathology,   elapsedtime = DeathTime,   outcome = Death,   outcomeLevel = \"1\",   explanatory = Group,   ci95 = TRUE,   risktable = TRUE )  # results object contains tables and plots res$plot"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/jsurvival.html",
        "id": "continuous-predictors",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Continuous predictors",
        "title": "Using jsurvival for Survival Analysis",
        "text": "analyses continuous explanatory variable survivalcont() function provides interface can optionally find cut‑point dichotomisation.",
        "code": "res <- survivalcont(   data = histopathology,   elapsedtime = DeathTime,   outcome = Death,   outcomeLevel = \"1\",   contexpl = `Anti-X-intensity`,   findcut = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/jsurvival.html",
        "id": "odds-ratios",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Odds ratios",
        "title": "Using jsurvival for Survival Analysis",
        "text": "oddsratio() computes odds ratios binary outcomes optional adjustment explanatory factors.",
        "code": "res <- oddsratio(   data = histopathology,   outcome = Mortality5yr,   explanatory = Group )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/jsurvival.html",
        "id": "single-arm-analyses",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Single arm analyses",
        "title": "Using jsurvival for Survival Analysis",
        "text": "situations single treatment group available, singlearm() summarises survival provides median estimates.",
        "code": "res <- singlearm(   data = histopathology,   elapsedtime = DeathTime,   outcome = Death,   outcomeLevel = \"1\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/jsurvival.html",
        "id": "multiple-groups",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Multiple groups",
        "title": "Using jsurvival for Survival Analysis",
        "text": "multisurvival() function extends framework multiple explanatory variables comprehensive analysis across several groups.",
        "code": "res <- multisurvival(   data = histopathology,   elapsedtime = DeathTime,   outcome = Death,   outcomeLevel = \"1\",   explanatory = c(Group, Grade, Race) )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/jsurvival.html",
        "id": "further-reading",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Further reading",
        "title": "Using jsurvival for Survival Analysis",
        "text": "documentation function contains many options. See help(package = \"jsurvival\") details consult package website worked examples.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "overview",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Overview",
        "title": "meddecide: Medical Decision Making in R",
        "text": "meddecide package provides comprehensive tools medical decision-making, including: ROC Analysis: Receiver Operating Characteristic curve analysis optimal cutpoint determination Diagnostic Test Evaluation: Sensitivity, specificity, predictive values, likelihood ratios Interrater Reliability: Cohen’s kappa Fleiss’ kappa agreement analysis Power Analysis: Sample size calculations kappa statistics",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "introduction",
        "dir": "Articles",
        "previous_headings": "Vignette 1: ROC Analysis with psychopdaroc",
        "what": "Introduction",
        "title": "meddecide: Medical Decision Making in R",
        "text": "ROC (Receiver Operating Characteristic) analysis fundamental evaluating diagnostic tests. psychopdaroc function provides comprehensive ROC analysis multiple methods determining optimal cutpoints.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "basic-usage",
        "dir": "Articles",
        "previous_headings": "Vignette 1: ROC Analysis with psychopdaroc",
        "what": "Basic Usage",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "library(meddecide)  # Load example data data(cancer_biomarker)  # Hypothetical dataset  # Basic ROC analysis roc_result <- psychopdaroc(   data = cancer_biomarker,   dependentVars = \"PSA\",           # Test variable   classVar = \"cancer_status\",      # Binary outcome (0/1)   positiveClass = \"1\"              # Which level is positive )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "understanding-roc-curves",
        "dir": "Articles",
        "previous_headings": "Vignette 1: ROC Analysis with psychopdaroc",
        "what": "Understanding ROC Curves",
        "title": "meddecide: Medical Decision Making in R",
        "text": "ROC curve plots sensitivity (true positive rate) 1-specificity (false positive rate) across possible cutpoints. area curve (AUC) summarizes overall diagnostic accuracy: AUC = 0.5: discrimination (diagonal line) AUC = 0.7-0.8: Acceptable discrimination AUC = 0.8-0.9: Excellent discrimination AUC > 0.9: Outstanding discrimination",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "optimal-cutpoint-methods",
        "dir": "Articles",
        "previous_headings": "Vignette 1: ROC Analysis with psychopdaroc",
        "what": "Optimal Cutpoint Methods",
        "title": "meddecide: Medical Decision Making in R",
        "text": "package offers several methods determine optimal cutpoints:",
        "code": "# Method 1: Maximize Youden's Index (default) roc_youden <- psychopdaroc(   data = cancer_biomarker,   dependentVars = \"PSA\",   classVar = \"cancer_status\",   positiveClass = \"1\",   method = \"maximize_metric\",   metric = \"youden\"  # Sensitivity + Specificity - 1 )  # Method 2: Cost-benefit optimization roc_cost <- psychopdaroc(   data = cancer_biomarker,   dependentVars = \"PSA\",   classVar = \"cancer_status\",   positiveClass = \"1\",   method = \"oc_cost_ratio\",   costratioFP = 2.5  # False positives cost 2.5x more than false negatives )  # Method 3: Equal sensitivity and specificity roc_equal <- psychopdaroc(   data = cancer_biomarker,   dependentVars = \"PSA\",   classVar = \"cancer_status\",   positiveClass = \"1\",   method = \"oc_equal_sens_spec\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "comparing-multiple-tests",
        "dir": "Articles",
        "previous_headings": "Vignette 1: ROC Analysis with psychopdaroc",
        "what": "Comparing Multiple Tests",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Compare multiple biomarkers roc_comparison <- psychopdaroc(   data = cancer_biomarker,   dependentVars = c(\"PSA\", \"CA125\", \"CEA\"),  # Multiple tests   classVar = \"cancer_status\",   positiveClass = \"1\",   combinePlots = TRUE,        # Show all curves in one plot   delongTest = TRUE           # Statistical comparison of AUCs )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "advanced-features",
        "dir": "Articles",
        "previous_headings": "Vignette 1: ROC Analysis with psychopdaroc",
        "what": "Advanced Features",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Bootstrap confidence intervals roc_bootstrap <- psychopdaroc(   data = cancer_biomarker,   dependentVars = \"PSA\",   classVar = \"cancer_status\",   positiveClass = \"1\",   bootstrapCI = TRUE,   bootstrapReps = 2000 )  # Partial AUC (focus on high specificity region) roc_partial <- psychopdaroc(   data = cancer_biomarker,   dependentVars = \"PSA\",   classVar = \"cancer_status\",   positiveClass = \"1\",   partialAUC = TRUE,   partialAUCfrom = 0.8,  # Specificity range 80-100%   partialAUCto = 1.0 )  # Net Reclassification Index (NRI) and IDI roc_nri <- psychopdaroc(   data = cancer_biomarker,   dependentVars = c(\"PSA\", \"NewBiomarker\"),   classVar = \"cancer_status\",   positiveClass = \"1\",   calculateIDI = TRUE,   calculateNRI = TRUE,   refVar = \"PSA\",  # Compare NewBiomarker against PSA   nriThresholds = \"0.2,0.5\"  # Risk categories: <20%, 20-50%, >50% )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "visualization-options",
        "dir": "Articles",
        "previous_headings": "Vignette 1: ROC Analysis with psychopdaroc",
        "what": "Visualization Options",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Publication-ready plots roc_publication <- psychopdaroc(   data = cancer_biomarker,   dependentVars = c(\"PSA\", \"CA125\"),   classVar = \"cancer_status\",   positiveClass = \"1\",   plotROC = TRUE,   cleanPlot = TRUE,           # Clean plot for publications   showOptimalPoint = TRUE,    # Mark optimal cutpoint   legendPosition = \"bottomright\" )  # Additional diagnostic plots roc_diagnostic <- psychopdaroc(   data = cancer_biomarker,   dependentVars = \"PSA\",   classVar = \"cancer_status\",   positiveClass = \"1\",   showCriterionPlot = TRUE,   # Sensitivity/Specificity vs threshold   showPrevalencePlot = TRUE,  # PPV/NPV vs prevalence   showDotPlot = TRUE          # Distribution by class )"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "introduction-1",
        "dir": "Articles",
        "previous_headings": "Vignette 2: Diagnostic Test Evaluation with decision",
        "what": "Introduction",
        "title": "meddecide: Medical Decision Making in R",
        "text": "decision function evaluates diagnostic test performance gold standard, calculating sensitivity, specificity, predictive values, likelihood ratios.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "basic-analysis",
        "dir": "Articles",
        "previous_headings": "Vignette 2: Diagnostic Test Evaluation with decision",
        "what": "Basic Analysis",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Evaluate a new rapid test against gold standard decision_result <- decision(   data = diagnostic_data,   gold = \"pcr_result\",        # Gold standard test   goldPositive = \"positive\",   # Positive level of gold standard   newtest = \"rapid_test\",      # New test to evaluate   testPositive = \"positive\"    # Positive level of new test )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "understanding-the-output",
        "dir": "Articles",
        "previous_headings": "Vignette 2: Diagnostic Test Evaluation with decision",
        "what": "Understanding the Output",
        "title": "meddecide: Medical Decision Making in R",
        "text": "function provides: Confusion Matrix: True positives, false positives, true negatives, false negatives Sensitivity: Proportion true positives correctly identified Specificity: Proportion true negatives correctly identified PPV: Probability disease given positive test NPV: Probability disease given negative test Likelihood ratios: much test result changes disease probability",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "using-prior-probability",
        "dir": "Articles",
        "previous_headings": "Vignette 2: Diagnostic Test Evaluation with decision",
        "what": "Using Prior Probability",
        "title": "meddecide: Medical Decision Making in R",
        "text": "study population differs target population:",
        "code": "# Adjust for population prevalence decision_adjusted <- decision(   data = diagnostic_data,   gold = \"pcr_result\",   goldPositive = \"positive\",   newtest = \"rapid_test\",   testPositive = \"positive\",   pp = TRUE,                  # Use prior probability   pprob = 0.05                # 5% prevalence in general population )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "confidence-intervals",
        "dir": "Articles",
        "previous_headings": "Vignette 2: Diagnostic Test Evaluation with decision",
        "what": "Confidence Intervals",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Add 95% confidence intervals decision_ci <- decision(   data = diagnostic_data,   gold = \"pcr_result\",   goldPositive = \"positive\",   newtest = \"rapid_test\",   testPositive = \"positive\",   ci = TRUE                   # Calculate confidence intervals )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "fagan-nomogram",
        "dir": "Articles",
        "previous_headings": "Vignette 2: Diagnostic Test Evaluation with decision",
        "what": "Fagan Nomogram",
        "title": "meddecide: Medical Decision Making in R",
        "text": "Visualize test results change disease probability:",
        "code": "# Create Fagan nomogram decision_fagan <- decision(   data = diagnostic_data,   gold = \"pcr_result\",   goldPositive = \"positive\",   newtest = \"rapid_test\",   testPositive = \"positive\",   fagan = TRUE                # Generate Fagan nomogram )"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "introduction-2",
        "dir": "Articles",
        "previous_headings": "Vignette 3: Decision Calculator with decisioncalculator",
        "what": "Introduction",
        "title": "meddecide: Medical Decision Making in R",
        "text": "summary statistics instead raw data, use decisioncalculator.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "basic-usage-1",
        "dir": "Articles",
        "previous_headings": "Vignette 3: Decision Calculator with decisioncalculator",
        "what": "Basic Usage",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# From a published 2x2 table calc_result <- decisioncalculator(   TP = 85,    # True positives   FP = 15,    # False positives     FN = 10,    # False negatives   TN = 90     # True negatives )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "adjusting-for-prevalence",
        "dir": "Articles",
        "previous_headings": "Vignette 3: Decision Calculator with decisioncalculator",
        "what": "Adjusting for Prevalence",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Adjust for different population prevalence calc_adjusted <- decisioncalculator(   TP = 85,   FP = 15,   FN = 10,   TN = 90,   pp = TRUE,   pprob = 0.02  # 2% prevalence in screening population )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "interpreting-results",
        "dir": "Articles",
        "previous_headings": "Vignette 3: Decision Calculator with decisioncalculator",
        "what": "Interpreting Results",
        "title": "meddecide: Medical Decision Making in R",
        "text": "calculator provides: - Accuracy: Overall correct classification rate - Prevalence: Disease frequency study - Post-test probabilities: Updated disease probability testing - Likelihood ratios: Diagnostic test strength",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "introduction-3",
        "dir": "Articles",
        "previous_headings": "Vignette 4: Interrater Reliability with agreement",
        "what": "Introduction",
        "title": "meddecide: Medical Decision Making in R",
        "text": "agreement function assesses well multiple raters agree classifying subjects.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "two-raters-cohens-kappa",
        "dir": "Articles",
        "previous_headings": "Vignette 4: Interrater Reliability with agreement",
        "what": "Two Raters (Cohen’s Kappa)",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Two pathologists rating tumor grades kappa_result <- agreement(   data = pathology_data,   vars = c(\"pathologist1\", \"pathologist2\") )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "interpretation",
        "dir": "Articles",
        "previous_headings": "Vignette 4: Interrater Reliability with agreement",
        "what": "Interpretation:",
        "title": "meddecide: Medical Decision Making in R",
        "text": "κ < 0.00: Poor agreement κ = 0.00-0.20: Slight agreement κ = 0.21-0.40: Fair agreement κ = 0.41-0.60: Moderate agreement κ = 0.61-0.80: Substantial agreement κ = 0.81-1.00: Almost perfect agreement",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "weighted-kappa-for-ordinal-data",
        "dir": "Articles",
        "previous_headings": "Vignette 4: Interrater Reliability with agreement",
        "what": "Weighted Kappa for Ordinal Data",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# For ordinal categories (e.g., grades 1-5) weighted_kappa <- agreement(   data = pathology_data,   vars = c(\"pathologist1\", \"pathologist2\"),   wght = \"squared\"  # Squared weights for ordinal data )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "multiple-raters-fleiss-kappa",
        "dir": "Articles",
        "previous_headings": "Vignette 4: Interrater Reliability with agreement",
        "what": "Multiple Raters (Fleiss’ Kappa)",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Three or more raters fleiss_kappa <- agreement(   data = radiology_data,   vars = c(\"radiologist1\", \"radiologist2\", \"radiologist3\", \"radiologist4\") )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "exact-kappa",
        "dir": "Articles",
        "previous_headings": "Vignette 4: Interrater Reliability with agreement",
        "what": "Exact Kappa",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# For small samples with 3+ raters exact_kappa <- agreement(   data = small_study,   vars = c(\"rater1\", \"rater2\", \"rater3\"),   exct = TRUE  # Use exact method )"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "introduction-4",
        "dir": "Articles",
        "previous_headings": "Vignette 5: Power Analysis for Kappa with kappaSizePower",
        "what": "Introduction",
        "title": "meddecide: Medical Decision Making in R",
        "text": "Plan sample sizes interrater reliability studies.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "basic-sample-size-calculation",
        "dir": "Articles",
        "previous_headings": "Vignette 5: Power Analysis for Kappa with kappaSizePower",
        "what": "Basic Sample Size Calculation",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Sample size for binary outcome sample_size <- kappaSizePower(   outcome = \"2\",           # Binary outcome   kappa0 = 0.4,           # Null hypothesis: fair agreement   kappa1 = 0.6,           # Alternative: moderate agreement   props = \"0.3, 0.7\",     # 30% positive, 70% negative   raters = \"2\",           # Two raters   alpha = 0.05,           # Type I error rate   power = 0.80            # Statistical power )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "multiple-categories",
        "dir": "Articles",
        "previous_headings": "Vignette 5: Power Analysis for Kappa with kappaSizePower",
        "what": "Multiple Categories",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Sample size for 3-category outcome sample_size_3cat <- kappaSizePower(   outcome = \"3\",   kappa0 = 0.4,   kappa1 = 0.6,   props = \"0.2, 0.5, 0.3\",  # Category proportions   raters = \"2\",   alpha = 0.05,   power = 0.80 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "multiple-raters",
        "dir": "Articles",
        "previous_headings": "Vignette 5: Power Analysis for Kappa with kappaSizePower",
        "what": "Multiple Raters",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Sample size for 3 raters sample_size_3raters <- kappaSizePower(   outcome = \"2\",   kappa0 = 0.4,   kappa1 = 0.6,   props = \"0.4, 0.6\",   raters = \"3\",             # Three raters   alpha = 0.05,   power = 0.80 )"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "introduction-5",
        "dir": "Articles",
        "previous_headings": "Vignette 6: Confidence Interval Approach with kappaSizeCI",
        "what": "Introduction",
        "title": "meddecide: Medical Decision Making in R",
        "text": "Calculate sample size based desired confidence interval width.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "basic-usage-2",
        "dir": "Articles",
        "previous_headings": "Vignette 6: Confidence Interval Approach with kappaSizeCI",
        "what": "Basic Usage",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Sample size for precise kappa estimation ci_sample_size <- kappaSizeCI(   outcome = \"2\",   kappa0 = 0.6,      # Expected kappa   kappaL = 0.4,      # Lower CI bound   kappaU = 0.8,      # Upper CI bound   props = \"0.2, 0.8\",   raters = \"2\",   alpha = 0.05 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "planning-for-publication",
        "dir": "Articles",
        "previous_headings": "Vignette 6: Confidence Interval Approach with kappaSizeCI",
        "what": "Planning for Publication",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Narrow CI for publication standards publication_size <- kappaSizeCI(   outcome = \"2\",   kappa0 = 0.7,      # Expected substantial agreement   kappaL = 0.6,      # Lower bound still substantial   kappaU = 0.8,      # Upper bound   props = \"0.3, 0.7\",   raters = \"2\",   alpha = 0.05 )"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "introduction-6",
        "dir": "Articles",
        "previous_headings": "Vignette 7: Fixed Sample Size Analysis with kappaSizeFixedN",
        "what": "Introduction",
        "title": "meddecide: Medical Decision Making in R",
        "text": "sample size predetermined, calculate expected kappa precision.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "usage",
        "dir": "Articles",
        "previous_headings": "Vignette 7: Fixed Sample Size Analysis with kappaSizeFixedN",
        "what": "Usage",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# What kappa precision with 100 subjects? fixed_n_result <- kappaSizeFixedN(   outcome = \"2\",   kappa0 = 0.5,       # Expected kappa   props = \"0.4, 0.6\",   raters = \"2\",   alpha = 0.05,   n = 100             # Fixed sample size )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "feasibility-assessment",
        "dir": "Articles",
        "previous_headings": "Vignette 7: Fixed Sample Size Analysis with kappaSizeFixedN",
        "what": "Feasibility Assessment",
        "title": "meddecide: Medical Decision Making in R",
        "text": "",
        "code": "# Check if available sample provides adequate precision feasibility <- kappaSizeFixedN(   outcome = \"3\",   kappa0 = 0.6,   props = \"0.3, 0.4, 0.3\",   raters = \"2\",   alpha = 0.05,   n = 50              # Available subjects )"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "roc-analysis",
        "dir": "Articles",
        "previous_headings": "Best Practices",
        "what": "1. ROC Analysis",
        "title": "meddecide: Medical Decision Making in R",
        "text": "Always verify positive class specification Consider clinical costs choosing cutpoints Use bootstrap CIs small samples Report sensitivity specificity chosen cutpoint",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "diagnostic-test-evaluation",
        "dir": "Articles",
        "previous_headings": "Best Practices",
        "what": "2. Diagnostic Test Evaluation",
        "title": "meddecide: Medical Decision Making in R",
        "text": "Account spectrum bias study design Adjust target population prevalence Report confidence intervals Consider clinical context interpretation",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "interrater-reliability",
        "dir": "Articles",
        "previous_headings": "Best Practices",
        "what": "3. Interrater Reliability",
        "title": "meddecide: Medical Decision Making in R",
        "text": "Use appropriate kappa variant (weighted ordinal data) Ensure raters properly trained Consider prevalence effects kappa Report percentage agreement alongside kappa",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "power-analysis",
        "dir": "Articles",
        "previous_headings": "Best Practices",
        "what": "4. Power Analysis",
        "title": "meddecide: Medical Decision Making in R",
        "text": "realistic expected agreement levels Consider dropout rates Account category imbalance Plan pilot studies parameters uncertain",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/meddecide-vignettes.html",
        "id": "references",
        "dir": "Articles",
        "previous_headings": "",
        "what": "References",
        "title": "meddecide: Medical Decision Making in R",
        "text": "DeLong ER, DeLong DM, Clarke-Pearson DL (1988). Comparing areas two correlated receiver operating characteristic curves: nonparametric approach. Biometrics 44:837-845. Cohen J (1960). coefficient agreement nominal scales. Educational Psychological Measurement 20:37-46. Fleiss JL (1971). Measuring nominal scale agreement among many raters. Psychological Bulletin 76:378-382. Pencina MJ, D’Agostino RB Sr, D’Agostino RB Jr, Vasan RS (2008). Evaluating added predictive ability new marker: area ROC curve reclassification beyond. Statistics Medicine 27:157-172. Fagan TJ (1975). Nomogram Bayes theorem. New England Journal Medicine 293:257.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "overview",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Overview",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Medical Decision Tree module specifically designed pathology oncology research, providing clinically-relevant decision support tools appropriate performance metrics interpretations.",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "clinical-performance-metrics",
        "dir": "Articles",
        "previous_headings": "Key Features for Medical Research",
        "what": "1. Clinical Performance Metrics",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Sensitivity & Specificity: Core diagnostic performance measures Predictive Values (PPV/NPV): Adjusted disease prevalence Likelihood Ratios: Evidence-based medicine metrics Clinical Utility Scores: Cost-benefit analysis Confidence Intervals: Statistical uncertainty quantification",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "medical-data-handling",
        "dir": "Articles",
        "previous_headings": "Key Features for Medical Research",
        "what": "2. Medical Data Handling",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Missing Data: Imputation within disease groups Class Imbalance: Handles rare diseases appropriately Biomarker Scaling: Standardizes different measurement units Quality Checks: Validates clinical data ranges",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "clinical-context-awareness",
        "dir": "Articles",
        "previous_headings": "Key Features for Medical Research",
        "what": "3. Clinical Context Awareness",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Screening: High sensitivity prioritized Diagnosis: Balanced accuracy Staging: Specificity emphasis Prognosis: Risk stratification focus Treatment: Utility-based decisions",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "example-1-cancer-biomarker-panel",
        "dir": "Articles",
        "previous_headings": "Practical Examples",
        "what": "Example 1: Cancer Biomarker Panel",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Expected Output: - Optimal biomarker panel cutoff values - Individual biomarker importance rankings - Clinical performance metrics CI - Cost-effectiveness analysis",
        "code": "Clinical Context: Biomarker Discovery Target: Cancer diagnosis (Yes/No) Continuous Variables: PSA, CA-125, CEA levels Categorical Variables: Age group, Family history Training Cohort: Discovery cohort Options:  - Balance Classes: Yes (for rare cancers) - Clinical Metrics: Yes - Feature Importance: Yes"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "example-2-pathology-staging-system",
        "dir": "Articles",
        "previous_headings": "Practical Examples",
        "what": "Example 2: Pathology Staging System",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Expected Output: - Multi-factor staging algorithm - Risk group classifications - Treatment recommendations per risk group - Validation metrics across cohorts",
        "code": "Clinical Context: Cancer Staging Target: Advanced stage (III-IV vs I-II) Continuous Variables: Tumor size, Ki-67 index, Mitotic count Categorical Variables: Grade, Histology, Lymph node status Options: - Impute Missing: Yes - Risk Stratification: Yes - Population Adjustment: Yes (if study ≠ target population)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "example-3-treatment-response-prediction",
        "dir": "Articles",
        "previous_headings": "Practical Examples",
        "what": "Example 3: Treatment Response Prediction",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Expected Output: - Treatment response probability patient - Key predictive factors - Clinical decision thresholds - Personalized treatment recommendations",
        "code": "Clinical Context: Treatment Response Target: Complete response (Yes/No) Continuous Variables: Baseline tumor markers, Age Categorical Variables: Stage, Prior treatments, Molecular subtype Training Cohort: Training vs Validation sets Options: - Scale Features: Yes (different biomarker units) - Clinical Interpretation: Yes - Export Predictions: Yes"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "performance-thresholds",
        "dir": "Articles",
        "previous_headings": "Clinical Interpretation Guidelines",
        "what": "Performance Thresholds",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Excellent: Sensitivity/Specificity ≥ 0.90 Good: Sensitivity/Specificity ≥ 0.80 Adequate: Sensitivity/Specificity ≥ 0.70 Poor: Sensitivity/Specificity < 0.70",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "likelihood-ratio-interpretation",
        "dir": "Articles",
        "previous_headings": "Clinical Interpretation Guidelines",
        "what": "Likelihood Ratio Interpretation",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "LR+ ≥ 10: Strong evidence disease LR+ 5-10: Moderate evidence disease LR+ 2-5: Weak evidence disease LR+ < 2: Minimal diagnostic value LR- ≤ 0.1: Strong evidence disease LR- 0.1-0.2: Moderate evidence disease LR- 0.2-0.5: Weak evidence disease LR- > 0.5: Minimal diagnostic value",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "cancer-screening",
        "dir": "Articles",
        "previous_headings": "Clinical Interpretation Guidelines > Clinical Context Recommendations",
        "what": "Cancer Screening",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Priority: High sensitivity (≥ 0.90) Acceptable: Lower specificity (≥ 0.70) Rationale: Missing cancer cases severe consequences",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "diagnostic-confirmation",
        "dir": "Articles",
        "previous_headings": "Clinical Interpretation Guidelines > Clinical Context Recommendations",
        "what": "Diagnostic Confirmation",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Priority: High specificity (≥ 0.90) Acceptable: Moderate sensitivity (≥ 0.80) Rationale: Avoid unnecessary treatments/anxiety",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "prognosis-assessment",
        "dir": "Articles",
        "previous_headings": "Clinical Interpretation Guidelines > Clinical Context Recommendations",
        "what": "Prognosis Assessment",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Priority: Balanced accuracy Focus: Risk stratification capability Metrics: C-index, calibration, discrimination",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "minimum-requirements",
        "dir": "Articles",
        "previous_headings": "Quality Assurance",
        "what": "Minimum Requirements",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Sample Size: ≥ 50 cases reliable trees Events: ≥ 10 per predictor variable Validation: Independent test set cross-validation Missing Data: < 20% per variable",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "red-flags",
        "dir": "Articles",
        "previous_headings": "Quality Assurance",
        "what": "Red Flags",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Low Prevalence: < 5% (consider oversampling) Perfect Separation: May indicate overfitting Extreme Outliers: > 5 SD mean High Missing Data: > 50% key variables",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "data-preparation",
        "dir": "Articles",
        "previous_headings": "Implementation Steps",
        "what": "1. Data Preparation",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Clean validate clinical data Ensure appropriate coding outcomes Check systematic missing patterns Validate biomarker ranges",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "model-development",
        "dir": "Articles",
        "previous_headings": "Implementation Steps",
        "what": "2. Model Development",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Select appropriate clinical context Choose relevant performance metrics Set validation strategy Consider class imbalance",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "clinical-validation",
        "dir": "Articles",
        "previous_headings": "Implementation Steps",
        "what": "3. Clinical Validation",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Test independent cohort Assess calibration across subgroups Evaluate clinical utility Compare existing methods",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "clinical-implementation",
        "dir": "Articles",
        "previous_headings": "Implementation Steps",
        "what": "4. Clinical Implementation",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Establish quality control procedures Train clinical staff Monitor performance time Update model needed",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "for-diagnostic-tools",
        "dir": "Articles",
        "previous_headings": "Regulatory Considerations",
        "what": "For Diagnostic Tools",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "FDA guidance AI/ML-based medical devices Clinical validation requirements Performance monitoring protocols Documentation standards",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "for-research-applications",
        "dir": "Articles",
        "previous_headings": "Regulatory Considerations",
        "what": "For Research Applications",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "IRB approval retrospective analysis Data privacy compliance (HIPAA) Publication guidelines Reproducibility standards",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "common-issues",
        "dir": "Articles",
        "previous_headings": "Troubleshooting",
        "what": "Common Issues",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Low Performance: Check data quality, feature relevance Overfitting: Reduce tree depth, increase minimum cases Poor Calibration: Consider calibration methods Class Imbalance: Use appropriate sampling/weighting",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "performance-optimization",
        "dir": "Articles",
        "previous_headings": "Troubleshooting",
        "what": "Performance Optimization",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Feature selection based clinical relevance Cross-validation hyperparameter tuning Ensemble methods improved stability Regular model retraining new data",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "precision-medicine-applications",
        "dir": "Articles",
        "previous_headings": "Advanced Clinical Applications",
        "what": "Precision Medicine Applications",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "",
        "code": "Example: Personalized Cancer Treatment Selection Target: Treatment Response (Complete/Partial/Progressive) Variables:  - Genomic markers (mutations, expression levels) - Clinical factors (age, stage, performance status) - Histopathological features (grade, subtype) - Previous treatments (type, response, duration)  Clinical Impact: - Avoid ineffective treatments - Reduce treatment toxicity - Optimize resource allocation - Improve patient outcomes"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "multi-modal-pathology-integration",
        "dir": "Articles",
        "previous_headings": "Advanced Clinical Applications",
        "what": "Multi-Modal Pathology Integration",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "",
        "code": "Example: AI-Assisted Pathology Diagnosis Target: Histological Diagnosis (Benign/Malignant/Uncertain) Variables: - Quantitative histology metrics - Immunohistochemistry scores - Molecular markers - Clinical presentation data  Benefits: - Standardized diagnostic criteria - Reduced inter-observer variability - Enhanced diagnostic accuracy - Training tool for pathologists"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "longitudinal-outcome-prediction",
        "dir": "Articles",
        "previous_headings": "Advanced Clinical Applications",
        "what": "Longitudinal Outcome Prediction",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "",
        "code": "Example: Disease Progression Monitoring Target: 5-year survival (High/Medium/Low risk) Variables: - Baseline clinical parameters - Treatment response markers - Serial biomarker measurements - Quality of life indicators  Applications: - Treatment intensity adjustment - Follow-up scheduling optimization - Patient counseling support - Clinical trial stratification"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "tumor-board-decision-support",
        "dir": "Articles",
        "previous_headings": "Specialized Oncology Applications",
        "what": "Tumor Board Decision Support",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "decision tree can assist multidisciplinary teams : - Risk Stratification: Categorize patients treatment urgency - Treatment Options: Rank interventions predicted benefit - Resource Planning: Allocate specialized care appropriately - Second Opinions: Provide objective analysis framework",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "biomarker-development-pipeline",
        "dir": "Articles",
        "previous_headings": "Specialized Oncology Applications",
        "what": "Biomarker Development Pipeline",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Support translational research : - Discovery: Identify promising biomarker combinations - Validation: Test performance across independent cohorts - Optimization: Determine optimal cutoff values - Implementation: Create clinical-ready algorithms",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "clinical-trial-design",
        "dir": "Articles",
        "previous_headings": "Specialized Oncology Applications",
        "what": "Clinical Trial Design",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Enhance study design : - Stratification: Balance treatment arms - Enrichment: Select likely responders - Adaptive Designs: Modify based interim results - Endpoint Selection: Choose clinically meaningful outcomes",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "model-performance-standards",
        "dir": "Articles",
        "previous_headings": "Quality Metrics for Clinical Implementation",
        "what": "Model Performance Standards",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "",
        "code": "Minimum Acceptable Performance: - Screening Applications: Sensitivity ≥ 0.85, NPV ≥ 0.95 - Diagnostic Applications: Specificity ≥ 0.85, PPV ≥ 0.80 - Prognostic Applications: C-index ≥ 0.70, Calibration slope 0.8-1.2 - Treatment Selection: Clinical utility > standard care"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "validation-requirements",
        "dir": "Articles",
        "previous_headings": "Quality Metrics for Clinical Implementation",
        "what": "Validation Requirements",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "",
        "code": "Internal Validation: - Cross-validation (k-fold ≥ 5) - Bootstrap validation (≥ 200 iterations) - Temporal validation (if longitudinal data)  External Validation: - Independent institution - Different population - Prospective cohort - Multi-center validation"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "performance-monitoring",
        "dir": "Articles",
        "previous_headings": "Quality Metrics for Clinical Implementation",
        "what": "Performance Monitoring",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "",
        "code": "Continuous Assessment: - Monthly performance reviews - Calibration drift detection - Distribution shift monitoring - Outcome feedback integration"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "algorithmic-fairness",
        "dir": "Articles",
        "previous_headings": "Ethical and Legal Considerations",
        "what": "Algorithmic Fairness",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Bias Assessment: Test across demographic subgroups Equity Metrics: Ensure fair performance across populations Representation: Validate underrepresented groups Transparency: Provide interpretable decision rationale",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "clinical-responsibility",
        "dir": "Articles",
        "previous_headings": "Ethical and Legal Considerations",
        "what": "Clinical Responsibility",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Human Oversight: Maintain physician final decision authority Error Handling: Clear protocols algorithm failures Documentation: Comprehensive decision audit trails Training: Adequate user education competency",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "regulatory-compliance",
        "dir": "Articles",
        "previous_headings": "Ethical and Legal Considerations",
        "what": "Regulatory Compliance",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "FDA 510(k): diagnostic device applications Clinical Evidence: Demonstrate clinical utility Risk Classification: Appropriate regulatory pathway Post-Market Surveillance: Ongoing safety monitoring",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "economic-evaluation-framework",
        "dir": "Articles",
        "previous_headings": "Cost-Effectiveness Analysis",
        "what": "Economic Evaluation Framework",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "",
        "code": "Cost Components: - Development and validation costs - Implementation and training costs - Ongoing maintenance and monitoring - Quality assurance and calibration  Benefit Components: - Improved diagnostic accuracy - Reduced unnecessary procedures - Earlier detection and treatment - Reduced healthcare utilization - Improved patient outcomes"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "return-on-investment-metrics",
        "dir": "Articles",
        "previous_headings": "Cost-Effectiveness Analysis",
        "what": "Return on Investment Metrics",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Cost per Quality-Adjusted Life Year (QALY) Number Needed Screen/Treat Incremental Cost-Effectiveness Ratio Budget Impact Analysis",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "technology-integration",
        "dir": "Articles",
        "previous_headings": "Future Directions",
        "what": "Technology Integration",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Electronic Health Records: Seamless clinical workflow integration Laboratory Information Systems: Automated biomarker input Imaging Systems: Multi-modal data fusion Mobile Health: Point--care decision support",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "methodological-advances",
        "dir": "Articles",
        "previous_headings": "Future Directions",
        "what": "Methodological Advances",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Federated Learning: Multi-institutional model development Continual Learning: Adaptive model updating Explainable AI: Enhanced interpretability methods Uncertainty Quantification: Confidence estimation",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "clinical-applications-expansion",
        "dir": "Articles",
        "previous_headings": "Future Directions",
        "what": "Clinical Applications Expansion",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Rare Diseases: Specialized algorithms uncommon conditions Pediatric Oncology: Age-appropriate decision models Geriatric Care: Frailty-adjusted treatment decisions Global Health: Resource-constrained setting applications",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "model-development-1",
        "dir": "Articles",
        "previous_headings": "Best Practices Summary",
        "what": "Model Development",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Clinical Relevance First: Start clinical need, data availability Domain Expertise: Involve clinicians throughout development Appropriate Metrics: Use clinically meaningful performance measures Robust Validation: Multiple validation strategies cohorts Interpretability: Ensure clinical understanding trust",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "implementation-strategy",
        "dir": "Articles",
        "previous_headings": "Best Practices Summary",
        "what": "Implementation Strategy",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Pilot Testing: Start low-risk applications User Training: Comprehensive education programs Feedback Loops: Continuous improvement mechanisms Change Management: Address workflow integration challenges Performance Monitoring: Ongoing quality assurance",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "maintenance-and-evolution",
        "dir": "Articles",
        "previous_headings": "Best Practices Summary",
        "what": "Maintenance and Evolution",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Regular Updates: Incorporate new evidence data Performance Monitoring: Detect address model drift User Feedback: Integrate clinical experience Technology Updates: Leverage methodological advances Regulatory Compliance: Maintain appropriate approvals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/medical_decision_tree_guide.html",
        "id": "conclusion",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Conclusion",
        "title": "Medical Decision Tree - Clinical Implementation Guide",
        "text": "Medical Decision Tree module provides comprehensive framework developing, validating, implementing clinical decision support tools pathology oncology. focusing clinically relevant metrics, appropriate validation strategies, practical implementation considerations, bridges gap statistical modeling clinical practice. Success depends close collaboration data scientists, clinicians, healthcare administrators ensure technical capabilities align clinical needs operational realities. ultimate goal improve patient outcomes evidence-based, data-driven clinical decision support maintaining essential human elements medical care.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "a-beginners-guide-to-jamovi-modules-or-jamovi-modules-for-dummies",
        "dir": "Articles",
        "previous_headings": "",
        "what": "‘A beginners guide to jamovi modules’ or ‘jamovi modules for dummies’",
        "title": "Module Development for Jamovi",
        "text": "Official documentation : https://dev.jamovi.org/",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "tldr",
        "dir": "Articles",
        "previous_headings": "‘A beginners guide to jamovi modules’ or ‘jamovi modules for dummies’",
        "what": "TL;DR",
        "title": "Module Development for Jamovi",
        "text": "Details : https://dev.jamovi.org/ Briefly: Use R >= 4.0.5 Install jamovi link: https://www.jamovi.org/download.html Get latest one 2.3.2 Install jmvtools package : locate jamovi bin folder via : jmvtools::check(\"C://Program Files//jamovi//bin\") recommend changing folder name default jamovi 1.2 jamovi C:\\Program Files\\jamovi 2.3.0.0\\bin\\jamovi.exe Fork Clone repo: https://github.com/sbalci/ClinicoPath inside repo folder R jmvtools::install() produce file named ClinicoPath.jmo install module jamovi repo like R package except jamovi folder. need edit R/crosstable.b.R Just edit tangram:: code https://dev.jamovi.org/tuts0104-implementing--analysis.html https://dev.jamovi.org/tuts0105-debugging--analysis.html DESCRIPTION file change spgarbet/tangram@0.3.2 version want test. run jmvtools::install() . Let know goes :)",
        "code": "install.packages('node', repos='https://repo.jamovi.org')  install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org')) jmvtools::check(home = 'C:\\\\Program Files\\\\jamovi 2.3.0.0\\\\bin')  options(jamovi_home = 'C:\\\\Program Files\\\\jamovi 2.3.0.0\\\\bin')"
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "use-an-unsigned-version-of-jamovi-for-development-in-mac",
        "dir": "Articles",
        "previous_headings": "‘A beginners guide to jamovi modules’ or ‘jamovi modules for dummies’ > preparing development tools",
        "what": "use an unsigned version of jamovi for development in mac",
        "title": "Module Development for Jamovi",
        "text": "https://dev.jamovi.org/#28-02-2020 https://www.jamovi.org/downloads/jamovi-unsigned.zip",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "jmvtools-should-be-installed-from-the-jamovi-repo",
        "dir": "Articles",
        "previous_headings": "‘A beginners guide to jamovi modules’ or ‘jamovi modules for dummies’ > preparing development tools",
        "what": "jmvtools should be installed from the jamovi repo",
        "title": "Module Development for Jamovi",
        "text": "https://dev.jamovi.org/tuts0101-getting-started.html can use devtools::install() use codes usual R package, submit github CRAN. devtools::check() like jamovi folders sure add .Rbuildignore",
        "code": "install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org')) jmvtools::check() jmvtools::install()"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "creating-a-module",
        "dir": "Articles",
        "previous_headings": "‘A beginners guide to jamovi modules’ or ‘jamovi modules for dummies’",
        "what": "Creating a Module",
        "title": "Module Development for Jamovi",
        "text": "https://dev.jamovi.org/tuts0102-creating--module.html",
        "code": "jmvtools::create(path = \"~/ClinicoPathDescriptives\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "add-analysis",
        "dir": "Articles",
        "previous_headings": "‘A beginners guide to jamovi modules’ or ‘jamovi modules for dummies’",
        "what": "add analysis",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "jmvtools::create('function')"
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "description-file",
        "dir": "Articles",
        "previous_headings": "Structure > Development Files",
        "what": "DESCRIPTION file",
        "title": "Module Development for Jamovi",
        "text": "Imports, Depends, Suggests, Remotes practically difference building jamovi modules. jmvtools::install() copies libraries build folder. Imports jmvcore R6 defaults. Remotes one can install github packages well. jmvtools::install() command tries check updates, online throws error. upgrade = FALSE, quick = TRUE argument like devtools::install() available, yet. One workaround temporarily deleting Remotes DESCRIPTION. package folders continue remain build folder. One can also directly copy package folders system R package folder (find via .libPaths()) well.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "namespace-file",
        "dir": "Articles",
        "previous_headings": "Structure > Development Files",
        "what": "NAMESPACE file",
        "title": "Module Development for Jamovi",
        "text": "need change.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "r-folder",
        "dir": "Articles",
        "previous_headings": "Structure > Development Files",
        "what": "R folder",
        "title": "Module Development for Jamovi",
        "text": "R folder codes present. two files.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "function-h-r",
        "dir": "Articles",
        "previous_headings": "Structure > Development Files > R folder",
        "what": "function.h.R",
        "title": "Module Development for Jamovi",
        "text": "need change. Auto-updated overwritten.",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "write-formula",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Module Development for Jamovi",
        "title": "Module Development for Jamovi",
        "text": "https://cran.r-project.org/web/packages/jmv/vignettes/new-syntax.html case, jmv look variables ToothGrowth called ‘dep’ ‘factors’. tidy evaluation. instruct jmv use contents ’s arguments, rather symbol name, prefix !! signifier. example:",
        "code": "jmv::ANOVA(formula = len ~ supp * dose, ToothGrowth) jmv::ANOVA(ToothGrowth, len, vars(supp, dose)) jmv::ANOVA(..., emMeans = ~ supp + dose:supp) jmv::ANOVA(ToothGrowth, 'len', c('supp', 'dose')) dep <- 'len' factors <- c('supp', 'dose')  jmv::ANOVA(ToothGrowth, !!dep, !!factors)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "warning-error-messages",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Module Development for Jamovi",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "if (nrow(self$data) == 0) stop(\"Data contains no (complete) rows\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "prepare-data-for-analysis",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Module Development for Jamovi",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "varsName <- self$options$vars          data <- jmvcore::select(self$data, c(varsName))"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "remove-na-containing-cases-works-on-selected-variables",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Module Development for Jamovi",
        "title": "Module Development for Jamovi",
        "text": "jmvcore::toNumeric() https://dev.jamovi.org/tuts0202-handling-data.html can just send whole data plot function? usually don’t want , sometimes ’s appropriate. normally just provide summary data plot function … just enough data ’s job. need whole data set plot function, can specify requiresData: true image object. means plot function can access self$data. correlation matrix example. ’s summary send … plot function needs data: https://github.com/jamovi/jmv/blob/master/jamovi/corrmatrix.r.yaml#L143 jamovi/corrmatrix.r.yaml:143 requiresData: true",
        "code": "data <- jmvcore::naOmit(data)"
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "preformatted",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Module Development for Jamovi",
        "title": "Module Development for Jamovi",
        "text": "Using “preformatted” result element get markdown table output. way somehow render/convert output html version. go https://dev.jamovi.org/api_table.html table api? ’re best make use table api … table API lot features md table.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "p-value-format",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Module Development for Jamovi",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "- name: p        title: \"p\"        type: number        format: zto,pvalue"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "levelselector",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Module Development for Jamovi",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "i have added the property allowNone to the LevelSelector control. This will allow the user to select None from the listbox."
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "refs-yaml",
        "dir": "Articles",
        "previous_headings": "Structure > Development Files > jamovi folder",
        "what": "00refs.yaml",
        "title": "Module Development for Jamovi",
        "text": "prepare 00refs.yaml like : https://github.com/jamovi/jmv/blob/master/jamovi/00refs.yaml attach references objects .r.yaml file like : https://github.com/jamovi/jmv/blob/master/jamovi/ancova.r.yaml#L174",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "tables",
        "dir": "Articles",
        "previous_headings": "Structure",
        "what": "Tables",
        "title": "Module Development for Jamovi",
        "text": "want long table. tried use following got error. current .r.yaml - name: irrtable title: Interrater Reliability type: Table rows: 1 columns: - name: method title: ‘Method’ type: text - name: subjects title: ‘Subjects’ type: integer - name: raters title: ‘Raters’ type: integer - name: peragree title: ‘Agreement %’ type: number - name: kappa title: ‘Kappa’ type: number - name: z title: ‘z’ type: number - name: p title: ‘p-value’ type: number format: zto,pvalue try setting swapRowsColumns true. alternatively, can name columns like method[], method[b], cause row ‘folded’ value method[b] appears value method[] . example t-test: https://github.com/jamovi/jmv/blob/master/jamovi/ttestis.r.yaml#L20",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "devtoolsinstall",
        "dir": "Articles",
        "previous_headings": "Structure > Installing",
        "what": "devtools::install",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "devtools::install(upgrade = FALSE, quick = TRUE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "init",
        "dir": "Articles",
        "previous_headings": "Structure",
        "what": ".init()",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "so the principle seems right. you initialise the table in the .init() phase (you add rows and columns), and then you populate the table in the .run() phase. however, i notice your .init() function calls .initcTable() which doesn’t actually do anything. most of the time, .init() isn’t necessary, because the .r.yaml file can take care of it, but sometimes the rows/columns the table should have is a more complex calculation than the .r.yaml allows (and example of this might be the ANOVA table in jmv … there’s not a simple relationship between the number of variables in the option, i.e. dose, supp, and the number of rows in the ANOVA table dose, supp, supp * dose, residuals. so we can’t achieve this with the .r.yaml, and so we set it up in the .init() phase. finally, there are times where you can’t even determine the number of rows/columns in the .init() phase. you can only decide how many rows/columns are appropriate after you’ve run the analysis. an example of this might be a cluster analysis, where there’s a row for each cluster, but you only know how many rows you need after the analysis has been run. this is the least desireable, because it does lead to the growing and shrinking of the table, but sometimes that’s unavoidable. so that’s your order of preference. preferably in the .r.yaml, if that can’t work, then do it in the .init(), and as a last resort, you can do it in the .run()"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "output-variables-in-jamovi-1-6-16",
        "dir": "Articles",
        "previous_headings": "Structure",
        "what": "Output variables in jamovi 1.6.16",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "hi, we’ve added “output variables” to version 1.6.16 of jamovi. this allows analyses to save data from the analyses, back to the spreadsheet (for example, residuals). there’s nothing in the 1.6.16 which indicates to users that this functionality is there, and it will only appear when an analysis implements these features. the idea is that we won’t actually release any modules with these features publicly, until an upcoming jamovi 1.8, or 2.0, or whatever. we’ve added these to the 1.6.16 so you can begin developing for the upcoming release. you begin by specifying an output option in your .a.yaml file, i.e.                  # - name: resids                 # title: Residuals                 # type: Output                 # and then add an entry into your .r.yaml file, with a matching name:                 #     - name: resids                 # title: Residuals                 # type: Output                 # varTitle: '`Residuals - ${ dep }`'                 # varDescription: Residuals from ANCOVA                 # clearWith:                 #     - dep                 # - factors                 # - covs                 # - modelTerms                 # in this case you’ll see that i’m specifying a formatted string, where the name of the column produced is generated from the dep variable, or dependent variable.                 # you can populate the output column with:                 #     if (self$options$resids && self$results$resids$isNotFilled()) {                 #         self$results$resids$setValues(aVector)                 #     }                 # sometimes your dataset will have gaps in it, either from filters, or from you calling na.omit() on it, and so if you simply send the residuals from your linear model to $setValues() they won’t be placed in the correct rows. there are two ways to solve this.                 call self$results$resids$setRowNums(...) . conveniently, you can simply take the rownames() from your data set (after calling na.omit()) on it, and pass this in here. i.e.                 # cleanData <- na.omit(self$data)                 # ...                 # rowNums <- rownames(cleanData)                 # self$results$resids$setRowNums(rowNums)                 # alternatively, you can turn your residuals into a data frame, attach the row numbers to that:                 #     residuals <- ...                 # residuals <- data.frame(residuals=residuals, row.names=rownames(cleanData))                 # self$results$setValues(residuals)                 # if you want to provide multiple output columns, for example, perhaps in the previous example we want a “predicted values” column as well, we’d add additional entries to the .a.yaml and the .r.yaml. each entry in the .a.yaml will result in one checkbox.                 # if you want to provide multiple columns with a single checkbox/option, then you can use the items property.                 # - name: predInt                 # title: Prediction intervals                 # varTitle: Pred interval                 # type: Output                 # items: 2                 # then you can go:                 #     self$results$predInt$setValues(index=i, values)                 # or you could wrap both columns of values in a data frame, and go:                 #     self$results$predInt$setValues(valuesinadataframe)                 # you can use data bindings with items too. i.e.                 # - name: resids                 # title: Residuals                 # type: Output                 # varTitle: 'Residuals - $key'                 # items: (vars)                 # this will create an output column for each variable assigned to vars. these can be set:                 #     self$results$resids$setValues(key=key, values)"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "code-search-in-github",
        "dir": "Articles",
        "previous_headings": "Structure > Other Tips",
        "what": "Code Search in GitHub",
        "title": "Module Development for Jamovi",
        "text": "https://github.com/search/advanced?q=select+repo%3Ajamovi%2Fjmv+filename%3A.b.R+language%3AR&type=Code https://github.com/search?l=&q=select+repo%3Ajamovi%2Fjmv+filename%3A.b.R+language%3AR&type=Code",
        "code": "select repo:jamovi/jmv filename:.b.R language:R generate advanced search for all jamovi library jamovi_library_names <- readLines(\"https://raw.githubusercontent.com/jonathon-love/jamovi-library/master/modules.yaml\")  jamovi_library_names <- stringr::str_extract(   string = jamovi_library_names,   pattern = \"github.com/(.*).git\")  jamovi_library_names <- jamovi_library_names[!is.na(jamovi_library_names)]  jamovi_library_names <- gsub(pattern = \"github.com/|.git\",                              replacement = \"\",                              x = jamovi_library_names)  jamovi_library_names <- c(\"jamovi/jmv\", jamovi_library_names)  jamovi_library_names <- gsub(pattern = \"/\",                               replacement = \"%2F\",                               x = jamovi_library_names)  query <- \"type: Level\"  repos <- paste0(\"repo%3A\",jamovi_library_names,\"+\")  repos <- paste0(repos, collapse = \"\")  repos <- gsub(pattern = \"\\\\+$\",               replacement = \"\",               x = repos)  github_search <- paste0(\"https://github.com/search?q=\",                         query,                         \"+\",                         repos,                         \"&type=Code&ref=advsearch&l=&l=\")  cat(github_search)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "library-development-status",
        "dir": "Articles",
        "previous_headings": "Structure > Other Tips",
        "what": "Library Development Status",
        "title": "Module Development for Jamovi",
        "text": "https://ci.appveyor.com/project/jonathon-love/jamovi-library/history",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "gitignore",
        "dir": "Articles",
        "previous_headings": "Structure > Other Tips > RStudio options",
        "what": ".gitignore",
        "title": "Module Development for Jamovi",
        "text": "add following .gitignore file",
        "code": "# jamovi /build/ /build-*/ *.jmo"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "r-version",
        "dir": "Articles",
        "previous_headings": "Structure > Other Tips",
        "what": "R version",
        "title": "Module Development for Jamovi",
        "text": "Try use compatible packages jamovi’s R version. Use: R 4.0.5 https://cran.r-project.org/bin/macosx/R-4.0.5.pkg Use packages mran:",
        "code": "options( repos = \"https://cran.microsoft.com/snapshot/2021-04-01\"                 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "base-r-packages-within-jamovi",
        "dir": "Articles",
        "previous_headings": "Structure > Other Tips",
        "what": "Base R packages within jamovi",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "jamovi.app/Contents/Resources/modules/base/R  this folder contains base R packages used for jamovi.  jmvtools::install() prevent the packages already installed in base/R from being installed into your module.   (jmvtools is an R package which is a thin wrapper around the jamovi-compiler. The jamovi-compiler is written in javascript)  That cause problems if you are using different package versions. So it is best to keep up with suggested 'mran' version."
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "electron",
        "dir": "Articles",
        "previous_headings": "Structure > Other Tips",
        "what": "Electron",
        "title": "Module Development for Jamovi",
        "text": "jamovi electron based. See R, shiny, electron based application development : Deploying Shiny app desktop application Electron",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "project-structure",
        "dir": "Articles",
        "previous_headings": "Structure > Other Tips",
        "what": "Project Structure",
        "title": "Module Development for Jamovi",
        "text": "https://dev.jamovi.org/info_project-structure.html https://forum.jamovi.org/viewtopic.php?f=12&t=1253&p=4251&hilit=npm#p4251 easiest way build jamovi macOS use dev bundle. https://www.jamovi.org/downloads/jamovi-dev.zip navigate jamovi.app/Contents/Resources folder, ’ll find package.json contains bunch different build commands. can issue commands like: npm run build:client npm run build:server npm run build:analyses:jmv depending component ’re wanting build.",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "add-datasets",
        "dir": "Articles",
        "previous_headings": "Structure",
        "what": "Add Datasets",
        "title": "Module Development for Jamovi",
        "text": ".omv .csv allowed. excel also allowed user see csv excel file.",
        "code": "make a data folder (same as with an R package), and then you put entries in your 0000.yaml file: https://github.com/gamlj/gamlj/blob/master/jamovi/0000.yaml#L47-L108 jamovi/0000.yaml:47-108 datasets:   - name: qsport     path: qsport.csv     description: Training hours     tags:"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "error-messages",
        "dir": "Articles",
        "previous_headings": "Structure",
        "what": "Error messages",
        "title": "Module Development for Jamovi",
        "text": "’s good test lots different data sets user may … include missing values, really large values, etc. etc. make sure analyses always handle , provide useful error messages analysis doesn’t work. don’t want leave user uncertain something isn’t working … otherwise just give . part philosophy people shouldn’t set data can’t bothered … large data sets can take lot time. ’d encourage treat whatever user provides continuous, converting toNumeric() … data philosophy : https://dev.jamovi.org/tuts0202-handling-data.html https://youtu./oWZrrWc6e74 options, ’ve got Survival Curve, results, ’s Survival Plot … ’d encourage make consistent. also, Survival Curve unchecked, ’d hide Surival plot, rather leaving vacant space . visible: (optionName) https://github.com/jamovi/jmv/blob/master/jamovi/ttestis.r.yaml#L408-L416 jamovi/ttestis.r.yaml:408-416 - name: qq type: Image description: Q-Q plot width: 350 height: 300 variable type dates jamovi? Can force user add date VariablesListBox? tried get info selfoptionsoptionsvar via lubridate::.Date .na.POSIXlt work hi, don’t date data type time … integer, numeric, character … people enter dates character, parse , appreciate ’s bit hack Thank . Dates always problem routine practice. work many international colleagues always date column mess, people calculate survival time differently. want raw dates can calculate survival time. try somehow going around. learn YAML syntax ’s pretty straightforward syntax … ’ve basically got ‘objects’ elements names, ’ve got arrays, objects index. ’s --less . can take look jmv examples: https://github.com/jamovi/jmv/tree/master/jamovi don’t think ’ve got list allowed parameters anywhere. Probably best bet browse .yaml files jmv. think ’ll find ’s many parameter names. work-around, ’s installed package Remotes, can remove DESCRIPTION won’t keep installing Hi, scarce sources pairwise chi-square tests. found rmngb::pairwise.chisq.test() rmngb::pairwise.fisher.test() package removed CRAN. consider implementing feature? also thought add functions module, want ask policy removed packages well. 4 replies jonathon:whale2: 18 days ago provided module can built entry REMOTES, don’t care ’s CRAN jonathon:whale2: 18 days ago … ’re obviously taking risk using something isn’t maintained Serdar Balci 18 days ago Thanks. Maybe just copying function appropriate reference may solve maintenance issue. think . jonathon:whale2: 18 days ago oh yup question. want user enter cut points box evaluate vector. function : summary(km_fit, times = c(12,36,60) want user define times vector. tried following: utimes <- jmvcore::decomposeTerms(selfoptionsoptionscutp) utimes <- .vector(utimes) summary(km_fit, times = utimes .yaml follows: - name: cutp title: Define least two cutpoints (months) survival table type: String default: ‘12, 36, 60’ please guide convert input vector. (edited) 3 replies Serdar Balci 13 hours ago think seems work: utimes <- selfoptionsoptionscutp utimes <- strsplit(utimes, “,”) utimes <- purrr::reduce(utimes, .vector) utimes <- .numeric(utimes) (edited) jonathon:whale2: 5 hours ago yup, : .numeric(strsplit(utimes, ‘,’)[[1]]) (’s better can avoid using purrr, ’s really necessary, ’re better reducing amount dependencies use) Serdar Balci 5 hours ago thank . :+1: wrt width/height, can set .r.yaml like : https://github.com/kylehamilton/MAJOR/blob/master/jamovi/bayesmetacorr.r.yaml#L46-L49 ’s possible programmatically, … image$setSize()",
        "code": "data <- data.frame(outcome=c(1,0,0,1,NA,1)) data <- na.omit(data) if ( ! is.numeric(data$outcome) || any(data$outcome != 0 & data$outcome != 1))   stop('Outcome variable must only contains 1s and 0s') Serdar Balci  4:48 PM  I think I am getting familiar with the codes :) QuickTime Movie JamoviModule.mov 4 MB QuickTime Movie— Click to download Serdar Balci Nov 29th, 2019 at 12:39 PM Module names now have R version and OS in them. Does it mean that this will not work in windows Installing ClinicoPath_0.0.1-macos-R3.3.0.jmo  4 replies  jonathon:whale2:  3 months ago It depends on whether there are any native R packages in your modules dependencies. Most modules do, but some don't. (You'll notice there's a \"uses native\" property there now too ... my intention is to use that to determine if a module can be used cross platform or not)  jonathon:whale2:  3 months ago If there's native dependencies, then the module needs to be built separately for each os.  jonathon:whale2:  3 months ago But I can take care of building it for different oses  Serdar Balci  3 months ago Oh, I see. Thank you :slightly_smiling_face:"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "develop",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Develop",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "library, eval=FALSE, include=FALSE # install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))  # jmvtools::check(\"C://Program Files//jamovi//bin\")  # jmvtools::install(home = \"C://Program Files//jamovi//bin\") # # devtools::build(path = \"C:\\\\ClinicoPathOutput\")  # .libPaths(new = \"C:\\\\ClinicoPathLibrary\")  # devtools::build(path = \"C:\\\\ClinicoPathOutput\", binary = TRUE, args = c('--preclean'))  Sys.setenv(TZ=\"Europe/Istanbul\")  library(\"jmvtools\") check, eval=FALSE, include=FALSE  jmvtools::check()  # rhub::check_on_macos()  # rhub::check_for_cran()  # codemetar::write_codemeta()   devtools::check() pkgdown build, eval=FALSE, include=FALSE rmarkdown::render('/Users/serdarbalciold/histopathRprojects/ClinicoPath/README.Rmd',  encoding = 'UTF-8', knit_root_dir = '~/histopathRprojects/ClinicoPath', quiet = TRUE)  devtools::document()  pkgdown::build_site() git force push, eval=FALSE, include=FALSE # gitUpdateCommitPush CommitMessage <- paste(\"updated on \", Sys.time(), sep = \"\") wd <- getwd() gitCommand <- paste(\"cd \", wd, \" \\n git add . \\n git commit --message '\", CommitMessage, \"' \\n git push origin master \\n\", sep = \"\") # gitCommand <- paste(\"cd \", wd, \" \\n git add . \\n git commit --no-verify --message '\", CommitMessage, \"' \\n git push origin master \\n\", sep = \"\") system(command = gitCommand, intern = TRUE) add analysis, eval=FALSE, include=FALSE  # jmvtools::install() # # jmvtools::create('SuperAwesome') # # jmvtools::addAnalysis(name='ttest', title='Independent Samples T-Test') # # jmvtools::addAnalysis(name='survival', title='survival') # # jmvtools::addAnalysis(name='correlation', title='correlation') # # jmvtools::addAnalysis(name='tableone', title='TableOne') # # jmvtools::addAnalysis(name='crosstable', title='CrossTable') # # # jmvtools::addAnalysis(name='writesummary', title='WriteSummary')  # jmvtools::addAnalysis(name='finalfit', title='FinalFit')  # jmvtools::addAnalysis(name='multisurvival', title='FinalFit Multivariate Survival')  # jmvtools::addAnalysis(name='report', title='Report General Features')  # jmvtools::addAnalysis(name='frequencies', title='Frequencies')  # jmvtools::addAnalysis(name='statsplot', title='GGStatsPlot')  # jmvtools::addAnalysis(name='statsplot2', title='GGStatsPlot2')  # jmvtools::addAnalysis(name='scat2', title='scat2')  # jmvtools::addAnalysis(name='decisioncalculator', title='Decision Calculator')  # jmvtools::addAnalysis(name='agreement', title='Interrater Intrarater Reliability')  # jmvtools::addAnalysis(name='cluster', title='Cluster Analysis')  # jmvtools::addAnalysis(name='tree', title='Decision Tree') devtools install, eval=FALSE, include=FALSE devtools::install() jmvtools install, eval=FALSE, include=FALSE # jmvtools::check() jmvtools::install() construct, eval=FALSE, include=FALSE formula <- jmvcore::constructFormula(terms = c(\"A\", \"B\", \"C\"), dep = \"D\")  jmvcore::constructFormula(terms = list(\"A\", \"B\", c(\"C\", \"D\")), dep = \"E\")   jmvcore::constructFormula(terms = list(\"A\", \"B\", \"C\"))  vars <- jmvcore::decomposeFormula(formula = formula)  unlist(vars)  cformula <- jmvcore::composeTerm(components = formula)  jmvcore::composeTerm(\"A\")  jmvcore::composeTerm(components = c(\"A\", \"B\", \"C\"))  jmvcore::decomposeTerm(term = c(\"A\", \"B\", \"C\"))  jmvcore::decomposeTerm(term = formula)  jmvcore::decomposeTerm(term = cformula)    composeTerm <- jmvcore::composeTerm(components = c(\"A\", \"B\", \"C\"))  jmvcore::decomposeTerm(term = composeTerm)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "example",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Example",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "read data, eval=FALSE, include=FALSE deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\")) writesummary, eval=FALSE, include=FALSE devtools::install(upgrade = FALSE, quick = TRUE) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  # library(\"ClinicoPath\")  deneme$Age <- as.numeric(as.character(deneme$Age))  ClinicoPath::writesummary(data = deneme, vars = Age)  ggstatsplot::normality_message(deneme$Age, \"Age\")   ClinicoPath::writesummary(     data = deneme,     vars = Age) finalfit, eval=FALSE, include=FALSE devtools::install(upgrade = FALSE, quick = TRUE) library(dplyr) library(survival) library(finalfit) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\")) ClinicoPath::finalfit(data = deneme,                       explanatory = Sex,                       outcome = Outcome,                       overalltime = OverallTime) decision, eval=FALSE, include=FALSE devtools::install(upgrade = FALSE, quick = TRUE) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  ClinicoPath::decision(     data = deneme,     gold = Outcome,     goldPositive = \"1\",     newtest = Smoker,     testPositive = \"TRUE\")  ClinicoPath::decision(     data = deneme,     gold = LVI,     goldPositive = \"Present\",     newtest = PNI,     testPositive = \"Present\") eval=FALSE, include=FALSE deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\")) ggstatsplot::ggbetweenstats(data = deneme,                             x = LVI,                             y = Age) statsplot, eval=FALSE, include=FALSE devtools::install(upgrade = FALSE, quick = TRUE) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\")) ClinicoPath::statsplot(     data = deneme,     dep = Age,     group = Smoker) decision 2, eval=FALSE, include=FALSE mytable <- table(deneme$Outcome, deneme$Smoker)  caret::confusionMatrix(mytable) confusionMatrix(pred, truth) confusionMatrix(xtab, prevalence = 0.25)  levels(deneme$Outcome)  mytable[1,2]  d <- \"0\"  mytable[d, \"FALSE\"]  mytable[[0]] construct formula, eval=FALSE, include=FALSE formula <- jmvcore::constructFormula(terms = c(\"A\", \"B\", \"C\"))  jmvcore::constructFormula(terms = list(\"A\", \"B\", \"C\"))  vars <- jmvcore::decomposeFormula(formula = formula)  vars <- jmvcore::decomposeTerms(vars)   vars <- unlist(vars)  formula <- as.formula(formula)   my_group <- \"lvi\" my_dep <- \"age\"  formula <- paste0('x = ', group, 'y = ', dep) myformula <- as.formula(formula)  myformula <- glueformula::gf(my_group, my_dep)  myformula <- glue::glue( 'x = ' , my_group, ', y = ' , my_dep)  myformula <- jmvcore::composeTerm(myformula) eval=FALSE, include=FALSE deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  library(survival) km_fit <- survfit(Surv(OverallTime, Outcome) ~ LVI, data = deneme)  library(dplyr) km_fit_median_df <- summary(km_fit) km_fit_median_df <- as.data.frame(km_fit_median_df$table) %>%                 janitor::clean_names(dat = ., case = \"snake\") %>%                 tibble::rownames_to_column(.data = ., var = \"LVI\") construct formula 2, eval=FALSE, include=FALSE library(dplyr) library(survival)  deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  myoveralltime <- deneme$OverallTime myoutcome <- deneme$Outcome myexplanatory <- deneme$LVI  class(myoveralltime) class(myoutcome) typeof(myexplanatory)  is.ordered(myexplanatory)  formula2 <- jmvcore::constructFormula(terms = \"myexplanatory\") # formula2 <- jmvcore::decomposeFormula(formula = formula2) # formula2 <- paste(\"\", formula2) # formula2 <- as.formula(formula2) formula2 <- jmvcore::composeTerm(formula2)   formulaL <- jmvcore::constructFormula(terms = \"myoveralltime\") # formulaL <- jmvcore::decomposeFormula(formula = formulaL)  formulaR <- jmvcore::constructFormula(terms = \"myoutcome\") # formulaR <- jmvcore::decomposeFormula(formula = formulaR)  formula <- paste(\"Surv(\", formulaL, \",\", formulaR, \")\") # formula <- jmvcore::composeTerm(formula) # formula <- as.formula(formula) # jmvcore::constructFormula(terms = c(formula, formula2))  deneme %>%   finalfit::finalfit(formula, formula2) -> tUni  tUni eval=FALSE, include=FALSE library(dplyr) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  results <- deneme %>%                 ggstatsplot::ggbetweenstats(LVI, Age) results  mydep <- deneme$Age mygroup <- deneme$LVI   mygroup <- jmvcore::constructFormula(terms = \"mygroup\") mygroup <- jmvcore::composeTerm(mygroup)  mydep <- jmvcore::constructFormula(terms = \"mydep\") mydep <- jmvcore::composeTerm(mydep)   # not working # eval(mygroup) # rlang::eval_tidy(mygroup) # !!mygroup # mygroup # sym(mygroup) # quote(mygroup) # enexpr(mygroup)  mygroup <- jmvcore::constructFormula(terms = \"mygroup\") mydep <- jmvcore::constructFormula(terms = \"mydep\")  formula1 <- paste(mydep) formula1 <- jmvcore::composeTerm(formula1)   mygroup <- paste(mygroup) mygroup <- jmvcore::composeTerm(mygroup)  mydep <- deneme$Age mygroup <- deneme$LVI  mydep <- jmvcore::resolveQuo(jmvcore::enquo(mydep)) mygroup <- jmvcore::resolveQuo(jmvcore::enquo(mygroup))  mydata2 <- data.frame(mygroup=mygroup, mydep=mydep)  results <- mydata2 %>%                 ggstatsplot::ggbetweenstats( x = mygroup, y = mydep  )  results    myformula <- glue::glue('x = ', mygroup, ', y = ' , mydep)  myformula <- jmvcore::composeTerm(myformula)  myformula <- as.formula(myformula)   mydep2 <- quote(mydep) mygroup2 <- quote(mygroup)   results <- deneme %>%                 ggstatsplot::ggbetweenstats(!!mygroup2, !!mydep2) results construct formula 3, eval=FALSE, include=FALSE formula <- jmvcore::constructFormula(terms = c(\"myoveralltime\", \"myoutcome\"))  vars <- jmvcore::decomposeFormula(formula = formula)   explanatory <- jmvcore::constructFormula(terms = c(\"explanatory\"))  explanatory <- jmvcore::decomposeFormula(formula = explanatory)  explanatory <- unlist(explanatory)  myformula <- paste(\"Surv(\", vars[1], \", \", vars[2], \")\")    deneme %>% finalfit::finalfit(myformula, explanatory) -> tUni table tangram, eval=FALSE, include=FALSE deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))   table3 <-   tangram::html5(     tangram::tangram(       \"Death ~ LVI + PNI + Age\", deneme),     fragment=TRUE,     inline=\"nejm.css\",     caption = \"HTML5 Table NEJM Style\",     id=\"tbl3\")  table3  mydep <- deneme$Age mygroup <- deneme$Death   formulaR <- jmvcore::constructFormula(terms =  c(\"LVI\", \"PNI\", \"Age\"))  formulaL <- jmvcore::constructFormula(terms = \"Death\")  formula <- paste(formulaL, '~', formulaR)  formula <- as.formula(formula)   table <- tangram::html5(     tangram::tangram(formula, deneme                      ))  table"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "arsenal",
        "dir": "Articles",
        "previous_headings": "Example",
        "what": "arsenal",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "arsenal, results='asis', eval=FALSE, include=FALSE  tab1 <- arsenal::tableby(~ Age + Sex, data = deneme)  results <- summary(tab1)   # results$object # results$control # results$totals # results$hasStrata # results$text # results$pfootnote # results$term.name # # tab1$Call # # tab1$control  tab1$tables # this is where results lie"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "define-survival-time",
        "dir": "Articles",
        "previous_headings": "Example",
        "what": "define survival time",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "define survival time, eval=FALSE, include=FALSE mydata$int <- lubridate::interval(   lubridate::ymd(mydata$SurgeryDate),   lubridate::ymd(mydata$LastFollowUpDate)   ) mydata$OverallTime <- lubridate::time_length(mydata$int, \"month\") mydata$OverallTime <- round(mydata$OverallTime, digits = 1)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "multivariate-analysis-survival",
        "dir": "Articles",
        "previous_headings": "Example",
        "what": "Multivariate Analysis Survival",
        "title": "Module Development for Jamovi",
        "text": "",
        "code": "Multivariate Analysis, eval=FALSE, include=FALSE library(finalfit) library(survival) explanatoryMultivariate <- explanatoryKM dependentMultivariate <- dependentKM  mydata %>%   finalfit(dependentMultivariate, explanatoryMultivariate) -> tMultivariate  knitr::kable(tMultivariate, row.names=FALSE, align=c(\"l\", \"l\", \"r\", \"r\", \"r\", \"r\")) eval=FALSE, include=FALSE # Find arguments in yaml  list_of_yaml <- c(     list.files(path = \"~/histopathRprojects/ClinicoPath-Jamovi--prep/jmv\",                pattern = \"\\\\.yaml$\",                full.names = TRUE,                all.files = TRUE,                include.dirs = TRUE,                recursive = TRUE     ) )   text_of_yaml_yml <- purrr::map(     .x = list_of_yaml,     .f = readLines )  text_of_yaml_yml <- as.vector(unlist(text_of_yaml_yml))  arglist <-     stringr::str_extract(         string = text_of_yaml_yml,         pattern =             \"([[:alnum:]]*):\"     )  arglist <- arglist[!is.na(arglist)] arglist <- unique(arglist) arglist <- gsub(pattern = \":\", # remove some characters                     replacement = \"\",                     x = arglist) arglist <- trimws(arglist) # remove whitespace  cat(arglist, sep = \"\\n\") # #                 # tUni_df_descr <- paste0(\"When \", #                 #                         tUni_df$dependent_surv_overall_time_outcome[1], #                 #                         \" is \", #                 #                         tUni_df$x[2], #                 #                         \", there is \", #                 #                         tUni_df$hr_univariable[2], #                 #                         \" times risk than \", #                 #                         \"when \", #                 #                         tUni_df$dependent_surv_overall_time_outcome[1], #                 #                         \" is \", #                 #                         tUni_df$x[1], #                 #                         \".\" #                 # ) # #                 # results5 <- tUni_df_descr eval=FALSE, include=FALSE boot::melanoma rio::export(x = boot::melanoma, file = \"data/melanoma.csv\")  survival::colon rio::export(x = survival::colon, file = \"data/colon.csv\")  # BreastCancerData <- \"https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data\" # # BreastCancerNames <- \"https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.names\" # # BreastCancerData <- read.csv(file = BreastCancerData, header = FALSE, #                 col.names = c(\"id\",\"CT\", \"UCSize\", \"UCShape\", \"MA\", \"SECS\", \"BN\", \"BC\", \"NN\",\"M\", \"diagnosis\") )  library(mlbench)  data(\"BreastCancer\") BreastCancer  rio::export(x = BreastCancer, file = \"data/BreastCancer.csv\") pairwise, eval=FALSE, include=FALSE deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\")) # names(deneme)  mypairwise <-  survminer::pairwise_survdiff(                             formula = survival::Surv(OverallTime, Outcome) ~ TStage,                             data = deneme,                             p.adjust.method = \"BH\"                             )   mypairwise2 <- as.data.frame(mypairwise[[\"p.value\"]]) %>%   tibble::rownames_to_column()  mypairwise2 %>%   tidyr::pivot_longer(cols = -rowname) %>%   dplyr::filter(complete.cases(.)) %>%   dplyr::mutate(description =                             glue::glue(                                 \"The comparison between rowname and name has a p-value of round(value, 2).\"                             )                     ) %>%                     dplyr::select(description) %>%                     dplyr::pull() -> mypairwisedescription  mypairwisedescription <- unlist(mypairwisedescription)  mypairwisedescription <- c( \"In the pairwise comparison of\", mypairwisedescription)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/module_development_jamovi.html",
        "id": "diagrams",
        "dir": "Articles",
        "previous_headings": "Example",
        "what": "Diagrams",
        "title": "Module Development for Jamovi",
        "text": "imports <- c( attachment::att_from_rscripts(“./R”, recursive = TRUE) ) attachment::att_to_desc_from_is(path.d = “DESCRIPTION”, imports = imports, normalize = TRUE, add_remotes = TRUE)",
        "code": "echo=FALSE DiagrammeR::grViz(   diagram = here::here(\"vignettes/graph.gv\"),   height = 200 ) eval=FALSE, include=FALSE, echo=FALSE DiagrammeR::mermaid(   diagram = here::here(\"vignettes/graph.mmd\"),   height = 200 ) Remotes:      easystats/correlation,     easystats/report  # Future Works:  ## ndphillips/FFTrees              # gtsummary              # myvars <- jmvcore::constructFormula(terms = self$options$vars)             # myvars <- jmvcore::decomposeFormula(formula = myvars)             # myvars <- unlist(myvars)             # mytableone2 <- self$data %>%             #     dplyr::select(myvars)             # mytableone2 <- gtsummary::tbl_summary(mytableone2)             # self$results$text2$setContent(mytableone2)        # - name: outcomeLevel     #   title: |     #       Select Event (Death, Recurrence)     #   type: Level     #   variable: (outcome)   , arsenal,  rlang, knitr, remotes, kableExtra,  caret, irr Remotes:   easystats/bayestestR, easystats/performance, easystats/parameters, easystats/report Suggests:     effectsize, emmeans, rmarkdown, igraph, iterators, rms, commonmark, sass   # # # # # #     if (is.null(self$options$dep) || is.null(self$options$group)) # #         return() # # # #     mydata <- self$data # # # #     mydep <- self$data[[self$options$dep]] # # # #     mygroup <- self$data[[self$options$group]] # # # # # #     # klass <- print( # #     #     list( # #     #         \"mydep\" = c(typeof(mydep), class(mydep)), # #     #         \"mygroup\" = c(typeof(mygroup), class(mygroup)) # #     #         ) # #     #     ) # # # # # #     # self$results$text1$setContent(klass) # # # # # #     # plotData <- data.frame(gr = mygroup, # #     #                        dp = mydep) # #     # plotData <- jmvcore::naOmit(plotData) # #     # mydata_changes <- plotData %>% # #     #     dplyr::group_by(gr, dp) %>% # #     #     dplyr::tally(x = .) # #     # # #     # self$results$text2$setContent(mydata_changes) # #     # # #     # plotData <- data.frame(gr = mygroup, # #     #                        dp = mydep) # #     # # #     # plotData <- jmvcore::naOmit(plotData) # #     # # #     # # #     # mydata_changes <- plotData %>% # #     #     dplyr::group_by(gr, dp) %>% # #     #     dplyr::tally(x = .) # #     # # #     # # #     # deneme <- ggalluvial::is_alluvia_form( # #     #     as.data.frame(mydata_changes), # #     #     axes = 1:2, silent = TRUE) # # # #     # nodes = data.frame(\"name\" = # #     #                        c(self$options$group, # #     #                          self$options$dep)) # #     # # #     # links <- mydata_changes # #     # # #     # names(links) = c(\"source\", \"target\", \"value\") # #     # # #     # deneme <- networkD3::sankeyNetwork(Links = links, Nodes = nodes, # #     #                                  Source = \"source\", Target = \"target\", # #     #                                  Value = \"value\", NodeID = \"name\", # #     #                                  fontSize= 12, nodeWidth = 30) # # # # # # # #     # self$results$text3$setContent(deneme) # # # # # # # # # #     # Prepare Data for Plot ---- # # # #     direction <- self$options$direction # # # #     mydata <- self$data # # # #     mydep <- self$data[[self$options$dep]] # # # #     mygroup <- self$data[[self$options$group]] # # # #     contin <- c(\"integer\", \"numeric\", \"double\") # #     categ <- c(\"factor\") # # # # # independent, factor, continuous ---- # # # ggbetweenstats    violin plots    for comparisons between groups/conditions # #     if (direction == \"independent\" && class(mygroup) == \"factor\" && class(mydep) %in% contin) { # #             plotData <- data.frame(gr = mygroup, # #                                    dp = jmvcore::toNumeric(mydep)) # # # # # # # # # # # independent, continuous, continuous ---- # # # ggscatterstats    scatterplots    for correlations between two variables # # # #     if (direction == \"independent\" && class(mygroup) %in% contin && class(mydep) %in% contin) { # #             plotData <- data.frame(gr = jmvcore::toNumeric(mygroup), # #                                    dp = jmvcore::toNumeric(mydep)) # # # # # # # # # # # # # independent, factor, factor ---- # # # ggbarstats    bar charts  for categorical data # #     if (direction == \"independent\" && class(mygroup) == \"factor\" && class(mydep) == \"factor\") { # # # #             plotData <- data.frame(gr = mygroup, # #                                    dp = mydep) # # # # # # # #     # independent, continuous, factor ---- # # # #     if (direction == \"independent\" && class(mygroup) %in% contin && class(mydep) == \"factor\") { # # # #         stop(\"Please switch the values: factor variable should be on x-axis and continuous variable should be on y-axis\") # #         } # # # # # # # #     # repeated, factor, continuous ---- # #     # ggwithinstats     violin plots    for comparisons within groups/conditions # # # # # # # #     if (direction == \"repeated\" && class(mygroup) == \"factor\" && class(mydep) %in% contin) { # #             plotData <- data.frame(gr = mygroup, # #                                    dp = jmvcore::toNumeric(mydep)) # # # # # # # # # #     # repeated, continuous, continuous ---- # #     # rmcorr::rmcorr() # # # # # #     if (direction == \"repeated\" && class(mygroup) %in% contin && class(mydep) %in% contin) { # # # # # #         stop(\"Currently this module does not support repeated measures correlation.\") # # # #     } # # # # # #     # repeated, factor, factor ---- # #     # http://corybrunson.github.io/ggalluvial/ # # # #     if (direction == \"repeated\" && class(mygroup) == \"factor\" && class(mydep) == \"factor\") { # #             plotData <- data.frame(gr = mygroup, # #                                    dp = mydep) # # # # # # # #     # repeated, continuous, factor ---- # # # #     if (direction == \"repeated\" && class(mygroup) %in% contin && class(mydep) == \"factor\") { # # #  #  #  #  #  # # Results ---- #  #  #  # # Send Data to Plot ---- #  # # plotData <- jmvcore::naOmit(plotData) # # image <- self$results$plot # # image$setState(plotData) #  #  # # } #  #  # # , # # # # .plot = function(image, ...) {  # <-- the plot function ---- # # # # # #     if (is.null(self$options$dep) || is.null(self$options$group)) # #         return() # # # # # #     plotData <- image$state # # # #     direction <- self$options$direction # # # #     mydata <- self$data # # # #     mydep <- self$data[[self$options$dep]] # # # #     mygroup <- self$data[[self$options$group]] # # # #     contin <- c(\"integer\", \"numeric\", \"double\") # #     categ <- c(\"factor\") # # # #     # independent, factor, continuous ---- # #     # ggbetweenstats    violin plots    for comparisons between groups/conditions # # # #     if (direction == \"independent\" && class(mygroup) == \"factor\" && class(mydep) %in% contin) { # # # #             plot <- ggstatsplot::ggbetweenstats( # #                 data = plotData, # #                 x = gr, # #                 y = dp # #             ) # #         } # # # #     # independent, continuous, continuous ---- # #     # ggscatterstats    scatterplots    for correlations between two variables # # # # # #         if (direction == \"independent\" && class(mygroup) %in% contin && class(mydep) %in% contin) { # # # #             plot <- ggstatsplot::ggscatterstats( # #                 data = plotData, # #                 x = gr, # #                 y = dp # #             ) # # # #         } # # # #     # independent, factor, factor ---- # #     # ggbarstats    bar charts  for categorical data # # # # # #     if (direction == \"independent\" && class(mygroup) == \"factor\" && class(mydep) == \"factor\") { # # # # # # # #             plot <- ggstatsplot::ggbarstats( # #                                     data = plotData, # #                                     main = gr, # #                                     condition = dp # #                                 ) # #         } # # # #     # repeated, factor, continuous ---- # #     # ggwithinstats     violin plots    for comparisons within groups/conditions # # # # # # if (direction == \"repeated\" && class(mygroup) == \"factor\" && class(mydep) %in% contin) { # # # # # #             plot <- ggstatsplot::ggwithinstats( # #                 data = plotData, # #                 x = gr, # #                 y = dp # #             ) # # # #         } # # # #     # repeated, continuous, continuous ---- # #     # rmcorr::rmcorr() # # # #             # my.rmc <- rmcorr::rmcorr(participant = Subject, # #             #                          measure1 = PacO2, # #             #                          measure2 = pH, # #             #                          dataset = rmcorr::bland1995) # #             # # #             # plot(my.rmc, overall = TRUE) # #             # # #             # ggplot2::ggplot(rmcorr::bland1995, # #             #                 ggplot2::aes(x = PacO2, # #             #                              y = pH, # #             #                              group = factor(Subject), # #             #                              color = factor(Subject) # #             #                 ) # #             # ) + # #             #     ggplot2::geom_point(ggplot2::aes(colour = factor(Subject))) + # #             #     ggplot2::geom_line(ggplot2::aes(y = my.rmc$model$fitted.values), linetype = 1) # # # # # # # #     # repeated, factor, factor ---- # #     # http://corybrunson.github.io/ggalluvial/ # #     # networkD3 # # # # # #     if (direction == \"repeated\" && class(mygroup) == \"factor\" && class(mydep) == \"factor\") { # # # # # #             mydata_changes <- plotData %>% # #                 dplyr::group_by(gr, dp) %>% # #                 dplyr::tally(x = .) # # # # # #             # head(as.data.frame(UCBAdmissions), n = 12) # # # #             # ggalluvial::is_alluvia_form( # #             #     as.data.frame(UCBAdmissions), # #             #     axes = 1:3, silent = TRUE) # # # # # # # #             # plot <- ggplot(as.data.frame(UCBAdmissions), # #             #        aes(y = Freq, axis1 = Gender, axis2 = Dept)) + # #             #     geom_alluvium(aes(fill = Admit), width = 1/12) + # #             #     geom_stratum(width = 1/12, fill = \"black\", color = \"grey\") + # #             #     geom_label(stat = \"stratum\", infer.label = TRUE) + # #             #     scale_x_discrete(limits = c(\"Gender\", \"Dept\"), expand = c(.05, .05)) + # #             #     scale_fill_brewer(type = \"qual\", palette = \"Set1\") + # #             #     ggtitle(\"UC Berkeley admissions and rejections, by sex and department\") # # # # # # # # # # # #             stratum <- ggalluvial::StatStratum # # # #             plot <- ggplot2::ggplot(data = mydata_changes, # #                                     ggplot2::aes(axis1 = gr, # #                        axis2 = dp, # #                        y = n)) + # #                 ggplot2::scale_x_discrete(limits = c(self$options$group, self$options$dep), # #                                  expand = c(.1, .05) # #                 ) + # #                 ggplot2::xlab(self$options$group) + # #                 ggalluvial::geom_alluvium(ggplot2::aes(fill = gr, # #                                   colour = gr # #                 )) + # #                 ggalluvial::geom_stratum() + # #                 ggalluvial::stat_stratum(geom = \"stratum\") + # #                 ggplot2::geom_label(stat = stratum, infer.label = TRUE) + # # # #                 # ggalluvial::geom_stratum(stat = \"stratum\", label.strata = TRUE) + # #                 # ggplot2::geom_text(stat = \"stratum\", infer.label = TRUE) + # #                 # ggplot2::geom_text(label.strata = TRUE) + # #                 # ggalluvial::geom_stratum() # #                 ggplot2::theme_minimal() # #                 # ggplot2::ggtitle(paste0(\"Changes in \", self$options$group)) # #             # # #             # # #             # nodes = data.frame(\"name\" = # #             #                        c(self$options$group, # #             #                          self$options$dep)) # #             # # #             # links <- mydata_changes # #             # # #             # names(links) = c(\"source\", \"target\", \"value\") # #             # # #             # plot <- networkD3::sankeyNetwork(Links = links, Nodes = nodes, # #             #               Source = \"source\", Target = \"target\", # #             #               Value = \"value\", NodeID = \"name\", # #             #               fontSize= 12, nodeWidth = 30) # # # #             # library(networkD3) # #             # nodes = data.frame(\"name\" = # #             #                        c(\"Node A\", # Node 0 # #             #                          \"Node B\", # Node 1 # #             #                          \"Node C\", # Node 2 # #             #                          \"Node D\"))# Node 3 # #             # links = as.data.frame(matrix(c( # #             #     0, 1, 10, # Each row represents a link. The first number # #             #     0, 2, 20, # represents the node being conntected from. # #             #     1, 3, 30, # the second number represents the node connected to. # #             #     2, 3, 40),# The third number is the value of the node # #             #     byrow = TRUE, ncol = 3)) # #             # names(links) = c(\"source\", \"target\", \"value\") # #             # sankeyNetwork(Links = links, Nodes = nodes, # #             #               Source = \"source\", Target = \"target\", # #             #               Value = \"value\", NodeID = \"name\", # #             #               fontSize= 12, nodeWidth = 30) # # # #             # plot <- c(\"Under Construction\") # # # #             # plot <- list(plot1, # #             #              plot2) # # # # # # # #         } # # # # # # # #     print(plot) # #     TRUE # # # # } # # # #         ) # # )   # Packages   Imports:      jmvcore (>= 0.8.5),     R6,     dplyr,     survival,     survminer,     finalfit,     arsenal,     purrr,     glue,     janitor,     ggplot2,     forcats,     ggstatsplot,     tableone,     explore,     tangram,     irr,     rlang,     tidyselect,     knitr    Remotes:     easystats/correlation,     neuropsychology/psycho.R@0.4.0   Suggests:     rmarkdown,     remotes,     devtools,     lubridate,     broom,      GGally,      gridExtra,      Hmisc,      lme4,      magrittr,      mice,      pillar,      pROC,      scales,      stringr,      tibble,      tidyr,      covr,      cmprsk,      readr,      rstan,      survey,      testthat,      backports,      generics,      assertthat,      pkgconfig,      Rcpp,      BH,      plogr,      ellipsis,      gtable,      progress,      RColorBrewer,      reshape,      digest,      lazyeval,      viridisLite,      withr,      Formula,      latticeExtra,      acepack,      data.table,      htmlTable,      viridis,      htmltools,      base64enc,      minqa,      nloptr,      RcppEigen,      mitml,      cli,      crayon,      fansi,      utf8,      vctrs,      farver,      labeling,      munsell,      lifecycle,      stringi,      ggpubr,      maxstat,      survMisc,      jsonlite,      rex,      evaluate,      highr,      markdown,      xfun,      hms,      clipr,      mime,      tinytex,      StanHeaders,      inline,      loo,      pkgbuild,      numDeriv,      mitools,      pkgload,      praise,      zeallot,      colorspace,      prettyunits,      checkmate,      htmlwidgets,      pan,      jomo,      ordinal,      ucminf,      ggrepel,     ggsci,      cowplot,      ggsignif,     polynom,      exactRankTests,     mvtnorm,      KMsurv,      zoo,      km.ci,     xtable,     curl,      openssl,      askpass,      sys,      matrixStats,     callr,      desc,     rprojroot,     processx,      ps,      DBI,     png,      jpeg,      boot,      grid,      snakecase,     caret,     iterators,     timeDate,     foreach,     plyr,     ModelMetrics,     nlme,     reshape2,     recipes,     BradleyTerry2,     e1071,     earth,     fastICA,     gam,     ipred,     kernlab,     klaR,     MASS,     ellipse,     mda,     mgcv,     mlbench,     MLmetrics,     nnet,     party,     pls,     proxy,     randomForest,     RANN,     spls,     subselect,     pamr,     superpc,     Cubist,     rpart,     qgraph,     nFactors,     ppcor,     rstanarm,     MuMIn,     blavaan,                             # Develop    # install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))  # jmvtools::check(\"C://Program Files//jamovi//bin\")  # jmvtools::install(home = \"C://Program Files//jamovi//bin\") #  # jmvtools::install(pkg = \"C://ClinicoPath\", home = \"C://Program Files//jamovi//bin\")  # devtools::build(path = \"C:\\\\ClinicoPathOutput\")  # .libPaths(new = \"C:\\\\ClinicoPathLibrary\")  # devtools::build(path = \"C:\\\\ClinicoPathOutput\", binary = TRUE, args = c('--preclean'))  Sys.setenv(TZ = \"Europe/Istanbul\")  library(\"jmvtools\")  jmvtools::check()  # rhub::check_on_macos()  # rhub::check_for_cran()  # codemetar::write_codemeta()   devtools::check()   # From CRAN # install.packages(\"attachment\") # From github # remotes::install_github(\"ThinkR-open/attachment\")  # If you correctly called the package dependencies in the {roxygen2} skeleton, in your functions, in your Rmarkdown vignettes and in your tests, you only need to run attachment::att_to_description()just before devtools::check(). And that’s it, there is nothing else to remember ! # attachment::att_to_description()    devtools::document()  codemetar::write_codemeta()  # rmarkdown::render('/Users/serdarbalciold/histopathRprojects/ClinicoPath/README.Rmd',  encoding = 'UTF-8', knit_root_dir = '~/histopathRprojects/ClinicoPath', quiet = TRUE)   pkgdown::build_articles() # pkgdown::build_favicons() pkgdown::build_home() pkgdown::build_news() pkgdown::build_reference() # pkgdown::build_reference_index() # pkgdown::build_tutorials()  pkgdown::build_site()  # devtools::github_release()   # gitUpdateCommitPush CommitMessage <- paste(\"updated on \", Sys.time(), sep = \"\") wd <- getwd() gitCommand <- paste(\"cd \", wd, \" \\n git add . \\n git commit --message '\", CommitMessage, \"' --no-verify \\n git push origin master \\n\", sep = \"\") # gitCommand <- paste(\"cd \", wd, \" \\n git add . \\n git commit --no-verify --message '\", CommitMessage, \"' \\n git push origin master \\n\", sep = \"\") system(command = gitCommand, intern = TRUE)    # jmvtools::install() #  # jmvtools::create('SuperAwesome') #  # jmvtools::addAnalysis(name='ttest', title='Independent Samples T-Test') #  # jmvtools::addAnalysis(name='survival', title='survival') #  # jmvtools::addAnalysis(name='correlation', title='correlation') #  # jmvtools::addAnalysis(name='tableone', title='TableOne') #  # jmvtools::addAnalysis(name='crosstable', title='CrossTable') #  #  # jmvtools::addAnalysis(name='writesummary', title='WriteSummary')  # jmvtools::addAnalysis(name='finalfit', title='FinalFit')  # jmvtools::addAnalysis(name='multisurvival', title='FinalFit Multivariate Survival')  # jmvtools::addAnalysis(name='report', title='Report General Features')  # jmvtools::addAnalysis(name='frequencies', title='Frequencies')  # jmvtools::addAnalysis(name='statsplot', title='GGStatsPlot')  # jmvtools::addAnalysis(name='statsplot2', title='GGStatsPlot2')  # jmvtools::addAnalysis(name='statsplotbetween', title='Stats Plot Between')  # jmvtools::addAnalysis(name='competingsurvival', title='Competing Survival')   # jmvtools::addAnalysis(name='scat2', title='scat2')  # jmvtools::addAnalysis(name='decisioncalculator', title='Decision Calculator')  # jmvtools::addAnalysis(name='agreement', title='Interrater Intrarater Reliability')  # jmvtools::addAnalysis(name='cluster', title='Cluster Analysis')  # jmvtools::addAnalysis(name='tree', title='Decision Tree') #  # jmvtools::addAnalysis(name='oddsratio', title='Odds Ratio Table and Plot')  # jmvtools::addAnalysis(name='roc', title='ROC')  # jmvtools::addAnalysis(name = \"icccoeff\", title = \"ICC coefficients\")  # jmvtools::addAnalysis(name = \"gtsummary\", title = \"Tables via gtsummary\")  # jmvtools::addAnalysis(name = \"alluvial\", title = \"Alluvial Diagrams\")    Sys.unsetenv(\"R_PROFILE_USER\") devtools::check()  devtools::install()  # jmvtools::check() jmvtools::install()  formula <- jmvcore::constructFormula(terms = c(\"A\", \"B\", \"C\"), dep = \"D\")  jmvcore::constructFormula(terms = list(\"A\", \"B\", c(\"C\", \"D\")), dep = \"E\")  jmvcore::constructFormula(terms = \"A B\")   jmvcore::constructFormula(terms = list(\"A\", \"B\", \"C\"))  vars <- jmvcore::decomposeFormula(formula = formula)   unlist(vars)  cformula <- jmvcore::composeTerm(components = formula)  jmvcore::composeTerm(\"A B\")  jmvcore::composeTerm(components = c(\"A\", \"B\", \"C\"))  jmvcore::decomposeTerm(term = c(\"A\", \"B\", \"C\"))  jmvcore::decomposeTerm(term = formula)  jmvcore::decomposeTerm(term = cformula)    composeTerm <- jmvcore::composeTerm(components = c(\"A\", \"B\", \"C\"))  jmvcore::decomposeTerm(term = composeTerm)     BreastCancer <- readr::read_csv(file = \"/Users/serdarbalciold/histopathRprojects/ClinicoPath/data/BreastCancer.csv\")  usethis::use_data(BreastCancer)  BreastCancer <- readr::read_csv(file = \"/Users/serdarbalciold/histopathRprojects/ClinicoPath/data/BreastCancer.csv\")  usethis::use_data(BreastCancer)  colon <- readr::read_csv(file =  \"/Users/serdarbalciold/histopathRprojects/ClinicoPath/data/colon.csv\")  usethis::use_data(colon)   melanoma <- readr::read_csv(file =  \"/Users/serdarbalciold/histopathRprojects/ClinicoPath/data/melanoma.csv\")  usethis::use_data(melanoma)   rocdata <- readr::read_csv(file =  \"/Users/serdarbalciold/histopathRprojects/ClinicoPath/data/rocdata.csv\")  usethis::use_data(rocdata)  histopathology <- readr::read_csv(file =  \"/Users/serdarbalciold/histopathRprojects/ClinicoPath/data/histopathology.csv\")  usethis::use_data(histopathology)     ## force git   # gitUpdateCommitPush CommitMessage <- paste(\"updated on \", Sys.time(), sep = \"\") wd <- getwd() gitCommand <- paste(\"cd \", wd, \" \\n git add . \\n git commit --message '\", CommitMessage, \"' \\n git push origin master \\n\", sep = \"\") system(command = gitCommand, intern = TRUE)     ## update project for release    readyfunctions <- c(     \"refs\",     # \"^agreement\",     # \"^competingsurvival\",     # \"^correlation\",     \"^crosstable\",     # \"^decision\",     # \"^decisioncalculator\",     # \"^icccoeff\",     \"^multisurvival\",     \"^oddsratio\",     # \"^pairchi2\",     \"^reportcat\",     # \"^roc\",     \"^statsplot2\",     \"^summarydata\",     \"^survival\",     \"^tableone\"     # \"^tree\",     # \"^utils-pipe\"     # \"^vartree\" )   readyfunctions <- paste0(readyfunctions, collapse = \"|\")  files_R <-     list.files(path = here::here(\"R\"),                pattern = readyfunctions,                full.names = TRUE)  files_jamovi <-     list.files(         path = here::here(\"jamovi\"),         pattern = readyfunctions,         full.names = TRUE     )  files_data <-     list.files(         path = here::here(\"data\"),         full.names = TRUE     )   file.copy(from = files_R,           to = \"~/ClinicoPath/R/\",           overwrite = TRUE)   file.copy(from = files_jamovi,           to = \"~/ClinicoPath/jamovi/\",           overwrite = TRUE)   file.copy(from = files_data,           to = \"~/ClinicoPath/data/\",           overwrite = TRUE)  file.copy(from = files_data,           to = \"~/histopathRprojects/ClinicoPath/inst/extdata/\",           overwrite = TRUE)   # Example    deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  library(magrittr)  corx <- deneme %>%                 dplyr::select(Age, OverallTime) %>%                  stats::cor(method = \"spearman\") %>%                 report::report()            inherits(deneme$Sex, \"character\")    ggstatsplot::ggbetweenstats(data = deneme,                             x = Sex,                             y = Age,                             type = \"p\")  ClinicoPath::statsplot2(     data = deneme,     dep = Age,     group = Sex)       devtools::install(upgrade = FALSE, quick = TRUE) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  # library(\"ClinicoPath\")  deneme$Age <- as.numeric(as.character(deneme$Age))  ClinicoPath::writesummary(data = deneme, vars = Age)  ggstatsplot::normality_message(deneme$Age, \"Age\")   ClinicoPath::writesummary(     data = deneme,     vars = Age)   devtools::install(upgrade = FALSE, quick = TRUE) library(dplyr) library(survival) library(finalfit) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\")) ClinicoPath::finalfit(data = deneme,                       explanatory = Sex,                       outcome = Outcome,                       overalltime = OverallTime)  devtools::install(upgrade = FALSE, quick = TRUE) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  ClinicoPath::decision(     data = deneme,     gold = Outcome,     goldPositive = \"1\",     newtest = Smoker,     testPositive = \"TRUE\")  ClinicoPath::decision(     data = deneme,     gold = LVI,     goldPositive = \"Present\",     newtest = PNI,     testPositive = \"Present\")  deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\")) ggstatsplot::ggbetweenstats(data = deneme,                              x = LVI,                             y = Age)    devtools::install(upgrade = FALSE, quick = TRUE) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\")) ClinicoPath::statsplot(     data = deneme,     dep = Age,     group = Smoker)  mytable <- table(deneme$Outcome, deneme$Smoker)  caret::confusionMatrix(mytable) confusionMatrix(pred, truth) confusionMatrix(xtab, prevalence = 0.25)  levels(deneme$Outcome)  mytable[1,2]  d <- \"0\"  mytable[d, \"FALSE\"]  mytable[[0]]   formula <- jmvcore::constructFormula(terms = c(\"A\", \"B\", \"C\"))  jmvcore::constructFormula(terms = list(\"A\", \"B\", \"C\"))  vars <- jmvcore::decomposeFormula(formula = formula)   vars <- jmvcore::decomposeTerms(vars)   vars <- unlist(vars)  formula <- as.formula(formula)   my_group <- \"lvi\"  jmvcore::composeTerm(my_group)   my_dep <- \"age\"  formula <- paste0('x = ', group, 'y = ', dep) myformula <- as.formula(formula)  myformula <- glueformula::gf({my_group}, {my_dep})  myformula <- glue::glue( 'x = ' , {my_group}, ', y = ' , {my_dep})  myformula <- jmvcore::composeTerm(myformula)    deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  library(survival) km_fit <- survfit(Surv(OverallTime, Outcome) ~ LVI, data = deneme)  library(dplyr) km_fit_median_df <- summary(km_fit) km_fit_median_df <- as.data.frame(km_fit_median_df$table) %>%                 janitor::clean_names(dat = ., case = \"snake\") %>%                 tibble::rownames_to_column(.data = ., var = \"LVI\")   library(dplyr) library(survival)  deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  myoveralltime <- deneme$OverallTime myoutcome <- deneme$Outcome myexplanatory <- deneme$LVI  class(myoveralltime) class(myoutcome) typeof(myexplanatory)  is.ordered(myexplanatory)  formula2 <- jmvcore::constructFormula(terms = \"myexplanatory\") # formula2 <- jmvcore::decomposeFormula(formula = formula2) # formula2 <- paste(\"\", formula2) # formula2 <- as.formula(formula2) formula2 <- jmvcore::composeTerm(formula2)   formulaL <- jmvcore::constructFormula(terms = \"myoveralltime\") # formulaL <- jmvcore::decomposeFormula(formula = formulaL)  formulaR <- jmvcore::constructFormula(terms = \"myoutcome\") # formulaR <- jmvcore::decomposeFormula(formula = formulaR)  formula <- paste(\"Surv(\", formulaL, \",\", formulaR, \")\") # formula <- jmvcore::composeTerm(formula) # formula <- as.formula(formula) # jmvcore::constructFormula(terms = c(formula, formula2))  deneme %>%   finalfit::finalfit(formula, formula2) -> tUni  tUni  library(dplyr) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  results <- deneme %>%                 ggstatsplot::ggbetweenstats(LVI, Age) results  mydep <- deneme$Age mygroup <- deneme$LVI   mygroup <- jmvcore::constructFormula(terms = \"mygroup\") mygroup <- jmvcore::composeTerm(mygroup)  mydep <- jmvcore::constructFormula(terms = \"mydep\") mydep <- jmvcore::composeTerm(mydep)   # not working # eval(mygroup) # rlang::eval_tidy(mygroup) # !!mygroup # {{mygroup}} # sym(mygroup) # quote(mygroup) # enexpr(mygroup)  mygroup <- jmvcore::constructFormula(terms = \"mygroup\") mydep <- jmvcore::constructFormula(terms = \"mydep\")  formula1 <- paste(mydep) formula1 <- jmvcore::composeTerm(formula1)   mygroup <- paste(mygroup) mygroup <- jmvcore::composeTerm(mygroup)  mydep <- deneme$Age mygroup <- deneme$LVI  mydep <- jmvcore::resolveQuo(jmvcore::enquo(mydep)) mygroup <- jmvcore::resolveQuo(jmvcore::enquo(mygroup))  mydata2 <- data.frame(mygroup=mygroup, mydep=mydep)  results <- mydata2 %>%                 ggstatsplot::ggbetweenstats( x = mygroup, y = mydep  )  results    myformula <- glue::glue('x = ', {mygroup}, ', y = ' , {mydep})  myformula <- jmvcore::composeTerm(myformula)  myformula <- as.formula(myformula)    mydep2 <- quote(mydep) mygroup2 <- quote(mygroup)   results <- deneme %>%                 ggstatsplot::ggbetweenstats(!!mygroup2, !!mydep2) results   formula <- jmvcore::constructFormula(terms = c(\"myoveralltime\", \"myoutcome\"))  vars <- jmvcore::decomposeFormula(formula = formula)    explanatory <- jmvcore::constructFormula(terms = c(\"explanatory\"))      explanatory <- jmvcore::decomposeFormula(formula = explanatory)  explanatory <- unlist(explanatory)  myformula <- paste(\"Surv(\", vars[1], \", \", vars[2], \")\")    deneme %>% finalfit::finalfit(myformula, explanatory) -> tUni   deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))   table3 <-   tangram::html5(     tangram::tangram(       \"Death ~ LVI + PNI + Age\", deneme),     fragment=TRUE,     # style = \"hmisc\",     style = \"nejm\",     # inline=\"nejm.css\",     caption = \"HTML5 Table\",     id=\"tbl3\")  table3  mydep <- deneme$Age mygroup <- deneme$Death   formulaR <- jmvcore::constructFormula(terms =  c(\"LVI\", \"PNI\", \"Age\"))  formulaL <- jmvcore::constructFormula(terms = \"Death\")  formula <- paste(formulaL, '~', formulaR)  # formula <- as.formula(formula)  sty <- jmvcore::composeTerm(components = \"nejm\")  gr <- jmvcore::composeTerm(components = \"Death\")   table <- tangram::html5(     tangram::tangram(formula, deneme                      ),     fragment=TRUE,     # style = \"hmisc\",     # style = \"nejm\",     style = sty,     # inline=\"nejm.css\",     caption = paste0(\"HTML5 Table \", gr),     id=\"tbl4\")  table    deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))   mydata <- deneme  formula2 <- jmvcore::constructFormula(terms = c(\"LVI\", \"PNI\", \"Age\"))  formulaR <- jmvcore::constructFormula(terms = \"Death\")  formulaR <- jmvcore::toNumeric(formulaR)    plot <-                 finalfit::or_plot(                     .data = mydata,                     dependent = formulaR,                     explanatory = formula2,                     remove_ref = FALSE,                     table_text_size = 4,                     title_text_size = 14,                     random_effect = NULL,                     factorlist = NULL,                     glmfit = NULL,                     confint_type = NULL,                     breaks = NULL,                     column_space = c(-0.5, 0, 0.5),                     dependent_label = \"Death\",                     prefix = \"\",                     suffix = \": OR (95% CI, p-value)\",                     table_opts = NULL,                     plot_opts = list(                     ggplot2::xlab(\"OR, 95% CI\"),                     ggplot2::theme(                     axis.title = ggplot2::element_text(size = 12)                     )                     )                     )    # Other Codes    ## arsenal   tab1 <- arsenal::tableby(~ Age + Sex, data = deneme)  results <- summary(tab1)   # results$object # results$control # results$totals # results$hasStrata # results$text # results$pfootnote # results$term.name #  # tab1$Call #  # tab1$control  tab1$tables # this is where results lie      ## define survival time   mydata$int <- lubridate::interval(   lubridate::ymd(mydata$SurgeryDate),   lubridate::ymd(mydata$LastFollowUpDate)   ) mydata$OverallTime <- lubridate::time_length(mydata$int, \"month\") mydata$OverallTime <- round(mydata$OverallTime, digits = 1)      ## Multivariate Analysis Survival    library(finalfit) library(survival) explanatoryMultivariate <- explanatoryKM dependentMultivariate <- dependentKM  mydata %>%   finalfit(dependentMultivariate, explanatoryMultivariate) -> tMultivariate  knitr::kable(tMultivariate, row.names=FALSE, align=c(\"l\", \"l\", \"r\", \"r\", \"r\", \"r\"))   # Find arguments in yaml  list_of_yaml <- c(     list.files(path = \"~/histopathRprojects/ClinicoPath-Jamovi--prep/jmv\",                pattern = \"\\\\.yaml$\",                full.names = TRUE,                all.files = TRUE,                include.dirs = TRUE,                recursive = TRUE     ) )   text_of_yaml_yml <- purrr::map(     .x = list_of_yaml,     .f = readLines )  text_of_yaml_yml <- as.vector(unlist(text_of_yaml_yml))   arglist <-     stringr::str_extract(         string = text_of_yaml_yml,          pattern =              \"([[:alnum:]]*):\"     )  arglist <- arglist[!is.na(arglist)] arglist <- unique(arglist) arglist <- gsub(pattern = \":\", # remove some characters                     replacement = \"\",                     x = arglist) arglist <- trimws(arglist) # remove whitespace  cat(arglist, sep = \"\\n\")   # #                 # tUni_df_descr <- paste0(\"When \", #                 #                         tUni_df$dependent_surv_overall_time_outcome[1], #                 #                         \" is \", #                 #                         tUni_df$x[2], #                 #                         \", there is \", #                 #                         tUni_df$hr_univariable[2], #                 #                         \" times risk than \", #                 #                         \"when \", #                 #                         tUni_df$dependent_surv_overall_time_outcome[1], #                 #                         \" is \", #                 #                         tUni_df$x[1], #                 #                         \".\" #                 # ) # #                 # results5 <- tUni_df_descr    boot::melanoma rio::export(x = boot::melanoma, file = \"data/melanoma.csv\")  survival::colon rio::export(x = survival::colon, file = \"data/colon.csv\")  # BreastCancerData <- \"https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.data\" #  # BreastCancerNames <- \"https://archive.ics.uci.edu/ml/machine-learning-databases/breast-cancer-wisconsin/breast-cancer-wisconsin.names\" #  # BreastCancerData <- read.csv(file = BreastCancerData, header = FALSE, #                 col.names = c(\"id\",\"CT\", \"UCSize\", \"UCShape\", \"MA\", \"SECS\", \"BN\", \"BC\", \"NN\",\"M\", \"diagnosis\") )  library(mlbench)  data(\"BreastCancer\") BreastCancer  rio::export(x = BreastCancer, file = \"data/BreastCancer.csv\")    deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\")) # names(deneme)  mypairwise <-  survminer::pairwise_survdiff(                             formula = survival::Surv(OverallTime, Outcome) ~ TStage,                             data = deneme,                             p.adjust.method = \"BH\"                             )   mypairwise2 <- as.data.frame(mypairwise[[\"p.value\"]]) %>%    tibble::rownames_to_column()  mypairwise2 %>%    tidyr::pivot_longer(cols = -rowname) %>%    dplyr::filter(complete.cases(.)) %>%    dplyr::mutate(description =                             glue::glue(                                 \"The comparison between {rowname} and {name} has a p-value of {round(value, 2)}.\"                             )                     ) %>%                      dplyr::select(description) %>%                     dplyr::pull() -> mypairwisedescription  mypairwisedescription <- unlist(mypairwisedescription)  mypairwisedescription <- c( \"In the pairwise comparison of\", mypairwisedescription)                # mydata <- self$data              # mydep <- self$data[[self$options$dep]]             # mygroup <- self$data[[self$options$group]]             #             #             # plotData <- data.frame(gr = mygroup, dp = jmvcore::toNumeric(mydep))             # plotData <- jmvcore::naOmit(plotData)             #             # image <- self$results$plot             #             # image$setState(plotData)               # self$results$text1$setContent(plotData)               # mydepType <- data.frame(vclass = class(mydep),             #                         vtypeof = typeof(mydep),             #                         vordered = is.ordered(mydep),             #                         vfactor = is.factor(mydep),             #                         vnumeric = is.numeric(mydep),             #                         vdouble = is.double(mydep),             #                         vcharacter = is.character(mydep),             #                         vdate = lubridate::is.Date(mydep),             #                         vdate2 = is.na.POSIXlt(mydep)             #                         )             # mygroupType <- class(mygroup)             # variableTypes <- list(mydepType, mygroupType)             # self$results$text1$setContent(variableTypes)              # plotData <- image$state               # https://indrajeetpatil.github.io/ggstatsplot/             # ggbetweenstats    violin plots    for comparisons between groups/conditions             # ggwithinstats     violin plots    for comparisons within groups/conditions             #             # ggdotplotstats    dot plots/charts    for distribution about labeled numeric variable             #             # ggbarstats    bar charts  for categorical data             #             # ggscatterstats    scatterplots    for correlations between two variables              # http://corybrunson.github.io/ggalluvial/               # plot <- ggplot(plotData, aes(x = gr,             #                              y = dp)) +             #     geom_point()              # plot <- plotData %>%             #     ggstatsplot::ggbetweenstats(             #         x = gr,             #         y = dp             #         )  library(readr) BreastCancer <- read_csv(\"data/BreastCancer.csv\") View(BreastCancer)    mytarget <- \"Class\" myvars <- c(\"Cl.thickness\",             \"Cell.size\",             \"Cell.shape\",             \"Marg.adhesion\",             \"Epith.c.size\",             \"Bare.nuclei\",             \"Bl.cromatin\",             \"Normal.nucleoli\",             \"Mitoses\")  mydata <- BreastCancer %>%      select(mytarget, myvars)  formula <- jmvcore::constructFormula(terms = mytarget)  formula <- paste(formula, '~ .')  formula <- as.formula(formula)   # Create an FFTrees object from the data  FFTrees.fft <- FFTrees::FFTrees(      formula = formula,      data = mydata      )   # Plot the best tree applied to the test data  plot2 <- plot(FFTrees.fft,       data = mydata       # ,       # main = \"Heart Disease\",       # decision.labels = c(\"Healthy\", \"Disease\")                  )   devtools::install(upgrade = FALSE, quick = TRUE)   deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))   ClinicoPath::statsplotbetween(     data = deneme,     dep = LVI,     group = PNI)  myirr <- data.frame(           Rater1 = c(0L,1L,1L,0L,0L,0L,1L,1L,1L,0L,1L,                  1L,1L,1L,1L,0L,NA,1L,1L,0L,0L,1L,1L,1L,1L,1L,0L,                  1L,1L,1L,1L,0L,1L,1L,1L,1L,1L,0L,0L,1L,1L,1L,                  1L,1L,0L,1L,1L,1L,0L,0L,1L,1L,1L,0L,1L,1L,1L,0L,                  1L,1L,0L,1L,0L,1L,1L,0L,0L,1L,0L,1L,1L,1L,0L,0L,                  0L,0L,1L,1L,1L,0L,0L,1L,1L,1L,1L,0L,0L,0L,1L,0L,                  0L,1L,1L,0L,1L,1L,0L,1L,1L,0L,1L,1L,0L,1L,1L,                  0L,1L,1L,1L,0L,1L,1L,1L,0L,1L,1L,0L,0L,1L,0L,1L,                  1L,1L,0L,1L,1L,1L,1L,1L,1L,1L,1L,0L,1L,1L,1L,1L,                  1L,1L,1L,1L,1L,1L,0L,1L,1L,1L,1L,1L,1L,1L,0L,0L,                  1L,0L,1L,1L,1L,1L,1L,0L,0L,1L,1L,1L,1L,1L,0L,                  0L,0L,1L,1L,0L,1L,1L,0L,1L,0L,1L,1L,1L,0L,1L,1L,                  1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,                  0L,0L,1L,1L,1L,1L,0L,0L,1L,1L,0L,1L,1L,1L,0L,1L,                  0L,1L,1L,1L,1L,0L,0L,0L,0L,1L,0L,1L,1L,1L,0L,                  0L,1L,1L,1L,0L,1L,0L,0L,0L,1L,1L,1L,0L,1L,0L,0L,                  0L,1L,1L),           Rater2 = c(0L,0L,0L,0L,0L,0L,0L,0L,0L,0L,0L,                  0L,0L,0L,0L,0L,0L,0L,0L,0L,0L,0L,0L,1L,1L,1L,0L,                  1L,1L,1L,1L,0L,1L,1L,1L,1L,1L,0L,0L,1L,1L,1L,                  1L,1L,0L,1L,1L,1L,0L,0L,1L,1L,1L,0L,1L,1L,1L,0L,                  1L,1L,0L,1L,0L,1L,1L,0L,0L,1L,0L,1L,1L,1L,0L,0L,                  0L,0L,1L,1L,1L,0L,0L,1L,1L,1L,1L,0L,0L,0L,1L,0L,                  0L,1L,1L,0L,1L,1L,0L,1L,1L,0L,1L,1L,0L,1L,1L,                  0L,1L,1L,1L,0L,1L,1L,1L,0L,1L,1L,0L,0L,1L,0L,1L,                  1L,1L,0L,1L,1L,1L,1L,1L,1L,1L,1L,0L,1L,1L,1L,1L,                  1L,1L,1L,1L,1L,1L,0L,1L,1L,1L,1L,1L,1L,1L,0L,0L,                  1L,0L,1L,1L,1L,1L,1L,0L,0L,1L,1L,1L,1L,1L,0L,                  0L,0L,1L,1L,0L,1L,1L,0L,1L,0L,1L,1L,1L,0L,1L,1L,                  1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,                  0L,0L,1L,1L,1L,1L,0L,0L,1L,1L,0L,1L,1L,1L,1L,1L,                  1L,1L,1L,1L,1L,1L,1L,1L,1L,1L,0L,1L,1L,1L,0L,                  0L,1L,1L,1L,0L,1L,0L,0L,0L,1L,1L,1L,0L,1L,0L,0L,                  0L,1L,1L) )  myirr <- myirr %>%      dplyr::mutate(         RaterA = dplyr::case_when(             Rater1 == 0 ~ \"Negative\",             Rater1 == 1 ~ \"Positive\"         )     ) %>%      dplyr::mutate(         RaterB = dplyr::case_when(             Rater2 == 0 ~ \"Negative\",             Rater2 == 1 ~ \"Positive\"         )     ) %>%      dplyr::select(RaterA, RaterB) %>%      mutate(RaterA = as.factor(RaterA)) %>%      mutate(RaterB = as.factor(RaterB))  table <- myirr %$%  table(RaterA, RaterB)  mymatrix <- caret::confusionMatrix(table, positive = \"Positive\") mymatrix  caret::sensitivity(table, positive = \"Positive\")   mymatrix2 <- caret::confusionMatrix(table, positive = \"Positive\", prevalence = 0.25) mymatrix2    dat <- as.table(                 matrix(c(670,202,74,640),                        nrow = 2,                        byrow = TRUE)                 )              colnames(dat) <- c(\"Dis+\",\"Dis-\")             rownames(dat) <- c(\"Test+\",\"Test-\")              rval <- epiR::epi.tests(dat, conf.level = 0.95)              rval <- list(                 dat,                 rval,                 print(rval),                 summary(rval)                          )  devtools::install(upgrade = FALSE, quick = TRUE) library(dplyr)  deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  ratings <- deneme %>%      dplyr::select(LVI, PNI, Age, ID)   f <- unlist(lapply(ratings, class))  any(f == \"numeric\")  all(f == \"numeric\")   xtitle <- names(ratings)[1] ytitle <- names(ratings)[2]  result <- table(ratings[,1], ratings[,2],                 dnn = list(xtitle, ytitle))  table(ratings)    result1 <- irr::agree(ratings)   result2 <- irr::kappa2(ratings)   ClinicoPath::agreement(     data = deneme,     vars = c(LVI,PNI) )   result2 <- irr::kappam.fleiss(                     ratings = ratings,                     exact = FALSE,                     detail = TRUE)     deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  mytree <- vtree::vtree(deneme, \"LVI PNI\")  # write(mytree[[\"x\"]][[\"diagram\"]],  #       file = here::here(\"/_tododata/trial1.gv\"))  # DiagrammeR::grViz(diagram = here::here(\"/_tododata/trial1.gv\"))  diagram <- mytree[[\"x\"]][[\"diagram\"]]  mytree2 <- DiagrammeR::grViz(diagram = diagram)   print(mytree2)    # Packages for Development      ## rpkgtools   devtools::install_github(\"IndrajeetPatil/rpkgtools\")    ## available   Check if a package name is available to use https://docs.ropensci.org/available   https://github.com/r-lib/available    available::available(\"clinicopath\") available::available(\"lens2r\")      ## bench   High Precision Timing of R Expressions http://bench.r-lib.org/  https://github.com/r-lib/bench       ## desc   Manipulate DESCRIPTION files https://github.com/r-lib/desc    ## pkgverse  pkgverse: Build a Meta-Package Universe https://pkgverse.mikewk.com/    ## pkgbuild  pkgbuild: Find Tools Needed to Build R Packages https://github.com/r-lib/pkgbuild   ## pkgload  pkgload: Simulate Package Installation and Attach https://github.com/r-lib/pkgload   ## rcmdcheck  rcmdcheck: Run 'R CMD check' from 'R' and Capture Results https://github.com/r-lib/rcmdcheck     ## remotes   ## sessioninfo  Print Session Information  https://github.com/r-lib/sessioninfo    ## \"covr     ## \"exampletestr   ## \"covrpage\",   ## \"gramr\",   ## \"lintr\",   ## \"goodpractice\",   ## \"pkgdown\",   ## \"usethis\",   ## \"testthat\",   ## \"spelling\",   ## \"RTest\",  https://towardsdatascience.com/rtest-pretty-testing-of-r-packages-50f50b135650   ## \"rhub\",   ## \"roxygen2\",   ## \"sinew\",   ## \"styler\",    ## \"vdiffr\"     ## \"attachment (https://github.com/ThinkR-open/attachment) ## \"covrpage (https://github.com/yonicd/covrpage) ## \"defender (https://github.com/ropenscilabs/defender) ## \"gramr (https://github.com/ropenscilabs/gramr) ## \"packagemetrics (https://github.com/ropenscilabs/packagemetrics) ## \"pRojects (https://github.com/lockedata/pRojects) ## \"revdepcheck (https://github.com/r-lib/revdepcheck) ## \"roxygen2Comment (https://github.com/csgillespie/roxygen2Comment) ## \"roxygen2md (https://github.com/r-lib/roxygen2md) ## \"testdown (https://github.com/ThinkR-open/testdown) ## \"tic (https://github.com/ropenscilabs/tic)                  # Table1 <- table(mydata[[testVariable]], mydata[[goldVariable]])               # Table1 <- mydata %>%             #     janitor::tabyl(.data[[testVariable]], .data[[goldVariable]]) %>%             #     janitor::adorn_totals(dat = ., where = c(\"row\", \"col\")) %>%             #     janitor::adorn_percentages(dat = ., denominator = \"row\") %>%             #     janitor::adorn_percentages(dat = ., denominator = \"col\") %>%             #     janitor::adorn_pct_formatting(dat = ., rounding = \"half up\", digits = 1) %>%             #     janitor::adorn_ns(dat = .) %>%             #     janitor::adorn_title(\"combined\")             # results1 <- Table1                  # results1 <- summary(km_fit)$table                  # km_fit_median_df <- summary(km_fit)                 # km_fit_median_df <- as.data.frame(km_fit_median_df$table) %>%                 #     janitor::clean_names(dat = ., case = \"snake\") %>%                 #     tibble::rownames_to_column(.data = .)                  # results1 <- tibble::as_tibble(results1,                 #                              .name_repair = \"minimal\") %>%                 #     janitor::clean_names(dat = ., case = \"snake\") %>%                 #     tibble::rownames_to_column(.data = ., var = self$options$explanatory)   table2 <- matrix(c(80, 20, 30, 70), nrow = 2, ncol = 2, byrow = TRUE, dimnames = list(c(\"Positive\", \"Negative\"), c(\"Positive\",\"Negative\")))              table3 <- as.table(table2)              names(attributes(table3)$dimnames) <- c(\"Test\",\"Gold Standart\")  caretresult <- caret::confusionMatrix(table3, mode = \"everything\")    table3 <- matrix(c(80L, 20L, 25L, 30L, 70L, 75L), nrow = 2, ncol = 3, byrow = TRUE)   # RVAideMemoire::chisq.multcomp() RVAideMemoire::fisher.multcomp()  result1 <- RVAideMemoire::chisq.multcomp(table3)  result1 <- result1[[\"p.value\"]]   result1 <- as.data.frame(result1) %>%                                 tibble::rownames_to_column()  result1 <- result1 %>%     tidyr::pivot_longer(cols = -rowname) %>%     dplyr::filter(complete.cases(.))     myfun <- function(i,j) {     if(!is.na(result1[i,j])){     paste0(     dimnames(result1)[[1]][i], \" vs \", dimnames(result1)[[2]][j], \" p= \",     result1[i,j])     } }  for (i in 1:dim(result1)[1]) { for (j in 1:dim(result1)[2]) {     des <- myfun(i,j)     if(!is.null(des)) print(des) } }   myfun1 <- function(i,j) {     if(!is.na(result1[i,j])){ dimnames(result1)[[1]][i]     } }   for (i in 1:dim(result1)[1]) { for (j in 1:dim(result1)[2]) {     des <- myfun1(i,j)     if(!is.null(des)) print(des) } }      myfun(3,3)  myfun(1,2)   dimnames(result1)[[1]][2]   RVAideMemoire::fisher.multcomp(table3)   # rmngb::pairwise.chisq.test(x, ...)  rmngb::pairwise.fisher.test(x, ...)   library(rmngb) x <- sample(1:2, 1e3, TRUE) g <- sample(1:4, 1e3, TRUE) result2 <- rmngb::pairwise.chisq.test(x, g) tab <- table(g, x)  resultrmngb <- rmngb::pairwise.fisher.test(tab, p.adj = \"bonf\")  result2[[\"p.value\"]] resultrmngb[[\"p.value\"]]  rmngb::pairwise.chisq.test(tab)        formula <- jmvcore::constructFormula(terms = self$options$vars) formula <- paste('~', formula) formula <- as.formula(formula) table1 <- arsenal::tableby(formula, self$data, total = TRUE, digits = 1, digits.count = 1 ) myarsenal <- summary(table1, text = \"html\") myarsenal <- kableExtra::kable(myarsenal, format = \"html\", digits = 1, escape = TRUE) %>% kableExtra::kable_styling(kable_input = ., bootstrap_options = \"striped\", full_width = F, position = \"left\")    library(dplyr)  deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))   varsName <- c(\"LVI\", \"PNI\")  tablelist <- list()                  for (i in 1:length(varsName)) {                      var <- varsName[i]                                                               table <- deneme %>%                         janitor::tabyl(dat = ., var) %>%                         janitor::adorn_totals(\"row\") %>%                         janitor::adorn_pct_formatting(dat = .)                      tablelist[[i]] <- table                  }  tablelist                   data <- self$data              vars <- self$options$vars              facs <- self$options$facs              target <- self$options$target              # data <- jmvcore::select(data, c(vars, facs, target))               if ( ! is.null(vars))             for (var in vars)                 data[[var]] <- jmvcore::toNumeric(data[[var]])              if ( ! is.null(facs))             for (fac in facs)                 data[[fac]] <- as.factor(data[[fac]])               data[[target]] <- as.factor(data[[target]])              data <- jmvcore::naOmit(data)                                                                               # TODO              # todo <- glue::glue(             #     \"This Module is still under development             #     -             #     -             #     \"             # )              # self$results$todo$setContent(todo)              # if (nrow(self$data) == 0)             #     stop('Data contains no (complete) rows')               # if (is.null(self$options$vars) || is.null(self$options$target))             #     return()               # prepare data for explore ----             # https://cran.r-project.org/web/packages/explore/vignettes/explore.html               # result1 <- iris %>% explore::explain_tree(target = Species)             #             # self$results$text1$setContent(result1)               # image <- self$results$plot              # image$setState(plotData)                # from https://forum.jamovi.org/viewtopic.php?f=2&t=1287             # library(caret)             # library(partykit)             # detach(\"package:partykit\", unload=TRUE)             # library(party)              # Conditional Trees              # set.seed(3456)             # model <- train(             #     yvar ~ .,             #     data = df,             #     method = 'ctree2',             #     trControl = trainControl(\"cv\", number = 10, classProbs = FALSE),             #     tuneGrid = expand.grid(maxdepth = 3, mincriterion = 0.95)             # )             # plot(model$finalModel)             #             # t(sapply(unique(where(model$finalModel)), function(x) {             #     n <- nodes(model$finalModel, x)[[1]]             #     yvar <- df[as.logical(n$weights), \"yvar\"]             #     cbind.data.frame(\"Node\" = as.integer(x),             #                      psych::describe(yvar, quant=c(.25,.50,.75), skew = FALSE))             # }))                                                                                # data <- private$.cleanData()              # vars <- self$options$vars             # facs <- self$options$facs             # target <- self$options$target              # tree1 <- data %>%             #     explore::explain_tree(target = .data[[target]])                 # if (is.null(self$options$vars) || is.null(self$options$target))             #     return()               # varsName <- self$options$vars             #             # facsName <- self$options$facs             #             # targetName <- self$options$target             #             # data <- jmvcore::select(self$data, c(varsName, facsName, targetName))             #             # data[[varsName]] <- jmvcore::toNumeric(data[[varsName]])             #             # for (fac in facsName)             #     data[[facsName]] <- as.factor(data[[facsName]])             #             # data <- jmvcore::naOmit(data)                 # tree1 <- data %>%             #     explore::explain_tree(target = .data[[targetName]])               # plot <- iris %>% explore::explain_tree(target = Species)             # if (length(self$options$dep) + length(self$options$group) < 2)             #     return()              # tree1 <- iris %>% explore::explain_tree(target = Species)             # iris$is_versicolor <- ifelse(iris$Species == \"versicolor\", 1, 0)             # tree2 <- iris %>%             # dplyr::select(-Species) %>%             # explore::explain_tree(target = is_versicolor)             # tree3 <- iris %>%             # explore::explain_tree(target = Sepal.Length)    library(magrittr) # devtools::install(upgrade = FALSE, quick = TRUE) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  mydata <- deneme  varsName <- \"Age\"  # facsName <- c(\"LVI\", \"PNI\")  targetName <- \"Outcome\"  mydata[[targetName]] <- as.factor(mydata[[targetName]])  mydata <- jmvcore::select(mydata, c(varsName,                                      # facsName,                                      targetName))  mydata <- jmvcore::naOmit(mydata)    explore::explain_tree(data = mydata,                       target = targetName                       )  mydata %>% explore::explain_tree(target = .data[[targetName]])     iris %>% explore::explain_tree(target = Species)     BreastCancer %>%                 dplyr::select(all_of(mytarget), all_of(myvars)) %>%                 explore::explain_tree(target = .data[[mytarget]])     ClinicoPath::tree(     data = data,     vars = Age,     facs = vars(LVI, PNI),     target = Mortality)   mytarget <- \"Class\" myvars <- c(\"Cl.thickness\",             \"Cell.size\",             \"Cell.shape\",             \"Marg.adhesion\",             \"Epith.c.size\",             \"Bare.nuclei\",             \"Bl.cromatin\",             \"Normal.nucleoli\",             \"Mitoses\")  # mytarget <- jmvcore::composeTerms(mytarget) # mytarget <- jmvcore::constructFormula(terms = mytarget)    # install.packages(\"easyalluvial\") library(magrittr) # devtools::install(upgrade = FALSE, quick = TRUE) deneme <- readxl::read_xlsx(path = here::here(\"_tododata\", \"histopathology-template2019-11-25.xlsx\"))  mydata <- deneme  var1 <- \"TStage\"  var2 <- \"Grade\"  mydata <- jmvcore::select(df = mydata, columnNames = c(var1, var2))  mydata <- jmvcore::naOmit(mydata)  plot <-  easyalluvial::alluvial_wide( data = mydata                 , max_variables = 5                 , fill_by = 'first_variable'                 , verbose = TRUE                 )  plot %>%      easyalluvial::add_marginal_histograms(mydata) so you’ve got a few options … but it’s worth pointing out that most of the time, the name of the jamovi function/analysis doesn’t really matter. unless you’re wanting people to be able to use the same functions from R, then no-one will ever use them/see them. (the only thing that matters is that the name of the analysis doesn’t change, so jamovi can match the analysis with analyses in old .omv files) so assuming you want people to be able to use these same functions from R, and you want to rename, say, the flexplota function, you can use rename in the .a.yaml file. we use it for the anova: https://github.com/jamovi/jmv/blob/master/jamovi/anova.a.yaml#L2-L3 this only renames the function used to call the analysis from R, and preserves the underlying ‘analysis name’ that jamovi depends on. in the case of our ANOVA, we decided the lowercase name conflicted with too many anova() functions in R. the only change this makes to your .h.R file is here: https://github.com/jamovi/jmv/blob/master/R/anova.h.R#L527 another approach, if you don’t want to provide the analysis R functions at all, you can see export: false in the .a.yaml file. https://github.com/jamovi/jmv/blob/master/jamovi/empty.a.yaml#L7 in the case of anova, this would completely remove the ANOVA() function from the .h.R file (jamovi doesn’t actually use that top level function itself, rather it constructs the anovaClass, anovaOptions, etc. objects directly) … some times people do this where they want to implement their own top level function, rather than relying on the automatically generated one. or sometimes they just don’t want people to use that function from R, and want them to use a different approach in R. (one usually wants to override the syntax generated for ‘syntax mode’ if taking this approach … i can walk you through that if that’s where you want to head). (edited) flatpak install flathub org.freedesktop.Sdk.Extension.gfortran-62 sudo apt install libcanberra-gtk-module libcanberra-gtk3-module  flatpak run --command=R --devel org.jamovi.jamovi install.packages('node', repos='https://repo.jamovi.org') install.packages('jmvtools', repos='https://repo.jamovi.org') jmvtools::install(home='/app/bin/')"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "introduction",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Introduction",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "clinical practice research, evaluating diagnostic test performance typically requires “gold standard” reference test determine true disease status. However, many situations, perfect gold standard test unavailable, expensive, invasive, unethical perform. nogoldstandard module ClinicoPath package provides methods analyzing performance multiple diagnostic tests without requiring gold standard reference. vignette demonstrates use nogoldstandard module : Estimate disease prevalence Calculate sensitivity specificity multiple tests Compute confidence intervals using bootstrap methods Visualize test agreement patterns",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "why-analyze-tests-without-a-gold-standard",
        "dir": "Articles",
        "previous_headings": "Introduction",
        "what": "Why analyze tests without a gold standard?",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "perfect reference test exists, researchers typically face challenging options: Use imperfect reference (introducing verification bias) Employ composite reference standards (potentially arbitrary) Exclude subjects without verification (introducing selection bias) Statistical methods “gold standard” analysis offer alternative approach, allowing estimation test performance metrics using patterns agreement disagreement among multiple imperfect tests.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "methods-overview",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Methods Overview",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "nogoldstandard module implements five different approaches: Latent Class Analysis (LCA): Assumes disease status unobserved (latent) variable models relationship latent variable observed test results. Composite Reference: Creates reference standard considering majority result across tests “true” status. Tests Positive: Considers disease present tests positive (high specificity approach). Test Positive: Considers disease present test positive (high sensitivity approach). Bayesian Analysis: Uses prior distributions EM algorithm estimate parameters, potentially incorporating prior knowledge.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "installation",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Installation",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "nogoldstandard module part ClinicoPath package:",
        "code": "# Install from CRAN install.packages(\"ClinicoPath\")  # Or the development version # install.packages(\"devtools\") devtools::install_github(\"sbalci/ClinicoPath\")"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "example-data",
        "dir": "Articles",
        "previous_headings": "Basic Usage",
        "what": "Example Data",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "Let’s create sample dataset 4 diagnostic tests performed 200 patients:",
        "code": "set.seed(123) n <- 200  # Number of patients  # True disease status (unknown in practice) true_status <- rbinom(n, 1, 0.3)  # 30% prevalence  # Create 4 imperfect tests with different sensitivity/specificity test1 <- ifelse(true_status == 1,                  rbinom(n, 1, 0.90),  # 90% sensitivity                 rbinom(n, 1, 0.10))  # 90% specificity  test2 <- ifelse(true_status == 1,                  rbinom(n, 1, 0.75),  # 75% sensitivity                 rbinom(n, 1, 0.05))  # 95% specificity  test3 <- ifelse(true_status == 1,                  rbinom(n, 1, 0.85),  # 85% sensitivity                 rbinom(n, 1, 0.15))  # 85% specificity  test4 <- ifelse(true_status == 1,                  rbinom(n, 1, 0.70),  # 70% sensitivity                 rbinom(n, 1, 0.05))  # 95% specificity  # Convert to categorical format test1 <- factor(ifelse(test1 == 1, \"pos\", \"neg\")) test2 <- factor(ifelse(test2 == 1, \"pos\", \"neg\")) test3 <- factor(ifelse(test3 == 1, \"pos\", \"neg\")) test4 <- factor(ifelse(test4 == 1, \"pos\", \"neg\"))  # Create data frame data <- data.frame(   caseID = 1:n,   test1 = test1,   test2 = test2,   test3 = test3,   test4 = test4 )  # View the first few rows head(data) #>   caseID test1 test2 test3 test4 #> 1      1   pos   neg   pos   neg #> 2      2   neg   pos   pos   pos #> 3      3   pos   neg   neg   neg #> 4      4   pos   pos   neg   pos #> 5      5   pos   pos   pos   pos #> 6      6   neg   pos   pos   neg"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "running-the-analysis",
        "dir": "Articles",
        "previous_headings": "Basic Usage",
        "what": "Running the Analysis",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "Now let’s analyze data using Latent Class Analysis method: result contain: Estimated disease prevalence Sensitivity specificity test Test agreement matrix visualization",
        "code": "library(ClinicoPath)  result <- nogoldstandard(   data = data,   test1 = \"test1\",   test1Positive = \"pos\",   test2 = \"test2\",   test2Positive = \"pos\",   test3 = \"test3\",   test3Positive = \"pos\",   test4 = \"test4\",   test4Positive = \"pos\",   test5 = NULL,   method = \"latent_class\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "bootstrap-confidence-intervals",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Bootstrap Confidence Intervals",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "One key features nogoldstandard module ability compute confidence intervals using bootstrap resampling. provides measure uncertainty around estimated parameters.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "understanding-bootstrap-in-nogoldstandard-analysis",
        "dir": "Articles",
        "previous_headings": "Bootstrap Confidence Intervals",
        "what": "Understanding Bootstrap in NoGoldStandard Analysis",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "Bootstrap resampling involves: Randomly selecting observations original dataset replacement Running selected analysis method resampled dataset Computing parameter interest (prevalence, sensitivity, specificity) Repeating steps 1-3 many times build distribution Using distribution calculate confidence intervals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "enabling-bootstrap-with-progress-reporting",
        "dir": "Articles",
        "previous_headings": "Bootstrap Confidence Intervals",
        "what": "Enabling Bootstrap with Progress Reporting",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "enhanced version nogoldstandard module includes detailed progress reporting bootstrap analysis: running analysis, ’ll see progress updates console:",
        "code": "result_with_ci <- nogoldstandard(   data = data,   test1 = \"test1\",   test1Positive = \"pos\",   test2 = \"test2\",   test2Positive = \"pos\",   test3 = \"test3\",   test3Positive = \"pos\",   test4 = \"test4\",   test4Positive = \"pos\",   method = \"latent_class\",   bootstrap = TRUE,     # Enable bootstrap   nboot = 1000,         # Number of bootstrap samples   alpha = 0.05          # For 95% confidence intervals ) === Bootstrap Analysis === Starting bootstrap with 1000 iterations for latent_class method Estimating confidence intervals for prevalence    50/1000 (5.0%) - 50 successful, 0 errors - 12.3 sec elapsed, ~234.7 sec remaining   100/1000 (10.0%) - 100 successful, 0 errors - 24.8 sec elapsed, ~223.2 sec remaining   ...   950/1000 (95.0%) - 942 successful, 8 errors - 236.5 sec elapsed, ~12.5 sec remaining   1000/1000 (100.0%) - 991 successful, 9 errors - 249.3 sec elapsed, ~0.0 sec remaining  === Bootstrap Complete === Total time: 249.3 seconds (4.01 iterations/sec) Successful iterations: 991 (99.1%) Failed iterations: 9 (0.9%) Confidence interval (95.0%): [0.2145, 0.2987]"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "expected-duration-for-bootstrap-analysis",
        "dir": "Articles",
        "previous_headings": "Bootstrap Confidence Intervals",
        "what": "Expected Duration for Bootstrap Analysis",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "time required bootstrap analysis depends several factors: analysis method also affects duration: - Latent Class Analysis: Slowest (multiple model fitting attempts) - Bayesian Analysis: Moderate (iterative EM algorithm) - Composite//Test: Fastest (simple calculations)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "recommended-bootstrap-iterations",
        "dir": "Articles",
        "previous_headings": "Bootstrap Confidence Intervals",
        "what": "Recommended Bootstrap Iterations",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "Quick Exploration: 100-500 bootstrap samples Publication-Quality Results: 1,000-2,000 bootstrap samples Critical Applications: 5,000-10,000 bootstrap samples",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "comparing-different-methods",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Comparing Different Methods",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "Let’s compare results different analysis methods: Different methods may produce different estimates. general: Latent Class Analysis: Often considered theoretically sound requires assumptions conditional independence Composite Reference: Practical can biased toward majority Tests Positive: Conservative approach (low prevalence, high test specificity) Test Positive: Liberal approach (high prevalence, high test sensitivity) Bayesian Analysis: Flexible can incorporate prior knowledge, requires careful prior specification",
        "code": "# Run analysis with each method methods <- c(\"latent_class\", \"composite\", \"all_positive\", \"any_positive\", \"bayesian\") results <- list()  for (method in methods) {   results[[method]] <- nogoldstandard(     data = data,     test1 = \"test1\",     test1Positive = \"pos\",     test2 = \"test2\",     test2Positive = \"pos\",     test3 = \"test3\",     test3Positive = \"pos\",     test4 = \"test4\",     test4Positive = \"pos\",     method = method   ) }  # Extract prevalence estimates prevalence_estimates <- sapply(results, function(x) {   x$prevalence$asDF()$estimate[1] }) print(prevalence_estimates)"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "disease-prevalence",
        "dir": "Articles",
        "previous_headings": "Interpreting Results",
        "what": "Disease Prevalence",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "estimated prevalence represents proportion population expected disease. Different methods yield different prevalence estimates: Tests Positive: Typically produces lowest prevalence estimate Test Positive: Typically produces highest prevalence estimate Latent Class Analysis: Usually produces intermediate estimate",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "test-performance",
        "dir": "Articles",
        "previous_headings": "Interpreting Results",
        "what": "Test Performance",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "test, module estimates: Sensitivity: probability positive test result patients disease Specificity: probability negative test result patients without disease Sensitivity specificity can used : Compare test performance Inform test selection decisions Design optimal testing strategies",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "agreement-plot",
        "dir": "Articles",
        "previous_headings": "Interpreting Results",
        "what": "Agreement Plot",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "test agreement plot shows proportion agreement pair tests. visualization helps identify: Tests frequently agree/disagree Potential conditional dependence tests Clusters similar tests",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "handling-missing-data",
        "dir": "Articles",
        "previous_headings": "Advanced Topics",
        "what": "Handling Missing Data",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "nogoldstandard module can handle missing test results. enhanced implementation: Skips missing values calculating agreement Uses available data test estimating parameters Properly accounts missing data bootstrap resampling",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "bayesian-analysis-with-prior-information",
        "dir": "Articles",
        "previous_headings": "Advanced Topics",
        "what": "Bayesian Analysis with Prior Information",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "prior knowledge disease prevalence test characteristics, Bayesian method can incorporate information:",
        "code": "# Example of Bayesian analysis with informative priors would be shown here # This feature would require customization of the Bayesian method code"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "conditional-dependence",
        "dir": "Articles",
        "previous_headings": "Advanced Topics",
        "what": "Conditional Dependence",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "default Latent Class Analysis assumes conditional independence tests given true disease status. assumption violated, results may biased. Extensions handle conditional dependence : Including direct test--test associations model Using two latent classes Applying hierarchical latent class models",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "method-selection",
        "dir": "Articles",
        "previous_headings": "Recommendations for Practice",
        "what": "Method Selection",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "Start Latent Class Analysis primary method Compare composite methods check robustness Consider Bayesian analysis prior information available Report results multiple methods transparency",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "bootstrap-settings",
        "dir": "Articles",
        "previous_headings": "Recommendations for Practice",
        "what": "Bootstrap Settings",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "Use least 1,000 bootstrap iterations published results time-consuming methods (LCA), start 100 iterations check feasibility Monitor progress enhanced bootstrap implementation Report point estimates confidence intervals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "validation",
        "dir": "Articles",
        "previous_headings": "Recommendations for Practice",
        "what": "Validation",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "possible, validate results : External validation data Follow-studies Alternative gold standard tests subset patients Results literature clinical expertise",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "the-enhanced-bootstrap-function",
        "dir": "Articles",
        "previous_headings": "Technical Implementation",
        "what": "The Enhanced Bootstrap Function",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "implementation bootstrap function progress reporting:",
        "code": ".calculateBootstrapCI = function(data, method, nboot, alpha, type, test_index = NULL) {     # Simple bootstrap implementation with progress indicators     n <- nrow(data)     boot_results <- numeric(nboot)          # Show starting message     message(\"\\n=== Bootstrap Analysis ===\")     message(sprintf(\"Starting bootstrap with %d iterations for %s method\", nboot, method))     message(sprintf(\"Estimating confidence intervals for %s\", type))     if (!is.null(test_index)) {         message(sprintf(\"Test index: %d\", test_index))     }          # Progress tracking variables     start_time <- Sys.time()     last_update <- start_time     update_interval <- max(1, floor(nboot / 20))  # Update ~20 times during process     success_count <- 0     error_count <- 0          for (b in 1:nboot) {         # Resample data         boot_indices <- sample(n, n, replace = TRUE)         boot_data <- data[boot_indices, ]                  # Run analysis on bootstrap sample         boot_result <- NULL         tryCatch({             if (method == \"latent_class\") {                 boot_result <- private$.runLCA(boot_data, names(data), NULL)             } else if (method == \"composite\") {                 boot_result <- private$.runComposite(boot_data)             } else if (method == \"all_positive\") {                 boot_result <- private$.runAllPositive(boot_data)             } else if (method == \"any_positive\") {                 boot_result <- private$.runAnyPositive(boot_data)             } else if (method == \"bayesian\") {                 boot_result <- private$.runBayesian(boot_data)             }             success_count <- success_count + 1         }, error = function(e) {             # Count errors but continue bootstrap             error_count <- error_count + 1         })                  # Extract relevant statistic         if (!is.null(boot_result)) {             if (type == \"prevalence\") {                 boot_results[b] <- boot_result$prevalence             } else if (type == \"sensitivity\" && !is.null(test_index)) {                 boot_results[b] <- boot_result$sensitivities[test_index]             } else if (type == \"specificity\" && !is.null(test_index)) {                 boot_results[b] <- boot_result$specificities[test_index]             }         } else {             boot_results[b] <- NA         }                  # Show progress updates         current_time <- Sys.time()         if (b %% update_interval == 0 || b == nboot ||              as.numeric(difftime(current_time, last_update, units = \"secs\")) > 10) {             elapsed <- as.numeric(difftime(current_time, start_time, units = \"secs\"))             percent_done <- b / nboot * 100             est_total <- elapsed / percent_done * 100             est_remaining <- est_total - elapsed                          message(sprintf(\"  %d/%d (%.1f%%) - %d successful, %d errors - %.1f sec elapsed, ~%.1f sec remaining\",                            b, nboot, percent_done, success_count, error_count,                           elapsed, est_remaining))                          last_update <- current_time         }     }          # Show final statistics     total_time <- as.numeric(difftime(Sys.time(), start_time, units = \"secs\"))     message(\"\\n=== Bootstrap Complete ===\")     message(sprintf(\"Total time: %.1f seconds (%.2f iterations/sec)\",                    total_time, nboot/total_time))     message(sprintf(\"Successful iterations: %d (%.1f%%)\",                    success_count, success_count/nboot*100))     message(sprintf(\"Failed iterations: %d (%.1f%%)\",                    error_count, error_count/nboot*100))          # Calculate percentile CI     boot_results <- boot_results[!is.na(boot_results)]          if (length(boot_results) > 0) {         ci <- quantile(boot_results, c(alpha/2, 1-alpha/2), na.rm=TRUE)         message(sprintf(\"Confidence interval (%.1f%%): [%.4f, %.4f]\",                        (1-alpha)*100, ci[1], ci[2]))         return(list(lower = ci[1], upper = ci[2]))     } else {         message(\"WARNING: No valid bootstrap results obtained. Returning NA.\")         return(list(lower = NA, upper = NA))     } }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "references",
        "dir": "Articles",
        "previous_headings": "",
        "what": "References",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "Hui SL, Walter SD. Estimating error rates diagnostic tests. Biometrics. 1980;36(1):167-171. Joseph L, Gyorkos TW, Coupal L. Bayesian estimation disease prevalence parameters diagnostic tests absence gold standard. J Epidemiol. 1995;141(3):263-272. Albert PS, Dodd LE. cautionary note robustness latent class models estimating diagnostic error without gold standard. Biometrics. 2004;60(2):427-435. Collins J, Huynh M. Estimation diagnostic test accuracy without full verification: review latent class methods. Stat Med. 2014;33(24):4141-4169. Dendukuri N, Joseph L. Bayesian approaches modeling conditional dependence multiple diagnostic tests. Biometrics. 2001;57(1):158-167.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/nogoldstandard.html",
        "id": "session-information",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Session Information",
        "title": "Analyzing Diagnostic Tests without a Gold Standard",
        "text": "",
        "code": "sessionInfo() #> R version 4.3.2 (2023-10-31) #> Platform: aarch64-apple-darwin20 (64-bit) #> Running under: macOS 15.5 #>  #> Matrix products: default #> BLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib  #> LAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0 #>  #> locale: #> [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 #>  #> time zone: Europe/Istanbul #> tzcode source: internal #>  #> attached base packages: #> [1] stats     graphics  grDevices utils     datasets  methods   base      #>  #> loaded via a namespace (and not attached): #>  [1] digest_0.6.37     desc_1.4.3        R6_2.6.1          fastmap_1.2.0     #>  [5] xfun_0.52         cachem_1.1.0      knitr_1.50        htmltools_0.5.8.1 #>  [9] rmarkdown_2.29    lifecycle_1.0.4   cli_3.6.5         sass_0.4.10       #> [13] pkgdown_2.1.3     textshaping_1.0.1 jquerylib_0.1.4   systemfonts_1.2.3 #> [17] compiler_4.3.2    rstudioapi_0.17.1 tools_4.3.2       ragg_1.4.0        #> [21] bslib_0.9.0       evaluate_1.0.3    yaml_2.3.10       jsonlite_2.0.0    #> [25] rlang_1.1.6       fs_1.6.6          htmlwidgets_1.6.4"
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/roc-analysis.html",
        "id": "loading-the-data",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Loading the Data",
        "title": "ROC Curve Analysis",
        "text": "",
        "code": "df_roc <- read.csv(system.file(\"extdata\", \"roc_example.csv\", package = \"meddecide\")) head(df_roc)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/roc-analysis.html",
        "id": "creating-the-roc-curve",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Creating the ROC Curve",
        "title": "ROC Curve Analysis",
        "text": "resulting plot shows ROC curve along area curve (AUC). can extract AUC value statistics result object.",
        "code": "roc_res <- psychopdaroc(data = df_roc, class = df_roc$class, value = df_roc$value) roc_res$plot roc_res$AUC"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/roc-analysis.html",
        "id": "bootstrapping-and-confidence-intervals",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Bootstrapping and Confidence Intervals",
        "title": "ROC Curve Analysis",
        "text": "auc_ci() bootstrap_ci() provide convenience wrappers computing confidence intervals diagnostic metrics. utilities allow assess stability ROC analysis.",
        "code": "auc_ci(roc_res) bootstrap_ci(roc_res)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "general-references",
        "dir": "Articles",
        "previous_headings": "",
        "what": "General References",
        "title": "Users of ClinicoPath",
        "text": "Jamovi ve Jasp Programı ile Temel ve İleri Düzey Nicel Veri Analizi https://depo.pegem.net/9786258044089.pdf",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "clinicopathdescriptives",
        "dir": "Articles",
        "previous_headings": "",
        "what": "ClinicoPathDescriptives",
        "title": "Users of ClinicoPath",
        "text": "COMPARATIVE MORPHOMETRIC ANALYSIS VARIOUS GROUPS - “OPTIMAL” “UNOPTIMAL” DICHOTOS INNER-ORDAINED ARTERIAL DRESS SPLEEN PERSON https://discover-journal.ru/jour/index.php/sjlsa/article/view/925 Performance Wisconsin Card Sorting Test Oncopediatric Patients Oncology Unit Cali, Colombia: Cross-Sectional Observational Study https://www.preprints.org/manuscript/202402.1056 Multispectral UAV-Based Disease Identification Using Vegetation Indices Maize Hybrids https://www.mdpi.com/2077-0472/14/11/2002 Prospective association occupational leisure-time physical activity orthostatic blood pressure changes older adults https://www.nature.com/articles/s41598-023-46947-7 Much Students Primary School Know Waste Sorting? (Pilot Research) https://www.researchgate.net/profile/Sarah-Haines-2/publication/380424067_Integrated_STEM_Professional_Development_Utilizing_Best_Practices_in_an_Online_Format/links/663ba28006ea3d0b744200a0/Integrated-STEM-Professional-Development-Utilizing-Best-Practices---Online-Format.pdf LIKES ANXIETY: UNDERSTANDING INSTAGRAM ADDICTION’S ROLE APPEARANCE CONCERNS https://www.journals.aseiacademic.org/index.php/ijsei/article/view/395 SATISFAÇÃO CORPORAL, TRANSTORNOS MENTAIS E PRÁTICA DE ATIVIDADE FÍSICA EM ESTUDANTES UNIVERSITÁRIOS ‘Hippocampal innate inflammatory gliosis ’ pharmacoresistant temporal lobe epilepsy https://doi.org/10.1093/brain/awac293 Salmonella Typhi Vaccination Response Tool Stratification Risk Patients Predominantly Antibody Deficiencies https://www.mdpi.com/2075-4418/12/10/2423 Análisis para datos biomédicos longitudinales: Análisis de supervivencia (jamovi) https://sites.google.com/iacs.es/analisis-supervivencia-jamovi/inicio https://www.youtube.com/shorts/Tr852pDJahY",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "table-one",
        "dir": "Articles",
        "previous_headings": "ClinicoPathDescriptives",
        "what": "Table One",
        "title": "Users of ClinicoPath",
        "text": "Systematic Review Global Meta-analysis Secondary Fungal Infections Associated COVID-19 https://www.medrxiv.org/content/10.1101/2024.10.25.24316125v1 Clinicopathological analysis 38 male patients diagnosed breast cancer https://journals.sagepub.com/doi/full/10.3233/BD-230050",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "cross-tables",
        "dir": "Articles",
        "previous_headings": "ClinicoPathDescriptives",
        "what": "Cross Tables",
        "title": "Users of ClinicoPath",
        "text": "Evaluation Telemergency Service Older People Living Home: Cross-Sectional Study https://www.mdpi.com/2079-9292/12/23/4786 Risk Factors Cardiovascular-Specific Mortality Patients Prostate Cancer: Surveillance, Epidemiology, End Results (SEER)-Based Study https://pmc.ncbi.nlm.nih.gov/articles/PMC10823189/ Maker training teachers: competencies developed didactical engineering https://revistas.utfpr.edu.br/actio/article/view/19194 Adenomyomas Gallbladder: Analysis Frequency, Clinicopathologic Associations, Relationship Carcinoma Malformative Lesion https://meridian.allenpress.com/aplm/article/148/2/206/492905/Adenomyomas---Gallbladder--Analysis-",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "alluvial-plot",
        "dir": "Articles",
        "previous_headings": "ClinicoPathDescriptives",
        "what": "Alluvial Plot",
        "title": "Users of ClinicoPath",
        "text": "Detecting Early Signs Malignancy Oral Leukoplakia Tissues Saliva https://dspace.rsu.lv/jspui/bitstream/123456789/16943/1/2024-19_Dzudzilo-Madara_DTS_IPD-5242.pdf Relationship Behavior Older Participants Body Composition Change: Results Second Wave Cognition Older People, Education, Recreational Activities, Nutrition, Comorbidities, Functional Capacity Studies (COPERNICUS) https://www.mdpi.com/2072-6643/15/8/1834",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "jsurvival",
        "dir": "Articles",
        "previous_headings": "",
        "what": "jsurvival",
        "title": "Users of ClinicoPath",
        "text": "Prognostic significance necrosis ampullary carcinomas https://link.springer.com/article/10.1007/s11845-024-03740-3 Bioinformatic Analysis Gene Expression Related Sialic Acid Biosynthesis Patients Medulloblastoma https://pmc.ncbi.nlm.nih.gov/articles/PMC11162302/ Patient-derived organoids prediction treatment response oesophageal adenocarcinoma https://academic.oup.com/bjs/article/111/1/znad408/7591126 Comprehensive frailty assessment multidimensional frailty domains predictor mortality among vascular cardiac surgical patients https://akjournals.com/view/journals/2060/110/2/article-p191.xml Prognostic biomarker tumor-infiltrating lymphocytes failed serve predictive biomarker postoperative radiotherapy completely resected pN2 non-small cell lung cancer: retrospective analysis https://link.springer.com/article/10.1186/s12931-024-02863-6",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "survival-analysis",
        "dir": "Articles",
        "previous_headings": "jsurvival",
        "what": "Survival Analysis",
        "title": "Users of ClinicoPath",
        "text": "Worse long-term renal outcome lupus nephritis patients African descent living Europe https://rmdopen.bmj.com/content/8/2/e002386.abstract Omission intraoperative pyloric procedures minimally invasive esophagectomy: assessing impact patients https://academic.oup.com/dote/article/36/3/doac061/6694033 Integrating Red Blood Cell Features Hemoglobin Levels Metastatic Renal Cell Carcinoma Patients Treated Pazopanib Cabozantinib: Easily Exploitable Prognostic Score https://flore.unifi./handle/2158/1355782 Nodal Yield <15 Associated Reduced Survival Esophagectomy Quality Metric https://www.sciencedirect.com/science/article/abs/pii/S0003497523002540 Biomarkers systemic treatment response: MR images intratumoral fat deposition colorectal liver metastases (CRLM) chemotherapy https://link.springer.com/article/10.1007/s00384-024-04762-0 Influence time admission norepinephrine administration volume fluids received outcomes patients meeting sepsis-3 criteria: retrospective study using MIMIC-IV database https://tsaco.bmj.com/content/8/1/e001024 SURVIVAL SPINAL CANCER SURGERY: ANALYSIS CASES OPERATED 2020 https://www.scielo.br/j/coluna//NmbGxGNSBnydKKJtXd9TK7M/",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "survival-analysis-for-continuous-variable",
        "dir": "Articles",
        "previous_headings": "jsurvival",
        "what": "Survival analysis for Continuous Variable",
        "title": "Users of ClinicoPath",
        "text": "Role Endovascular Repair Timing Uncomplicated Acute Type B Intramural Hematoma Management https://www.sciencedirect.com/science/article/abs/pii/S0890509623006702 Prognostic factors affecting long-term outcomes patients concurrent IgA nephropathy membranous nephropathy https://www.cell.com/heliyon/fulltext/S2405-8440(23)10644-X Intratumoral spatial heterogeneity tumor-infiltrating lymphocytes significant factor precisely stratifying prognostic immune subgroups microsatellite instability-high colorectal carcinomas https://www.sciencedirect.com/science/article/pii/S0893395222055132 RISK STRATIFICATION VENTRICULAR TACHYARRHYTHMIAS CARDIOVERTER-DEFIBRILLATOR IMPLANTATION PRIMARY PREVENTION SUDDEN CARDIAC DEATH: RESULTS IDEAL SINGLE-CENTER PROSPECTIVE STUDY https://doi.org/10.35336/VA-1409",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "multivariable-survival-analysis",
        "dir": "Articles",
        "previous_headings": "jsurvival",
        "what": "Multivariable Survival Analysis",
        "title": "Users of ClinicoPath",
        "text": "Prognostic Significance Tumor Budding Ampullary Carcinomas https://journals.sagepub.com/doi/abs/10.1177/10668969241308204 Baseline Ultrasound Assessment Improves Response Apremilast Patients Psoriatic Arthritis: Results Multicentre Study http://www.mjrheum.org/assets/files/792/file614_2232.pdf Importance Stroma Stromal SMA Expression Pancreatic Ductal Adenocarcinoma https://turkjpath.org/text.php?id=2068 https://stats-co.eu/analyse-de-survie_53/",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "meddecide",
        "dir": "Articles",
        "previous_headings": "",
        "what": "meddecide",
        "title": "Users of ClinicoPath",
        "text": "extent neuroradiological findings COVID-19 shows correlation blood biomarkers, Glasgow coma scale score days intensive care https://www.sciencedirect.com/science/article/pii/S015098612100167X Adipokines Myokines Markers Malnutrition Sarcopenia Patients Receiving Kidney Replacement Therapy: Observational, Cross-Sectional Study https://hal.science/hal-04720682v1/document review user-friendly freely-available statistical analysis software medical researchers biostatisticians https://www.tandfonline.com/doi/full/10.1080/27684520.2024.2322630 extent neuroradiological findings COVID-19 shows correlation blood biomarkers, Glasgow coma scale score days intensive care https://www.sciencedirect.com/science/article/pii/S015098612100167X Exercise & cardiopulmonary physiology rheumatoid arthritis https://wlv.openrepository.com/handle/2436/624659 Comparing parent-child interaction wordless book reading, print book reading imaginative play https://www.cambridge.org/core/journals/journal--child-language/article/comparing-parentchild-interaction--wordless-book-reading-print-book-reading--imaginative-play/F1BB0E369ECE50AD4EA3906D9FF14710 RCOVID: ALGORITHM DETECT COVID-19 REINFECTIONS LARGE-ROUTINE EXAM DATABASE https://essopenarchive.org/doi/full/10.22541/au.169639932.29863502 Variability McMaster Mini-FLOTAC techniques equine strongyle eggs count: Novel analysis Bland-Altman method https://www.researchsquare.com/article/rs-3133218/v1 Diagnostic reproducibility 2018 Classification Gingival Recessions: Comparing photographic -person diagnoses https://aap.onlinelibrary.wiley.com/doi/full/10.1002/JPER.24-0173 Demodex mites among solid organ transplant recipients: cross-sectional study https://www.termedia.pl/Demodex-mites-among-solid-organ-transplant-recipients--cross-sectional-study,7,55181,0,1.html Bilimsel Yazılım Geliştirme Süreçleri için bir Yazılım Mühendisliği Yetkinlik Envanteri https://dergipark.org.tr/tr/pub/tbbmd/issue/80549/1159443",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "fagan-nomogram",
        "dir": "Articles",
        "previous_headings": "meddecide",
        "what": "Fagan Nomogram",
        "title": "Users of ClinicoPath",
        "text": "Transcranial doppler non-invasive estimation intracranial pressure traumatic brain injury compared non-invasive methods lower-middle income countries: Systematic review meta-analysis https://www.sciencedirect.com/science/article/pii/S0967586823001224",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "power-analysis",
        "dir": "Articles",
        "previous_headings": "meddecide",
        "what": "Power Analysis",
        "title": "Users of ClinicoPath",
        "text": "Concurrent Validity Inter-Rater Reliability Assessment Two Mental Toughness Instruments Firefighting: Two-Wave Longitudinal Study https://www.mdpi.com/2076-328X/14/7/523",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/users-of-ClinicoPath.html",
        "id": "jjstatsplot",
        "dir": "Articles",
        "previous_headings": "",
        "what": "jjstatsplot",
        "title": "Users of ClinicoPath",
        "text": "α-Klotho associated cardiovascular -cause mortality patients stage 3b 4 chronic kidney disease (CKD): long-term prospective cohort study https://link.springer.com/article/10.1007/s40620-024-02069-5 Assess effectiveness digital platforms facilitating content delivery pedagogical strategies http://efsupit.ro/images/stories/septembrie2024/Art%20254.pdf Clinical practice selectively follows acute appendicitis guidelines https://link.springer.com/article/10.1007/s00068-022-02208-2 Neuropsychological Neuroimaging Correlates High-Altitude Hypoxia Trekking “Gokyo Khumbu/Ama Dablam” Expedition https://www.liebertpub.com/doi/full/10.1089/ham.2021.0029 Endurance-dependent urinary extracellular vesicle signature: shape, metabolic miRNAs, purine content distinguish triathletes inactive people https://link.springer.com/article/10.1007/s00424-023-02815-x Greater severity depressive symptoms associated changes perceived sweating, preferred ambient temperature, warmth-seeking behavior https://www.tandfonline.com/doi/full/10.1080/23328940.2024.2374097#abstract Empatía y conducta prosocial en estudiantes espectadores indiferentes culpabilizados de bullying de dos Instituciones Educativas de Lima Norte, 2023 https://repositorio.ucv.edu.pe/handle/20.500.12692/135310 Inteligencia emocional y actitudes hacia la violencia escolar en estudiantes de secundaria de instituciones educativas del distrito de Ventanilla, 2023 https://repositorio.ucv.edu.pe/handle/20.500.12692/139534 Violencia familiar y tolerancia la frustración en adolescentes de dos instituciones educativas de Lima-2024 https://repositorio.ucv.edu.pe/handle/20.500.12692/147454 Rol mediador de la autoeficacia entre la victimización por acoso escolar y la procrastinación en estudiantes de secundaria del Callao, 2024 https://repositorio.ucv.edu.pe/handle/20.500.12692/146994 Violencia familiar y resiliencia en estudiantes de secundaria con y sin consciencia de las experiencias presentes de una institución educativa pública de Cutervo, 2022 https://repositorio.ucv.edu.pe/handle/20.500.12692/94924 Willingness Pay social media/messenger services taking account personality sent/received messages among WhatsApp users https://www.cell.com/heliyon/fulltext/S2405-8440(24)04871-0 Severity depressive symptoms moderates sympathoinhibitory effect local skin warming following exposure social stressor https://www.sciencedirect.com/science/article/pii/S0306453023003980 Artificial Intelligence (AI) Reveals Ethnic Disparities Cataract Detection Treatment https://link.springer.com/article/10.1007/s40123-024-00945-8 Parameter validation genomics population analysis https://dugi-doc.udg.edu/handle/10256/24270?show=full functions video outdated. bugs videos created. bugs fixed latest version package. takes time effort update modules.",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/visualization.html",
        "id": "age-pyramid",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Age Pyramid",
        "title": "Visualising Clinicopathological Data",
        "text": "",
        "code": "agepyramid(   data = histopathology,   age = \"Age\",   gender = \"Sex\",   female = \"Female\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/visualization.html",
        "id": "alluvial-diagrams",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Alluvial Diagrams",
        "title": "Visualising Clinicopathological Data",
        "text": "",
        "code": "alluvial(   data = histopathology,   vars = vars(Grade, LVI, PNI),   fill = \"first_variable\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/visualization.html",
        "id": "benford-analysis",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Benford Analysis",
        "title": "Visualising Clinicopathological Data",
        "text": "",
        "code": "benford(data = histopathology, var = \"TumorSize\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/visualization.html",
        "id": "venn-diagrams",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Venn Diagrams",
        "title": "Visualising Clinicopathological Data",
        "text": "",
        "code": "venn(data = histopathology, vars = vars(LVI, PNI, PreinvasiveComponent))"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/visualization.html",
        "id": "variable-trees",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Variable Trees",
        "title": "Visualising Clinicopathological Data",
        "text": "",
        "code": "vartree(   data = histopathology,   vars = vars(Grade, LVI, PNI),   percvar = \"Grade\",   percvarLevel = \"High\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/articles/visualization.html",
        "id": "waterfall-and-spider-plots",
        "dir": "Articles",
        "previous_headings": "",
        "what": "Waterfall and Spider Plots",
        "title": "Visualising Clinicopathological Data",
        "text": "code snippets illustrate core visualisation tools included ClinicoPathDescriptives.",
        "code": "waterfall(   data = treatmentResponse,   patientID = \"PatientID\",   responseVar = \"Response\",   timeVar = \"Month\",   inputType = \"percentage\",   showWaterfallPlot = TRUE,   showSpiderPlot = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/authors.html",
        "id": null,
        "dir": "",
        "previous_headings": "",
        "what": "Authors",
        "title": "Authors and Citation",
        "text": "Serdar Balci. Author, maintainer.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/authors.html",
        "id": "citation",
        "dir": "",
        "previous_headings": "",
        "what": "Citation",
        "title": "Authors and Citation",
        "text": "Balci S (2025). ClinicoPath: Analysis Clinicopathological Research. R package version 0.0.3.24, https://github.com/sbalci/ClinicoPathJamoviModule/, https://github.com/sbalci/ClinicoPathDescriptives/, https://github.com/sbalci/jsurvival, https://github.com/sbalci/meddecide, https://github.com/sbalci/jjstatsplot, https://sbalci.github.io/ClinicoPathJamoviModule/, https://www.serdarbalci.com/ClinicoPathJamoviModule.",
        "code": "@Manual{,   title = {ClinicoPath: Analysis for Clinicopathological Research},   author = {Serdar Balci},   year = {2025},   note = {R package version 0.0.3.24,     https://github.com/sbalci/ClinicoPathJamoviModule/,     https://github.com/sbalci/ClinicoPathDescriptives/,     https://github.com/sbalci/jsurvival,     https://github.com/sbalci/meddecide,     https://github.com/sbalci/jjstatsplot,     https://sbalci.github.io/ClinicoPathJamoviModule/},   url = {https://www.serdarbalci.com/ClinicoPathJamoviModule}, }"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "clinicopath-jamovi-module-microscope",
        "dir": "",
        "previous_headings": "",
        "what": "ClinicoPath jamovi Module 🔬",
        "title": "Analysis for Clinicopathological Research",
        "text": "jamovi Module contains main analysis used ClinicoPathological research. ClinicoPath help researchers generate natural language summaries dataset, generate cross tables statistical tests, survival analysis survival tables, survival curves, natural language summaries. 🔬👀📑🗃📊🏨🗄📇📖⚗📝🎶📈📉📃🖍 🔬🔬🏋🚴🚙👨💻 📸📺🎛🔭🔬💊🔐🍫🌸   DOI 10.17605/OSF.IO/9SZUD https://osf.io/9szud/",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "installation-in-jamovi",
        "dir": "",
        "previous_headings": "",
        "what": "Installation in jamovi",
        "title": "Analysis for Clinicopathological Research",
        "text": "can install module installing jamovi version >= 1.2.19 : https://www.jamovi.org/download.html can install submodules directly inside jamovi, using library. Submodules : - ClinicoPathDescriptives - jsurvival - meddecide - jjstatsplot",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "step-1",
        "dir": "",
        "previous_headings": "Installation via sideload jamovi",
        "what": "Step 1:",
        "title": "Analysis for Clinicopathological Research",
        "text": "Download install jamovi.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "step-2",
        "dir": "",
        "previous_headings": "Installation via sideload jamovi",
        "what": "Step 2:",
        "title": "Analysis for Clinicopathological Research",
        "text": "Download relevant jmo file operating system ",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "a-for-development-version",
        "dir": "",
        "previous_headings": "Installation via sideload jamovi > Step 2:",
        "what": "a: For development version",
        "title": "Analysis for Clinicopathological Research",
        "text": "releases sourceforge.",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "clinicopathdescriptives",
        "dir": "",
        "previous_headings": "Installation via sideload jamovi > Step 2: > b: For smaller modules",
        "what": "ClinicoPathDescriptives",
        "title": "Analysis for Clinicopathological Research",
        "text": "ClinicoPathDescriptives functions separately added jamovi library Exploration menu ClinicoPathDescriptives module can downloaded inside jamovi (click Modules jamovi library) https://github.com/sbalci/ClinicoPathDescriptives/ https://github.com/sbalci/ClinicoPathDescriptives/releases/ https://library.jamovi.org/win64/R4.0.2/ClinicoPathDescriptives-0.0.2.0039.jmo https://library.jamovi.org/macos/R4.0.2/ClinicoPathDescriptives-0.0.2.0039.jmo",
        "code": "remotes::install_github(\"sbalci/ClinicoPathDescriptives\") - name: ClinicoPathDescriptives   url: https://github.com/sbalci/ClinicoPathDescriptives.git   commit: 190b914807518bf0e9139bc282eabcf3883a9e72   platforms:     - win64     - macos"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "clinicopathlinuxdescriptives",
        "dir": "",
        "previous_headings": "Installation via sideload jamovi > Step 2: > b: For smaller modules",
        "what": "ClinicoPathLinuxDescriptives",
        "title": "Analysis for Clinicopathological Research",
        "text": "ClinicoPathDescriptives functions Linux https://github.com/sbalci/ClinicoPathLinuxDescriptives/ https://github.com/sbalci/ClinicoPathLinuxDescriptives/releases/ https://library.jamovi.org/linux/R4.0.2/ClinicoPathDescriptives-0.0.2.0041.jmo",
        "code": "remotes::install_github(\"sbalci/ClinicoPathDescriptives\") - name: ClinicoPathDescriptives   url: https://github.com/sbalci/ClinicoPathLinuxDescriptives.git   commit: cc63b37bd0a639194baf5a35db72783e05336027   platforms:     - linux"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "jjstatsplot",
        "dir": "",
        "previous_headings": "Installation via sideload jamovi > Step 2: > b: For smaller modules",
        "what": "JJStatsPlot",
        "title": "Analysis for Clinicopathological Research",
        "text": "GGStatsPlot functions separately added jamovi library jjstatsplot menu JJStastPlot module can downloaded inside jamovi (click Modules jamovi library) https://library.jamovi.org/win64/R4.0.2/jjstatsplot-0.0.2.0038.jmo https://library.jamovi.org/macos/R4.0.2/jjstatsplot-0.0.2.0038.jmo https://github.com/sbalci/jjstatsplot https://github.com/sbalci/jjstatsplot/releases/",
        "code": "remotes::install_github(\"sbalci/jjstatsplot\") - name: jjstatsplot   url: https://github.com/sbalci/jjstatsplot.git   commit: c49c23de8b9ff8a1569da4ee1b6f4fcc8cf61d1f   platforms:     - win64     - macos"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "jsurvival",
        "dir": "",
        "previous_headings": "Installation via sideload jamovi > Step 2: > b: For smaller modules",
        "what": "jsurvival",
        "title": "Analysis for Clinicopathological Research",
        "text": "https://github.com/sbalci/jsurvival https://github.com/sbalci/jsurvival/releases/ https://library.jamovi.org/macos/R4.0.2/jsurvival-0.0.2.0044.jmo https://library.jamovi.org/win64/R4.0.2/jsurvival-0.0.2.0044.jmo https://library.jamovi.org/linux/R4.0.2/jsurvival-0.0.2.0044.jmo",
        "code": "remotes::install_github(\"sbalci/jsurvival\") - name: jsurvival   url: https://github.com/sbalci/jsurvival.git   commit: 9c57e504ddc0ceb42681f92b63ec0c0adf294436   platforms:     - win64     - macos     - linux"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "meddecide",
        "dir": "",
        "previous_headings": "Installation via sideload jamovi > Step 2: > b: For smaller modules",
        "what": "meddecide",
        "title": "Analysis for Clinicopathological Research",
        "text": "https://github.com/sbalci/meddecide/ https://github.com/sbalci/meddecide/releases/ https://library.jamovi.org/win64/R4.1.2/meddecide-0.0.2.07.jmo https://library.jamovi.org/macos/R4.1.2/meddecide-0.0.2.07.jmo",
        "code": "remotes::install_github(\"sbalci/meddecide\") - name: meddecide   url: https://github.com/sbalci/meddecide.git   commit: 38aaf74a807241def57c23b99cc89a31a1ed5123"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "jbbplot",
        "dir": "",
        "previous_headings": "Installation via sideload jamovi > Step 2: > b: For smaller modules",
        "what": "jbbplot",
        "title": "Analysis for Clinicopathological Research",
        "text": "https://github.com/sbalci/jbbplot/ https://github.com/sbalci/jbbplot/releases/ Step 3: install using side-load shown :",
        "code": "remotes::install_github(\"sbalci/jbbplot\")"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "example-datasets",
        "dir": "",
        "previous_headings": "Screenshots of Module",
        "what": "Example Datasets",
        "title": "Analysis for Clinicopathological Research",
        "text": "Using Example Datasets  https://cloud.jamovi.org/?open=https://raw.githubusercontent.com/sbalci/ClinicoPathJamoviModule/master/data/histopathology.csv https://cloud.jamovi.org/?open=https://raw.githubusercontent.com/sbalci/ClinicoPathJamoviModule/master/data/histopathology.omv https://cloud.jamovi.org/?open=https://docs.google.com/spreadsheets/d/e/2PACX-1vST3kwze9bNUSEr0eijs_81F6hXBrDZ-2Zt97ez-fbpXMELKGFHJNuQHSP2Oxars2C6F3n50KzT1-zD/pub?output=csv",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "pairwise-chi-square-tests",
        "dir": "",
        "previous_headings": "Screenshots of Module > Exploration > ClinicoPath Comparisons",
        "what": "Pairwise Chi-Square Tests",
        "title": "Analysis for Clinicopathological Research",
        "text": "🔬🔬🔬🔬 CONSTRUCTION 🛠⛔️⚠️🔩",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "competing-survival",
        "dir": "",
        "previous_headings": "Screenshots of Module > Survival > jsurvival",
        "what": "Competing Survival",
        "title": "Analysis for Clinicopathological Research",
        "text": "🔬🔬🔬🔬 CONSTRUCTION 🛠⛔️⚠️🔩",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "icc-coefficients",
        "dir": "",
        "previous_headings": "Screenshots of Module > meddecide > Agreement",
        "what": "ICC coefficients",
        "title": "Analysis for Clinicopathological Research",
        "text": "🔬🔬🔬🔬 CONSTRUCTION 🛠⛔️⚠️🔩",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "explore",
        "dir": "",
        "previous_headings": "",
        "what": "Analysis for Clinicopathological Research",
        "title": "Analysis for Clinicopathological Research",
        "text": "🔬🔬🔬🔬 CONSTRUCTION 🛠⛔️⚠️🔩",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "fftrees",
        "dir": "",
        "previous_headings": "",
        "what": "Analysis for Clinicopathological Research",
        "title": "Analysis for Clinicopathological Research",
        "text": "🔬🔬🔬🔬 CONSTRUCTION 🛠⛔️⚠️🔩",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "rpart",
        "dir": "",
        "previous_headings": "",
        "what": "Analysis for Clinicopathological Research",
        "title": "Analysis for Clinicopathological Research",
        "text": "🔬🔬🔬🔬 CONSTRUCTION 🛠⛔️⚠️🔩",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "roc",
        "dir": "",
        "previous_headings": "Screenshots of Module > meddecide > Decision",
        "what": "ROC",
        "title": "Analysis for Clinicopathological Research",
        "text": "🔬🔬🔬🔬 CONSTRUCTION 🛠⛔️⚠️🔩",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "correlation-1",
        "dir": "",
        "previous_headings": "Screenshots of Module > Correlation",
        "what": "Correlation",
        "title": "Analysis for Clinicopathological Research",
        "text": "🔬🔬🔬🔬 CONSTRUCTION 🛠⛔️⚠️🔩",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "installation-in-r",
        "dir": "",
        "previous_headings": "",
        "what": "Installation in R",
        "title": "Analysis for Clinicopathological Research",
        "text": "can install development version GitHub :",
        "code": "# install.packages(\"devtools\") devtools::install_github(\"sbalci/ClinicoPathJamoviModule\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "current-package-versions",
        "dir": "",
        "previous_headings": "",
        "what": "Current Package Versions:",
        "title": "Analysis for Clinicopathological Research",
        "text": "R: 4.0.2 MRAN: https://cran.microsoft.com/snapshot/2020-08-24",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "acknowledgement",
        "dir": "",
        "previous_headings": "",
        "what": "Acknowledgement",
        "title": "Analysis for Clinicopathological Research",
        "text": "Made possible via codes, help, guidence jamovi developer Jonathon Love, finalfit developer Ewen Harrison, ggstatsplot developer Indrajeet Patil, tangram developer Shawn Garbett, easystats developers , report , tableone, survival, survminer, vtree developer Nick Barrowman, easyalluvial, developer Björn Oettinghaus, rstats community. See https://github.com/ClinicoPath forked packages. Buy coffee https://paypal./serdarbalci",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/index.html",
        "id": "development-status",
        "dir": "",
        "previous_headings": "",
        "what": "Development Status",
        "title": "Analysis for Clinicopathological Research",
        "text": "Code Status Check, CI  Recency, Updates Webpage, Links, Size, Download Dependencies Interaction, Shares",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/BreastCancer.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Wisconsin Breast Cancer Data — BreastCancer",
        "title": "Wisconsin Breast Cancer Data — BreastCancer",
        "text": "dataset containing clinical measurements related breast cancer cells, originally UCI Machine Learning Repository. often used classification tasks.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/BreastCancer.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Wisconsin Breast Cancer Data — BreastCancer",
        "text": "",
        "code": "data(BreastCancer)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/BreastCancer.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Wisconsin Breast Cancer Data — BreastCancer",
        "text": "data frame 699 rows 11 variables: Id Numeric. Sample code number. Cl.thickness Numeric. Clump thickness (1-10). Cell.size Numeric. Uniformity cell size (1-10). Cell.shape Numeric. Uniformity cell shape (1-10). Marg.adhesion Numeric. Marginal adhesion (1-10). Epith.c.size Numeric. Single epithelial cell size (1-10). Bare.nuclei Numeric. Bare nuclei (1-10). Note: contains NAs original dataset, may preprocessed . Bl.cromatin Numeric. Bland chromatin (1-10). Normal.nucleoli Numeric. Normal nucleoli (1-10). Mitoses Numeric. Mitoses (1-10). Class Character. Class tumor (\"benign\" \"malignant\").",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/BreastCancer.html",
        "id": "source",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Source",
        "title": "Wisconsin Breast Cancer Data — BreastCancer",
        "text": "Dr. W. H. Wolberg, University Wisconsin Hospitals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/BreastCancer.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Wisconsin Breast Cancer Data — BreastCancer",
        "text": "",
        "code": "data(BreastCancer) str(BreastCancer) #> spc_tbl_ [699 × 11] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>  $ Id             : num [1:699] 1000025 1002945 1015425 1016277 1017023 ... #>  $ Cl.thickness   : num [1:699] 5 5 3 6 4 8 1 2 2 4 ... #>  $ Cell.size      : num [1:699] 1 4 1 8 1 10 1 1 1 2 ... #>  $ Cell.shape     : num [1:699] 1 4 1 8 1 10 1 2 1 1 ... #>  $ Marg.adhesion  : num [1:699] 1 5 1 1 3 8 1 1 1 1 ... #>  $ Epith.c.size   : num [1:699] 2 7 2 3 2 7 2 2 2 2 ... #>  $ Bare.nuclei    : num [1:699] 1 10 2 4 1 10 10 1 1 1 ... #>  $ Bl.cromatin    : num [1:699] 3 3 3 3 3 9 3 3 1 2 ... #>  $ Normal.nucleoli: num [1:699] 1 2 1 7 1 7 1 1 1 1 ... #>  $ Mitoses        : num [1:699] 1 1 1 1 1 1 1 1 5 1 ... #>  $ Class          : chr [1:699] \"benign\" \"benign\" \"benign\" \"benign\" ... #>  - attr(*, \"spec\")=List of 3 #>   ..$ cols   :List of 11 #>   .. ..$ Id             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Cl.thickness   : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Cell.size      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Cell.shape     : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Marg.adhesion  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Epith.c.size   : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Bare.nuclei    : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Bl.cromatin    : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Normal.nucleoli: list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Mitoses        : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Class          : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   ..$ default: list() #>   .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\" #>   ..$ skip   : num 1 #>   ..- attr(*, \"class\")= chr \"col_spec\" head(BreastCancer) #> # A tibble: 6 × 11 #>        Id Cl.thickness Cell.size Cell.shape Marg.adhesion Epith.c.size #>     <dbl>        <dbl>     <dbl>      <dbl>         <dbl>        <dbl> #> 1 1000025            5         1          1             1            2 #> 2 1002945            5         4          4             5            7 #> 3 1015425            3         1          1             1            2 #> 4 1016277            6         8          8             1            3 #> 5 1017023            4         1          1             3            2 #> 6 1017122            8        10         10             8            7 #> # ℹ 5 more variables: Bare.nuclei <dbl>, Bl.cromatin <dbl>, #> #   Normal.nucleoli <dbl>, Mitoses <dbl>, Class <chr> summary(BreastCancer$Cl.thickness) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.000   2.000   4.000   4.418   6.000  10.000  table(BreastCancer$Class) #>  #>    benign malignant  #>       458       241"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ClinicoPath-package.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "ClinicoPath: Analysis for Clinicopathological Research — ClinicoPath-package",
        "title": "ClinicoPath: Analysis for Clinicopathological Research — ClinicoPath-package",
        "text": "ClinicoPath ClinicoPath help researchers generate natural language summaries dataset, generate cross tables statistical tests, survival analysis survival tables, survival plots, natural language summaries. documentation, see Website.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ClinicoPath-package.html",
        "id": "details",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Details",
        "title": "ClinicoPath: Analysis for Clinicopathological Research — ClinicoPath-package",
        "text": "ClinicoPath",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ClinicoPath-package.html",
        "id": "author",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Author",
        "title": "ClinicoPath: Analysis for Clinicopathological Research — ClinicoPath-package",
        "text": "Maintainer: Serdar Balci drserdarbalci@gmail.com (ORCID)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/TestROC.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Test ROC — TestROC",
        "title": "Test ROC — TestROC",
        "text": "Test ROC",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/TestROC.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Test ROC — TestROC",
        "text": "",
        "code": "TestROC(   data,   dependentVars,   classVar,   subGroup,   method = \"maximize_metric\",   allObserved,   specifyCutScore = \"\",   metric,   boot_runs,   break_ties,   tol_metric = 0.05,   direction,   plotROC = TRUE,   combinePlots = TRUE,   displaySE = FALSE,   smoothing = FALSE,   sensSpecTable = FALSE,   delongTest = FALSE,   positiveClass = \"\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/TestROC.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Test ROC — TestROC",
        "text": "data . dependentVars . classVar . subGroup . method . allObserved . specifyCutScore . metric . boot_runs . break_ties . tol_metric . direction . plotROC . combinePlots . displaySE . smoothing . sensSpecTable . delongTest . positiveClass .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/TestROC.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Test ROC — TestROC",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramid.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Age Pyramid — agepyramid",
        "title": "Age Pyramid — agepyramid",
        "text": "Age Pyramid",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramid.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Age Pyramid — agepyramid",
        "text": "",
        "code": "agepyramid(   data,   age,   gender,   female,   bin_width = 5,   plot_title = \"Age Pyramid\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramid.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Age Pyramid — agepyramid",
        "text": "data data data frame. age string naming variable data contains continuous values used report gender string naming variable data contains categorical values used report female string naming level gender contains level female bin_width width age bins years. Adjust change granularity age groups. plot_title title displayed age pyramid plot.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramid.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Age Pyramid — agepyramid",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$pyramidTable$asDF .data.frame(results$pyramidTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramidClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Age Pyramid — agepyramidClass",
        "title": "Age Pyramid — agepyramidClass",
        "text": "Generates age pyramid plot provided data. function allows customization bin width (age group granularity) plot title. creates visually appealing plot showing distribution age gender.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramidClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Age Pyramid — agepyramidClass",
        "text": "jmvcore::Analysis -> ClinicoPath::agepyramidBase -> agepyramidClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramidClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Age Pyramid — agepyramidClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::agepyramidBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramidClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Age Pyramid — agepyramidClass",
        "text": "agepyramidClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramidClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Age Pyramid — agepyramidClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramidClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Age Pyramid — agepyramidClass",
        "text": "",
        "code": "agepyramidClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agepyramidClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Age Pyramid — agepyramidClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreement.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Interrater Reliability — agreement",
        "title": "Interrater Reliability — agreement",
        "text": "Function Interrater Reliability.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreement.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Interrater Reliability — agreement",
        "text": "",
        "code": "agreement(   data,   vars,   sft = FALSE,   heatmap = FALSE,   heatmapDetails = FALSE,   wght = \"unweighted\",   exct = FALSE,   kripp = FALSE,   krippMethod = \"nominal\",   bootstrap = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreement.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Interrater Reliability — agreement",
        "text": "data data data frame. data long format, row unique observation. vars string naming variable data contains diagnosis given observer, variable can categorical ordinal. sft Boolean selection whether show frequency table. Default 'false'. 'true', function show frequency table observer. heatmap Boolean selection whether show agreement heatmap. Default 'true'. heatmapDetails Boolean selection whether show detailed heatmap kappa values. Default 'false'. wght list argument weight (wght), weighted kappa analysis. Default 'unweighted'. 'squared' 'equal' selected ordinal variables. function gives error variable type ordinal. default 'unweighted'. exct Boolean selection whether use exact kappa. Effects 3 observers. Default 'false'. kripp Boolean selection whether calculate Krippendorff's alpha. Default 'false'. krippMethod Specifies measurement level Krippendorff's alpha calculation. bootstrap Calculate bootstrap confidence intervals Krippendorff's alpha.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreement.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Interrater Reliability — agreement",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$irrtable$asDF .data.frame(results$irrtable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreement.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Interrater Reliability — agreement",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreementClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Interrater Reliability Analysis — agreementClass",
        "title": "Interrater Reliability Analysis — agreementClass",
        "text": "function calculates interrater reliability ordinal categorical data.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreementClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Interrater Reliability Analysis — agreementClass",
        "text": "Table",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreementClass.html",
        "id": "details",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Details",
        "title": "Interrater Reliability Analysis — agreementClass",
        "text": "function calculates Cohen's kappa two raters Fleiss' kappa three raters.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreementClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Interrater Reliability Analysis — agreementClass",
        "text": "jmvcore::Analysis -> ClinicoPath::agreementBase -> agreementClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreementClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Interrater Reliability Analysis — agreementClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::agreementBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreementClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Interrater Reliability Analysis — agreementClass",
        "text": "agreementClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreementClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Interrater Reliability Analysis — agreementClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreementClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Interrater Reliability Analysis — agreementClass",
        "text": "",
        "code": "agreementClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/agreementClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Interrater Reliability Analysis — agreementClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvial.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Alluvial Diagrams — alluvial",
        "title": "Alluvial Diagrams — alluvial",
        "text": "Alluvial Diagrams",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvial.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Alluvial Diagrams — alluvial",
        "text": "",
        "code": "alluvial(   data,   vars,   condensationvar,   excl = FALSE,   marg = FALSE,   fill = \"first_variable\",   bin = \"default\",   orient = \"vert\",   usetitle = FALSE,   mytitle = \"Alluvial Plot\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvial.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Alluvial Diagrams — alluvial",
        "text": "data data data frame. vars string naming variables data contains values used Alluvial Diagram. condensationvar primary variable used condensation. excl Exclude missing values analysis. marg Include marginal plots. fill list argument fill selecting variable represented color. Default 'first_variable'. bin labels bins low high orient Orientation plot. Default 'vertical'. usetitle Use custom title plot. mytitle Title plot.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvial.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Alluvial Diagrams — alluvial",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Alluvial Plot — alluvialClass",
        "title": "Alluvial Plot — alluvialClass",
        "text": "tool help form Alluvial Diagrams (Alluvial Plots).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Alluvial Plot — alluvialClass",
        "text": "Alluvial Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Alluvial Plot — alluvialClass",
        "text": "jmvcore::Analysis -> ClinicoPath::alluvialBase -> alluvialClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Alluvial Plot — alluvialClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::alluvialBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Alluvial Plot — alluvialClass",
        "text": "alluvialClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Alluvial Plot — alluvialClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Alluvial Plot — alluvialClass",
        "text": "",
        "code": "alluvialClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Alluvial Plot — alluvialClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvival.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Treatment Pathway Alluvial Plot — alluvialSurvival",
        "title": "Treatment Pathway Alluvial Plot — alluvialSurvival",
        "text": "Treatment Pathway Alluvial Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvival.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Treatment Pathway Alluvial Plot — alluvialSurvival",
        "text": "",
        "code": "alluvialSurvival(   data,   timeVar,   stageVar,   treatmentVar,   patientId,   survivalVar,   showRightAxis = FALSE,   colorScheme = \"clinical\",   showSurvival = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvival.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Treatment Pathway Alluvial Plot — alluvialSurvival",
        "text": "data . timeVar name time variable dataset stageVar name disease stage variable treatmentVar Treatment received time point patientId Unique patient identifier tracking survivalVar Survival status time point showRightAxis . colorScheme . showSurvival .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvival.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Treatment Pathway Alluvial Plot — alluvialSurvival",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summaryTable$asDF .data.frame(results$summaryTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvivalClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Alluvial Survival Plot — alluvialSurvivalClass",
        "title": "Alluvial Survival Plot — alluvialSurvivalClass",
        "text": "Generates alluvial plot visualize patient treatment pathways time.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvivalClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Alluvial Survival Plot — alluvialSurvivalClass",
        "text": "Alluvial Survival Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvivalClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Alluvial Survival Plot — alluvialSurvivalClass",
        "text": "jmvcore::Analysis -> ClinicoPath::alluvialSurvivalBase -> alluvialSurvivalClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvivalClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Alluvial Survival Plot — alluvialSurvivalClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::alluvialSurvivalBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvivalClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Alluvial Survival Plot — alluvialSurvivalClass",
        "text": "alluvialSurvivalClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvivalClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Alluvial Survival Plot — alluvialSurvivalClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvivalClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Alluvial Survival Plot — alluvialSurvivalClass",
        "text": "",
        "code": "alluvialSurvivalClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/alluvialSurvivalClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Alluvial Survival Plot — alluvialSurvivalClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/arcDiagram.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arc Diagram Example Data — arcDiagram",
        "title": "Arc Diagram Example Data — arcDiagram",
        "text": "dataset designed creating arc diagrams, typically used visualize relationships flows entities.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/arcDiagram.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Arc Diagram Example Data — arcDiagram",
        "text": "",
        "code": "data(arcDiagram)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/arcDiagram.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Arc Diagram Example Data — arcDiagram",
        "text": "data frame 21 rows 4 variables: source Character. starting node entity relationship. target Character. ending node entity relationship. weight Numeric. strength magnitude relationship source target. group Character. grouping variable relationships, often used coloring arcs.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/arcDiagram.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Arc Diagram Example Data — arcDiagram",
        "text": "",
        "code": "data(arcDiagram) str(arcDiagram) #> 'data.frame':\t21 obs. of  4 variables: #>  $ source: chr  \"Alice\" \"Alice\" \"Bob\" \"Bob\" ... #>  $ target: chr  \"Bob\" \"Jack\" \"Diana\" \"Henry\" ... #>  $ weight: num  7.5 3.1 1.1 3.7 3.7 2.8 3.8 3.8 2.9 1.9 ... #>  $ group : chr  \"Family\" \"Family\" \"Family\" \"Family\" ... head(arcDiagram) #>    source target weight  group #> 1   Alice    Bob    7.5 Family #> 2   Alice   Jack    3.1 Family #> 3     Bob  Diana    1.1 Family #> 4     Bob  Henry    3.7 Family #> 5     Bob   Jack    3.7 Family #> 6 Charlie  Frank    2.8 Family summary(arcDiagram$weight) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   1.100   2.700   3.700   4.329   6.300   9.800"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/auc_ci.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Statistical Utility Functions — auc_ci",
        "title": "Statistical Utility Functions — auc_ci",
        "text": "Functions calculating confidence intervals test statistics Calculate AUC confidence intervals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/auc_ci.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Statistical Utility Functions — auc_ci",
        "text": "",
        "code": "auc_ci(auc, n_pos, n_neg, conf_level = 0.95)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/auc_ci.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Statistical Utility Functions — auc_ci",
        "text": "auc Area curve value n_pos Number positive cases n_neg Number negative cases conf_level Confidence level (default 0.95)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/auc_ci.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Statistical Utility Functions — auc_ci",
        "text": "Vector containing lower upper CI bounds #' @export",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdca.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Bayesian Decision Curve Analysis — bayesdca",
        "title": "Bayesian Decision Curve Analysis — bayesdca",
        "text": "Bayesian Decision Curve Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdca.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Bayesian Decision Curve Analysis — bayesdca",
        "text": "",
        "code": "bayesdca(   data,   outcomes,   outcomePos,   predictors,   thresholdMin = 0.01,   thresholdMax = 0.5,   thresholdPoints = 50,   useExternalPrevalence = FALSE,   externalCases = 100,   externalTotal = 500,   bayesianAnalysis = TRUE,   priorStrength = 2,   bootstrapCI = TRUE,   bootstrapReps = 2000,   calculateEVPI = FALSE,   nDraws = 2000,   directionIndicator = \">=\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdca.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Bayesian Decision Curve Analysis — bayesdca",
        "text": "data data data frame. outcomes Binary outcome variable (0/1) representing true disease status event. outcomePos Specifies level outcome variable treated positive class. predictors Variables containing either probability predictions models binary results (0/1) diagnostic tests. thresholdMin Minimum decision threshold analysis. thresholdMax Maximum decision threshold analysis. thresholdPoints Number threshold points evaluate. useExternalPrevalence Use external prevalence data instead sample prevalence. externalCases Number cases external prevalence data. externalTotal Total sample size external prevalence data. bayesianAnalysis Perform Bayesian analysis uncertainty quantification. priorStrength Strength prior (effective sample size). bootstrapCI Calculate bootstrap confidence intervals non-Bayesian analysis. bootstrapReps Number bootstrap replications confidence intervals. calculateEVPI Calculate Expected Value Perfect Information. nDraws Number posterior draws Bayesian analysis. directionIndicator Direction classification relative cutpoint. Use '>=' higher values predict positive outcomes.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdca.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Bayesian Decision Curve Analysis — bayesdca",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$netBenefitTable$asDF .data.frame(results$netBenefitTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdcaClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Bayesian Decision Curve Analysis — bayesdcaClass",
        "title": "Bayesian Decision Curve Analysis — bayesdcaClass",
        "text": "Bayesian Decision Curve Analysis Bayesian Decision Curve Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdcaClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Bayesian Decision Curve Analysis — bayesdcaClass",
        "text": "Tables plots decision curve analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdcaClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Bayesian Decision Curve Analysis — bayesdcaClass",
        "text": "jmvcore::Analysis -> ClinicoPath::bayesdcaBase -> bayesdcaClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdcaClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Bayesian Decision Curve Analysis — bayesdcaClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::bayesdcaBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdcaClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Bayesian Decision Curve Analysis — bayesdcaClass",
        "text": "bayesdcaClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdcaClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Bayesian Decision Curve Analysis — bayesdcaClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdcaClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Bayesian Decision Curve Analysis — bayesdcaClass",
        "text": "",
        "code": "bayesdcaClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdcaClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Bayesian Decision Curve Analysis — bayesdcaClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdca_test_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Bayesian Decision Curve Analysis Test Data — bayesdca_test_data",
        "title": "Bayesian Decision Curve Analysis Test Data — bayesdca_test_data",
        "text": "dataset demonstrating Bayesian Decision Curve Analysis (DCA). typically includes outcome variable predictions one models tests.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdca_test_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Bayesian Decision Curve Analysis Test Data — bayesdca_test_data",
        "text": "",
        "code": "data(bayesdca_test_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdca_test_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Bayesian Decision Curve Analysis Test Data — bayesdca_test_data",
        "text": "data frame 500 rows 4 variables: outcome Character. true outcome status (e.g., presence absence condition). model_prediction Numeric. Predicted probability risk score statistical model. binary_test Integer. Results binary diagnostic test, likely coded 0 1. weak_test Integer. Results another binary diagnostic test, potentially lower accuracy, likely coded 0 1.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bayesdca_test_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Bayesian Decision Curve Analysis Test Data — bayesdca_test_data",
        "text": "",
        "code": "data(bayesdca_test_data) str(bayesdca_test_data) #> 'data.frame':\t500 obs. of  4 variables: #>  $ outcome         : chr  \"No Disease\" \"No Disease\" \"No Disease\" \"Disease\" ... #>  $ model_prediction: num  0.407 0.363 0.415 0.748 0.931 ... #>  $ binary_test     : int  0 0 0 0 0 0 0 1 0 0 ... #>  $ weak_test       : int  0 1 1 1 1 0 0 1 0 0 ... head(bayesdca_test_data) #>      outcome model_prediction binary_test weak_test #> 1 No Disease        0.4071879           0         0 #> 2 No Disease        0.3631134           0         1 #> 3 No Disease        0.4148582           0         1 #> 4    Disease        0.7484752           0         1 #> 5    Disease        0.9307655           0         1 #> 6 No Disease        0.4778732           0         0 summary(bayesdca_test_data$model_prediction) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.0568  0.3730  0.5494  0.5425  0.7172  0.9563"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benford.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Benford Analysis — benford",
        "title": "Benford Analysis — benford",
        "text": "Benford Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benford.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Benford Analysis — benford",
        "text": "",
        "code": "benford(data, var)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benford.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Benford Analysis — benford",
        "text": "data data data frame. var string naming variable data contains continuous values used report",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benford.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Benford Analysis — benford",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benfordClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Benford's Law Analysis — benfordClass",
        "title": "Benford's Law Analysis — benfordClass",
        "text": "function performs Benford's Law analysis numeric variable. returns Benford's Law distribution list potential suspects.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benfordClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Benford's Law Analysis — benfordClass",
        "text": "list Benford's Law distribution list potential suspects. list Benford's Law distribution list potential suspects.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benfordClass.html",
        "id": "details",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Details",
        "title": "Benford's Law Analysis — benfordClass",
        "text": "Benford's Law analysis test determine distribution first digits numeric variable follows Benford's Law. Benford's Law distribution compared observed distribution first digits variable. analysis returns list potential suspects deviate significantly Benford's Law.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benfordClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Benford's Law Analysis — benfordClass",
        "text": "jmvcore::Analysis -> ClinicoPath::benfordBase -> benfordClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benfordClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Benford's Law Analysis — benfordClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::benfordBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benfordClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Benford's Law Analysis — benfordClass",
        "text": "benfordClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benfordClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Benford's Law Analysis — benfordClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benfordClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Benford's Law Analysis — benfordClass",
        "text": "",
        "code": "benfordClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/benfordClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Benford's Law Analysis — benfordClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponse.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Biomarker Response Association — biomarkerresponse",
        "title": "Biomarker Response Association — biomarkerresponse",
        "text": "Biomarker Response Association",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponse.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Biomarker Response Association — biomarkerresponse",
        "text": "",
        "code": "biomarkerresponse(   data,   biomarker,   response,   responseType = \"categorical\",   plotType = \"boxplot\",   showThreshold = TRUE,   thresholdValue,   thresholdMethod = \"median\",   addTrendLine = TRUE,   trendMethod = \"loess\",   performTests = TRUE,   groupVariable,   showCorrelation = TRUE,   logTransform = FALSE,   outlierHandling = \"highlight\",   confidenceLevel = \"0.95\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponse.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Biomarker Response Association — biomarkerresponse",
        "text": "data data data frame. biomarker Continuous biomarker measurement (e.g., expression level, concentration). response Treatment response variable (binary, categorical, continuous). responseType Type response variable appropriate analysis visualization. plotType Primary visualization method biomarker-response relationship. showThreshold Display threshold lines biomarker positivity/negativity. thresholdValue Threshold value biomarker positivity (known). thresholdMethod Method determining biomarker threshold. addTrendLine Add fitted trend line continuous responses. trendMethod Method fitting trend line. performTests Perform appropriate statistical tests biomarker-response association. groupVariable Optional grouping variable (e.g., treatment arm, disease stage). showCorrelation Display correlation coefficients tests. logTransform Apply log transformation biomarker values. outlierHandling Method handling outlier values. confidenceLevel Confidence level intervals tests.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponse.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Biomarker Response Association — biomarkerresponse",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$correlation$asDF .data.frame(results$correlation)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponseClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Biomarker Response Association — biomarkerresponseClass",
        "title": "Biomarker Response Association — biomarkerresponseClass",
        "text": "Analyzes visualizes relationships biomarker levels treatment responses",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponseClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Biomarker Response Association — biomarkerresponseClass",
        "text": "jmvcore::Analysis -> ClinicoPath::biomarkerresponseBase -> biomarkerresponseClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponseClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Biomarker Response Association — biomarkerresponseClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::biomarkerresponseBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponseClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Biomarker Response Association — biomarkerresponseClass",
        "text": "biomarkerresponseClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponseClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Biomarker Response Association — biomarkerresponseClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponseClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Biomarker Response Association — biomarkerresponseClass",
        "text": "",
        "code": "biomarkerresponseClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/biomarkerresponseClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Biomarker Response Association — biomarkerresponseClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrapIDI.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Bootstrap IDI calculation with confidence intervals — bootstrapIDI",
        "title": "Bootstrap IDI calculation with confidence intervals — bootstrapIDI",
        "text": "Bootstrap IDI calculation confidence intervals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrapIDI.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Bootstrap IDI calculation with confidence intervals — bootstrapIDI",
        "text": "",
        "code": "bootstrapIDI(   new_values,   ref_values,   actual,   direction = \">=\",   n_boot = 1000,   conf_level = 0.95 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrapIDI.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Bootstrap IDI calculation with confidence intervals — bootstrapIDI",
        "text": "new_values Test values new test ref_values Test values reference test actual Binary outcome vector (0/1) direction Classification direction (\">=\" \"<=\") n_boot Number bootstrap iterations conf_level Confidence level (default 0.95)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrapIDI.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Bootstrap IDI calculation with confidence intervals — bootstrapIDI",
        "text": "List IDI, confidence intervals, p-value",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrapNRI.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Bootstrap NRI calculation with confidence intervals — bootstrapNRI",
        "title": "Bootstrap NRI calculation with confidence intervals — bootstrapNRI",
        "text": "Bootstrap NRI calculation confidence intervals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrapNRI.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Bootstrap NRI calculation with confidence intervals — bootstrapNRI",
        "text": "",
        "code": "bootstrapNRI(   new_values,   ref_values,   actual,   direction = \">=\",   thresholds = NULL,   n_boot = 1000,   conf_level = 0.95 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrapNRI.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Bootstrap NRI calculation with confidence intervals — bootstrapNRI",
        "text": "new_values Test values new test ref_values Test values reference test actual Binary outcome vector (0/1) direction Classification direction (\">=\" \"<=\") thresholds Risk category thresholds (NULL continuous NRI) n_boot Number bootstrap iterations conf_level Confidence level (default 0.95)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrapNRI.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Bootstrap NRI calculation with confidence intervals — bootstrapNRI",
        "text": "List NRI components confidence intervals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrap_ci.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Bootstrap confidence intervals for diagnostic metrics — bootstrap_ci",
        "title": "Bootstrap confidence intervals for diagnostic metrics — bootstrap_ci",
        "text": "Bootstrap confidence intervals diagnostic metrics",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrap_ci.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Bootstrap confidence intervals for diagnostic metrics — bootstrap_ci",
        "text": "",
        "code": "bootstrap_ci(data, metric, R = 1000)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrap_ci.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Bootstrap confidence intervals for diagnostic metrics — bootstrap_ci",
        "text": "data Data frame containing test results metric Function calculate desired metric R Number bootstrap iterations",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/bootstrap_ci.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Bootstrap confidence intervals for diagnostic metrics — bootstrap_ci",
        "text": "List containing point estimate confidence intervals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/breast_cancer_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Breast Cancer Screening Data — breast_cancer_data",
        "title": "Breast Cancer Screening Data — breast_cancer_data",
        "text": "simulated dataset breast cancer screening research. includes patient identifiers, results various screening modalities, cancer status, risk factors.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/breast_cancer_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Breast Cancer Screening Data — breast_cancer_data",
        "text": "",
        "code": "data(breast_cancer_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/breast_cancer_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Breast Cancer Screening Data — breast_cancer_data",
        "text": "data frame 2000 rows 10 variables: patient_id Integer. Unique patient identifier. clinical_exam Character. Result clinical breast examination (e.g., \"Normal\", \"Abnormal\"). mammography Character. Mammography result (e.g., \"BIRADS 1\", \"BIRADS 4\"). ultrasound Character. Ultrasound result (e.g., \"Normal\", \"Suspicious\"). mri Character. MRI result (e.g., \"Normal\", \"Suspicious\"). cancer_status Character. Actual cancer status, gold standard (e.g., \"Cancer\", \"Cancer\"). age Integer. Patient's age years. family_history Character. Family history breast cancer (e.g., \"Yes\", \"\"). brca_mutation Character. BRCA mutation status (e.g., \"Positive\", \"Negative\"). breast_density Character. Breast density category (e.g., \"\", \"B\", \"C\", \"D\" \"Fatty\", \"Scattered\", \"Heterogeneously Dense\", \"Extremely Dense\").",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/breast_cancer_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Breast Cancer Screening Data — breast_cancer_data",
        "text": "",
        "code": "data(breast_cancer_data) str(breast_cancer_data) #> 'data.frame':\t2000 obs. of  10 variables: #>  $ patient_id    : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ clinical_exam : Factor w/ 2 levels \"Normal\",\"Abnormal\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ mammography   : Factor w/ 2 levels \"BIRADS 1-2\",\"BIRADS 3-5\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ ultrasound    : Factor w/ 2 levels \"Normal\",\"Suspicious\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ mri           : Factor w/ 2 levels \"Normal\",\"Suspicious\": NA NA NA NA NA NA NA 2 NA NA ... #>  $ cancer_status : Factor w/ 2 levels \"No Cancer\",\"Cancer\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ age           : num  67 53 52 51 62 40 63 42 64 53 ... #>  $ family_history: Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 1 1 1 2 1 1 ... #>  $ brca_mutation : Factor w/ 2 levels \"Negative\",\"Positive\": 1 1 1 1 1 1 1 1 1 1 ... #>  $ breast_density: Factor w/ 4 levels \"A\",\"B\",\"C\",\"D\": 2 2 3 2 2 2 1 1 2 2 ... head(breast_cancer_data) #>   patient_id clinical_exam mammography ultrasound  mri cancer_status age #> 1          1        Normal  BIRADS 1-2     Normal <NA>     No Cancer  67 #> 2          2        Normal  BIRADS 1-2     Normal <NA>     No Cancer  53 #> 3          3        Normal  BIRADS 1-2     Normal <NA>     No Cancer  52 #> 4          4        Normal  BIRADS 1-2     Normal <NA>     No Cancer  51 #> 5          5        Normal  BIRADS 1-2     Normal <NA>     No Cancer  62 #> 6          6        Normal  BIRADS 1-2     Normal <NA>     No Cancer  40 #>   family_history brca_mutation breast_density #> 1             No      Negative              B #> 2             No      Negative              B #> 3             No      Negative              C #> 4             No      Negative              B #> 5             No      Negative              B #> 6             No      Negative              B summary(breast_cancer_data$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   40.00   48.00   55.00   55.06   62.00   75.00  table(breast_cancer_data$cancer_status, breast_cancer_data$mammography) #>             #>             BIRADS 1-2 BIRADS 3-5 #>   No Cancer       1891         94 #>   Cancer             0         15"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_auc.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Approximate AUC from sensitivity and specificity — calculate_auc",
        "title": "Approximate AUC from sensitivity and specificity — calculate_auc",
        "text": "Uses formula shown package documentation example: 0.5 * (sens * (1 - spec)) + 0.5 * (1 * (1 - (1 - spec))) + 0.5 * ((1 - sens) * spec).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_auc.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Approximate AUC from sensitivity and specificity — calculate_auc",
        "text": "",
        "code": "calculate_auc(sens, spec)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_auc.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Approximate AUC from sensitivity and specificity — calculate_auc",
        "text": "sens Sensitivity test spec Specificity test",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_auc.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Approximate AUC from sensitivity and specificity — calculate_auc",
        "text": "Numeric AUC value NA inputs valid.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_sensitivity.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Diagnostic metric calculations — calculate_sensitivity",
        "title": "Diagnostic metric calculations — calculate_sensitivity",
        "text": "Utility functions basic diagnostic test statistics.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_sensitivity.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Diagnostic metric calculations — calculate_sensitivity",
        "text": "",
        "code": "calculate_sensitivity(tp, fn)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_sensitivity.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Diagnostic metric calculations — calculate_sensitivity",
        "text": "tp Number true positives fn Number false negatives",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_sensitivity.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Diagnostic metric calculations — calculate_sensitivity",
        "text": "Numeric sensitivity value NA inputs valid.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_specificity.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Calculate test specificity — calculate_specificity",
        "title": "Calculate test specificity — calculate_specificity",
        "text": "Calculate test specificity",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_specificity.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Calculate test specificity — calculate_specificity",
        "text": "",
        "code": "calculate_specificity(tn, fp)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_specificity.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Calculate test specificity — calculate_specificity",
        "text": "tn Number true negatives fp Number false positives",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/calculate_specificity.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Calculate test specificity — calculate_specificity",
        "text": "Numeric specificity value NA inputs valid.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cancer_biomarker_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Cancer Biomarker Data — cancer_biomarker_data",
        "title": "Cancer Biomarker Data — cancer_biomarker_data",
        "text": "simulated dataset containing patient demographics levels various cancer biomarkers, along cancer status stage. Useful evaluating diagnostic prognostic performance biomarkers.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cancer_biomarker_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Cancer Biomarker Data — cancer_biomarker_data",
        "text": "",
        "code": "data(cancer_biomarker_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cancer_biomarker_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Cancer Biomarker Data — cancer_biomarker_data",
        "text": "data frame 500 rows 11 variables: patient_id Integer. Unique patient identifier. age Integer. Patient's age years. age_group Character. Age group patient (e.g., \"<50\", \"50-70\", \">70\"). sex Character. Sex patient (e.g., \"Male\", \"Female\"). ca125 Numeric. Level Cancer Antigen 125 biomarker. he4 Numeric. Level Human Epididymis Protein 4 biomarker. cea Numeric. Level Carcinoembryonic Antigen biomarker. ca199 Numeric. Level Carbohydrate Antigen 19-9 biomarker. roma_score Numeric. Risk Ovarian Malignancy Algorithm score. cancer_status Character. Diagnosis cancer (e.g., \"Cancer\", \"Benign\"). stage Character. Cancer stage applicable (e.g., \"\", \"II\", \"III\", \"IV\", \"Benign\").",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cancer_biomarker_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Cancer Biomarker Data — cancer_biomarker_data",
        "text": "",
        "code": "data(cancer_biomarker_data) str(cancer_biomarker_data) #> 'data.frame':\t500 obs. of  11 variables: #>  $ patient_id   : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ age          : int  63 34 30 54 65 57 67 60 60 75 ... #>  $ age_group    : chr  \"Older\" \"Young\" \"Young\" \"Middle\" ... #>  $ sex          : chr  \"Female\" \"Female\" \"Male\" \"Male\" ... #>  $ ca125        : num  106.2 152 40 157.6 20.8 ... #>  $ he4          : num  99.6 82.5 88.3 188.7 62.9 ... #>  $ cea          : num  2.59 11.89 4.75 11.67 2.91 ... #>  $ ca199        : num  24.7 21.1 32.4 86.4 54.8 65.4 30.3 44.5 21 32.9 ... #>  $ roma_score   : num  60.6 79.2 40.6 91.2 28.7 25.5 93.5 17.9 26.1 91.8 ... #>  $ cancer_status: chr  \"Cancer\" \"Cancer\" \"No Cancer\" \"Cancer\" ... #>  $ stage        : chr  \"Early\" \"Late\" \"N/A\" \"Late\" ... head(cancer_biomarker_data) #>   patient_id age age_group    sex ca125   he4   cea ca199 roma_score #> 1          1  63     Older Female 106.2  99.6  2.59  24.7       60.6 #> 2          2  34     Young Female 152.0  82.5 11.89  21.1       79.2 #> 3          3  30     Young   Male  40.0  88.3  4.75  32.4       40.6 #> 4          4  54    Middle   Male 157.6 188.7 11.67  86.4       91.2 #> 5          5  65     Older   Male  20.8  62.9  2.91  54.8       28.7 #> 6          6  57     Older Female  20.7  47.0  2.21  65.4       25.5 #>   cancer_status stage #> 1        Cancer Early #> 2        Cancer  Late #> 3     No Cancer   N/A #> 4        Cancer  Late #> 5     No Cancer   N/A #> 6     No Cancer   N/A summary(cancer_biomarker_data$ca125) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>    0.00   13.80   27.70   58.71  109.12  248.40      10  table(cancer_biomarker_data$cancer_status) #>  #>    Cancer No Cancer  #>       148       352"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cardiac_troponin_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Cardiac Troponin Data for MI Diagnosis — cardiac_troponin_data",
        "title": "Cardiac Troponin Data for MI Diagnosis — cardiac_troponin_data",
        "text": "simulated dataset containing patient demographics, risk factors, serial high-sensitivity cardiac troponin measurements 0, 3, 6 hours. Includes myocardial infarction (MI) status diagnostic research.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cardiac_troponin_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Cardiac Troponin Data for MI Diagnosis — cardiac_troponin_data",
        "text": "",
        "code": "data(cardiac_troponin_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cardiac_troponin_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Cardiac Troponin Data for MI Diagnosis — cardiac_troponin_data",
        "text": "data frame 500 rows 11 variables: patient_id Integer. Unique patient identifier. age Integer. Patient's age years. sex Character. Sex patient (e.g., \"Male\", \"Female\"). hs_troponin_0h Numeric. High-sensitivity cardiac troponin level baseline (0 hours). hs_troponin_3h Numeric. High-sensitivity cardiac troponin level 3 hours. hs_troponin_6h Numeric. High-sensitivity cardiac troponin level 6 hours. delta_troponin Numeric. Change troponin levels, possibly 0h 3h 0h 6h. diabetes Character. Diabetes status (e.g., \"Yes\", \"\"). hypertension Character. Hypertension status (e.g., \"Yes\", \"\"). smoking Character. Smoking status (e.g., \"Yes\", \"\"). mi_status Character. Myocardial infarction status (e.g., \"MI\", \"MI\").",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cardiac_troponin_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Cardiac Troponin Data for MI Diagnosis — cardiac_troponin_data",
        "text": "",
        "code": "data(cardiac_troponin_data) str(cardiac_troponin_data) #> 'data.frame':\t500 obs. of  11 variables: #>  $ patient_id    : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ age           : int  63 34 30 54 65 57 67 60 60 75 ... #>  $ sex           : chr  \"Female\" \"Female\" \"Male\" \"Male\" ... #>  $ hs_troponin_0h: num  1.8 0 5.3 22.2 0 4.9 0.4 13.2 0.4 1.5 ... #>  $ hs_troponin_3h: num  2 0.1 5.9 24.2 0 5.1 0.4 12.7 0.5 1.6 ... #>  $ hs_troponin_6h: num  2 0.1 5.8 24.5 0 4.9 0.4 13 0.5 1.6 ... #>  $ delta_troponin: num  0.2 0 0.6 2 0 0.2 0 -0.5 0.1 0.1 ... #>  $ diabetes      : chr  \"Yes\" \"No\" \"No\" \"Yes\" ... #>  $ hypertension  : chr  \"Yes\" \"Yes\" \"No\" \"Yes\" ... #>  $ smoking       : chr  \"No\" \"No\" \"No\" \"Yes\" ... #>  $ mi_status     : chr  \"No MI\" \"No MI\" \"No MI\" \"No MI\" ... head(cardiac_troponin_data) #>   patient_id age    sex hs_troponin_0h hs_troponin_3h hs_troponin_6h #> 1          1  63 Female            1.8            2.0            2.0 #> 2          2  34 Female            0.0            0.1            0.1 #> 3          3  30   Male            5.3            5.9            5.8 #> 4          4  54   Male           22.2           24.2           24.5 #> 5          5  65   Male            0.0            0.0            0.0 #> 6          6  57 Female            4.9            5.1            4.9 #>   delta_troponin diabetes hypertension smoking mi_status #> 1            0.2      Yes          Yes      No     No MI #> 2            0.0       No          Yes      No     No MI #> 3            0.6       No           No      No     No MI #> 4            2.0      Yes          Yes     Yes     No MI #> 5            0.0       No          Yes      No     No MI #> 6            0.2       No          Yes      No     No MI summary(cardiac_troponin_data$hs_troponin_0h) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    0.00    0.60    3.55   35.24   12.57  636.40  table(cardiac_troponin_data$mi_status) #>  #>    MI No MI  #>    82   418"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/checkdata.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Data Quality Assessment — checkdata",
        "title": "Data Quality Assessment — checkdata",
        "text": "Data Quality Assessment",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/checkdata.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Data Quality Assessment — checkdata",
        "text": "",
        "code": "checkdata(   data,   var,   showOutliers = TRUE,   showDistribution = TRUE,   showDuplicates = TRUE,   showPatterns = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/checkdata.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Data Quality Assessment — checkdata",
        "text": "data . var . showOutliers Detect display potential outliers using z-score method (|z| > 3). showDistribution Display descriptive statistics distribution characteristics. showDuplicates Identify count duplicate values dataset. showPatterns Analyze patterns missing data value distributions.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/checkdata.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Data Quality Assessment — checkdata",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$missingVals$asDF .data.frame(results$missingVals)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisq.multcomp.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Title — chisq.multcomp",
        "title": "Title — chisq.multcomp",
        "text": "Title",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisq.multcomp.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Title — chisq.multcomp",
        "text": "",
        "code": "chisq.multcomp(x, p.method = \"fdr\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisq.multcomp.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Title — chisq.multcomp",
        "text": "x vector p.method fdr",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttest.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Chi-Square Post-Hoc Tests — chisqposttest",
        "title": "Chi-Square Post-Hoc Tests — chisqposttest",
        "text": "Performs Chi-Square test post-hoc pairwise comparisons.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttest.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Chi-Square Post-Hoc Tests — chisqposttest",
        "text": "",
        "code": "chisqposttest(   data,   rows,   cols,   posthoc = \"bonferroni\",   sig = 0.05,   excl = FALSE,   exp = FALSE,   plot = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttest.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Chi-Square Post-Hoc Tests — chisqposttest",
        "text": "data data data frame. rows variable rows cols variable columns posthoc Method p-value adjustment post-hoc tests sig alpha level significance testing excl exclude missing values analysis exp show expected values table plot display plot standardized residuals",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttest.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Chi-Square Post-Hoc Tests — chisqposttest",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$chisqTable$asDF .data.frame(results$chisqTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttest.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Chi-Square Post-Hoc Tests — chisqposttest",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttestClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Chi-Square Post-Hoc Tests — chisqposttestClass",
        "title": "Chi-Square Post-Hoc Tests — chisqposttestClass",
        "text": "Chi-Square Post-Hoc Tests Chi-Square Post-Hoc Tests",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttestClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Chi-Square Post-Hoc Tests — chisqposttestClass",
        "text": "jmvcore::Analysis -> ClinicoPath::chisqposttestBase -> chisqposttestClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttestClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Chi-Square Post-Hoc Tests — chisqposttestClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::chisqposttestBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttestClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Chi-Square Post-Hoc Tests — chisqposttestClass",
        "text": "chisqposttestClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttestClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Chi-Square Post-Hoc Tests — chisqposttestClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttestClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Chi-Square Post-Hoc Tests — chisqposttestClass",
        "text": "",
        "code": "chisqposttestClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/chisqposttestClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Chi-Square Post-Hoc Tests — chisqposttestClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ciSingle.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Confidence Intervals for Mean Values — ciSingle",
        "title": "Confidence Intervals for Mean Values — ciSingle",
        "text": "Confidence Intervals Mean Values",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ciSingle.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Confidence Intervals for Mean Values — ciSingle",
        "text": "",
        "code": "ciSingle(   data,   deps,   splitBy,   ciWidth = 95,   method = \"t\",   showPlot = FALSE,   bootstrapSamples = 1000,   showDiagnostics = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ciSingle.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Confidence Intervals for Mean Values — ciSingle",
        "text": "data . deps . splitBy . ciWidth Confidence level interval estimation. method Method calculating confidence intervals. showPlot Display confidence interval visualization. bootstrapSamples Number bootstrap samples (using bootstrap method). showDiagnostics Display normality tests diagnostic information.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ciSingle.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Confidence Intervals for Mean Values — ciSingle",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$citable$asDF .data.frame(results$citable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/classification.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Clinical Classification — classification",
        "title": "Clinical Classification — classification",
        "text": "Clinical Classification",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/classification.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Clinical Classification — classification",
        "text": "",
        "code": "classification(   data,   dep,   indep,   testSize = 0.33,   noOfFolds = 10,   testing,   reporting = list(\"classifMetrices\"),   classifier,   minSplit = 20,   minBucket = 0,   complecity = 0.01,   maxCompete = 4,   maxSurrogate = 5,   unsurrogate = 2,   noCrossValidations = 10,   maxDepth = 30,   noOfTrees = 10,   maxDepthRandFor = 30,   sampleFraction = 1,   splitRule,   plotDecisionTree = FALSE,   predictedFreq = FALSE,   printRandForest = FALSE,   predictedFreqRF = FALSE,   balancingMethod = \"none\",   clinicalCutoff = 0.5,   validateMethod = \"holdout\",   bootstrapSamples = 1000,   reportClinicalMetrics = TRUE,   reportConfidenceIntervals = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/classification.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Clinical Classification — classification",
        "text": "data . dep . indep . testSize . noOfFolds . testing . reporting . classifier . minSplit . minBucket . complecity . maxCompete . maxSurrogate . unsurrogate . noCrossValidations . maxDepth . noOfTrees . maxDepthRandFor . sampleFraction . splitRule . plotDecisionTree . predictedFreq . printRandForest . predictedFreqRF . balancingMethod Method handling class imbalance medical datasets. clinicalCutoff Probability threshold clinical decision making. validateMethod Validation method clinical model assessment. bootstrapSamples Number bootstrap samples confidence intervals. reportClinicalMetrics Report sensitivity, specificity, PPV, NPV, likelihood ratios. reportConfidenceIntervals Include 95\\ clinical metrics.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/classification.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Clinical Classification — classification",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/colon.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Colon Cancer Staging and Survival Data — colon",
        "title": "Colon Cancer Staging and Survival Data — colon",
        "text": "Data one first successful trials adjuvant chemotherapy colon cancer. Contains information patient demographics, tumor characteristics, treatment, survival. dataset part survival R package.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/colon.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Colon Cancer Staging and Survival Data — colon",
        "text": "",
        "code": "data(colon)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/colon.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Colon Cancer Staging and Survival Data — colon",
        "text": "data frame 1858 rows 16 variables: id Numeric. Patient identifier. study Numeric. Study identifier (always 1 dataset). rx Character. Treatment regimen: \"Obs\" (Observation), \"Lev\" (Levamisole), \"Lev+5FU\" (Levamisole 5-Fluorouracil). sex Numeric. Sex: 0=Female, 1=Male. age Numeric. Age years. obstruct Numeric. Obstruction colon tumor: 0=, 1=Yes. perfor Numeric. Perforation colon: 0=, 1=Yes. adhere Numeric. Adherence nearby organs: 0=, 1=Yes. nodes Numeric. Number lymph nodes detectable cancer. status Numeric. Censoring status: 0=Alive (censored), 1=Dead Recurrence (event). differ Numeric. Differentiation tumor: 1=Well, 2=Moderate, 3=Poor. extent Numeric. Extent local spread: 1=Submucosa, 2=Muscle, 3=Serosa, 4=Contiguous structures. surg Numeric. Time surgery registration: 0=Short (<1 month), 1=Long (>=1 month). node4 Numeric. 4 positive lymph nodes: 0=(<=4), 1=Yes (>4). time Numeric. Days registration event (death recurrence) censoring. etype Numeric. Event type: 1=Recurrence, 2=Death.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/colon.html",
        "id": "source",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Source",
        "title": "Colon Cancer Staging and Survival Data — colon",
        "text": "Original source: Moertel CG et al. (1990). Levamisole fluorouracil adjuvant therapy resected colon carcinoma. New England Journal Medicine, 322, 352-358. Included survival R package.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/colon.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Colon Cancer Staging and Survival Data — colon",
        "text": "",
        "code": "data(colon) str(colon) #> spc_tbl_ [1,858 × 16] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>  $ id      : num [1:1858] 1 1 2 2 3 3 4 4 5 5 ... #>  $ study   : num [1:1858] 1 1 1 1 1 1 1 1 1 1 ... #>  $ rx      : chr [1:1858] \"Lev+5FU\" \"Lev+5FU\" \"Lev+5FU\" \"Lev+5FU\" ... #>  $ sex     : num [1:1858] 1 1 1 1 0 0 0 0 1 1 ... #>  $ age     : num [1:1858] 43 43 63 63 71 71 66 66 69 69 ... #>  $ obstruct: num [1:1858] 0 0 0 0 0 0 1 1 0 0 ... #>  $ perfor  : num [1:1858] 0 0 0 0 0 0 0 0 0 0 ... #>  $ adhere  : num [1:1858] 0 0 0 0 1 1 0 0 0 0 ... #>  $ nodes   : num [1:1858] 5 5 1 1 7 7 6 6 22 22 ... #>  $ status  : num [1:1858] 1 1 0 0 1 1 1 1 1 1 ... #>  $ differ  : num [1:1858] 2 2 2 2 2 2 2 2 2 2 ... #>  $ extent  : num [1:1858] 3 3 3 3 2 2 3 3 3 3 ... #>  $ surg    : num [1:1858] 0 0 0 0 0 0 1 1 1 1 ... #>  $ node4   : num [1:1858] 1 1 0 0 1 1 1 1 1 1 ... #>  $ time    : num [1:1858] 1521 968 3087 3087 963 ... #>  $ etype   : num [1:1858] 2 1 2 1 2 1 2 1 2 1 ... #>  - attr(*, \"spec\")=List of 3 #>   ..$ cols   :List of 16 #>   .. ..$ id      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ study   : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ rx      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ sex     : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ age     : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ obstruct: list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ perfor  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ adhere  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ nodes   : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ status  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ differ  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ extent  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ surg    : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ node4   : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ time    : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ etype   : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   ..$ default: list() #>   .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\" #>   ..$ skip   : num 1 #>   ..- attr(*, \"class\")= chr \"col_spec\" head(colon) #> # A tibble: 6 × 16 #>      id study rx        sex   age obstruct perfor adhere nodes status differ #>   <dbl> <dbl> <chr>   <dbl> <dbl>    <dbl>  <dbl>  <dbl> <dbl>  <dbl>  <dbl> #> 1     1     1 Lev+5FU     1    43        0      0      0     5      1      2 #> 2     1     1 Lev+5FU     1    43        0      0      0     5      1      2 #> 3     2     1 Lev+5FU     1    63        0      0      0     1      0      2 #> 4     2     1 Lev+5FU     1    63        0      0      0     1      0      2 #> 5     3     1 Obs         0    71        0      0      1     7      1      2 #> 6     3     1 Obs         0    71        0      0      1     7      1      2 #> # ℹ 5 more variables: extent <dbl>, surg <dbl>, node4 <dbl>, time <dbl>, #> #   etype <dbl> summary(colon$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.00   53.00   61.00   59.75   69.00   85.00  table(colon$rx, colon$status) #>           #>             0   1 #>   Lev     287 333 #>   Lev+5FU 366 242 #>   Obs     285 345"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/combined_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Combined Clinical and Event Data — combined_data",
        "title": "Combined Clinical and Event Data — combined_data",
        "text": "simulated dataset combines longitudinal patient data, potentially including clinical observations, biomarker measurements, specific events time. Suitable analyses involving time-varying covariates event history.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/combined_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Combined Clinical and Event Data — combined_data",
        "text": "",
        "code": "data(combined_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/combined_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Combined Clinical and Event Data — combined_data",
        "text": "data frame 54 rows 8 variables: patient_id Character. Unique patient identifier. data_type Character. Type data record (e.g., \"Clinical\", \"Biomarker\", \"Treatment\"). start_time Integer. Start time observation event interval. end_time Integer. End time observation event interval. response_status Character. Patient's response status given time (e.g., \"CR\", \"PR\", \"SD\", \"PD\"). on_study Logical. Indicates patient study time record (TRUE/FALSE). event_time Integer. Time specific event occurred. event_type Character. Type event recorded (e.g., \"Adverse Event\", \"Progression\", \"Dose Change\").",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/combined_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Combined Clinical and Event Data — combined_data",
        "text": "",
        "code": "data(combined_data) str(combined_data) #> 'data.frame':\t54 obs. of  8 variables: #>  $ patient_id     : chr  \"PT001\" \"PT001\" \"PT001\" \"PT002\" ... #>  $ data_type      : chr  \"lane\" \"lane\" \"lane\" \"lane\" ... #>  $ start_time     : int  0 3 8 0 6 0 2 5 9 0 ... #>  $ end_time       : int  3 8 12 6 10 2 5 9 14 4 ... #>  $ response_status: chr  \"PR\" \"CR\" \"CR\" \"SD\" ... #>  $ on_study       : logi  FALSE FALSE TRUE FALSE TRUE FALSE ... #>  $ event_time     : int  NA NA NA NA NA NA NA NA NA NA ... #>  $ event_type     : chr  NA NA NA NA ... head(combined_data) #>   patient_id data_type start_time end_time response_status on_study event_time #> 1      PT001      lane          0        3              PR    FALSE         NA #> 2      PT001      lane          3        8              CR    FALSE         NA #> 3      PT001      lane          8       12              CR     TRUE         NA #> 4      PT002      lane          0        6              SD    FALSE         NA #> 5      PT002      lane          6       10              PR     TRUE         NA #> 6      PT003      lane          0        2              SD    FALSE         NA #>   event_type #> 1       <NA> #> 2       <NA> #> 3       <NA> #> 4       <NA> #> 5       <NA> #> 6       <NA> table(combined_data$data_type, combined_data$response_status) #>         #>         CR PD PR SD #>   event  0  0  0  0 #>   lane   7  4 10  6"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/comparingSurvival.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Comparing Survival Outcomes — comparingSurvival",
        "title": "Comparing Survival Outcomes — comparingSurvival",
        "text": "Comparing Survival Outcomes",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/comparingSurvival.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Comparing Survival Outcomes — comparingSurvival",
        "text": "",
        "code": "comparingSurvival(   data,   times,   status,   groups,   ciyn = FALSE,   loglogyn = FALSE,   timeunits = \"None\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/comparingSurvival.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Comparing Survival Outcomes — comparingSurvival",
        "text": "data . times . status . groups . ciyn . loglogyn . timeunits .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/comparingSurvival.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Comparing Survival Outcomes — comparingSurvival",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$compsurvTable1$asDF .data.frame(results$compsurvTable1)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvival.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Overall, Cause Specific, and Competing Survival — competingsurvival",
        "title": "Overall, Cause Specific, and Competing Survival — competingsurvival",
        "text": "Overall, Cause Specific, Competing Survival.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvival.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Overall, Cause Specific, and Competing Survival — competingsurvival",
        "text": "",
        "code": "competingsurvival(   data,   explanatory,   overalltime,   outcome,   dod,   dooc,   awd,   awod,   analysistype = \"overall\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvival.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Overall, Cause Specific, and Competing Survival — competingsurvival",
        "text": "data data data frame. explanatory . overalltime . outcome . dod . dooc . awd . awod . analysistype .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvival.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Overall, Cause Specific, and Competing Survival — competingsurvival",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvival.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Overall, Cause Specific, and Competing Survival — competingsurvival",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvivalClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Competing Survival Analysis — competingsurvivalClass",
        "title": "Competing Survival Analysis — competingsurvivalClass",
        "text": "Competing Survival Analysis Competing Survival Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvivalClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Competing Survival Analysis — competingsurvivalClass",
        "text": "jmvcore::Analysis -> ClinicoPath::competingsurvivalBase -> competingsurvivalClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvivalClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Competing Survival Analysis — competingsurvivalClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::competingsurvivalBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvivalClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Competing Survival Analysis — competingsurvivalClass",
        "text": "competingsurvivalClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvivalClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Competing Survival Analysis — competingsurvivalClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvivalClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Competing Survival Analysis — competingsurvivalClass",
        "text": "",
        "code": "competingsurvivalClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/competingsurvivalClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Competing Survival Analysis — competingsurvivalClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/computeNRI.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Compute Net Reclassification Index (NRI) — computeNRI",
        "title": "Compute Net Reclassification Index (NRI) — computeNRI",
        "text": "Compute Net Reclassification Index (NRI)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/computeNRI.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Compute Net Reclassification Index (NRI) — computeNRI",
        "text": "",
        "code": "computeNRI(new_values, ref_values, actual, direction = \">=\", thresholds = NULL)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/computeNRI.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Compute Net Reclassification Index (NRI) — computeNRI",
        "text": "new_values Test values new test ref_values Test values reference test actual Binary outcome vector (0/1) direction Classification direction thresholds Risk category thresholds (NULL continuous NRI)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/computeNRI.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Compute Net Reclassification Index (NRI) — computeNRI",
        "text": "List containing NRI components",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consort.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "CONSORT Flowchart — consort",
        "title": "CONSORT Flowchart — consort",
        "text": "CONSORT Flowchart",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consort.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "CONSORT Flowchart — consort",
        "text": "",
        "code": "consort(   data,   initialN = 0,   notEligibleN = 0,   notEligibleText = \"\",   randomizedN = 0,   arm1Label = \"Intervention\",   arm1N = 0,   arm1ReceivedN = 0,   arm1LostN = 0,   arm1AnalyzedN = 0,   arm2Label = \"Control\",   arm2N = 0,   arm2ReceivedN = 0,   arm2LostN = 0,   arm2AnalyzedN = 0,   excludedText = \"\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consort.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "CONSORT Flowchart — consort",
        "text": "data data data frame. initialN Total number assessed eligibility notEligibleN Number meeting eligibility criteria notEligibleText List reasons exclusion (comma separated) randomizedN Number randomized interventions arm1Label . arm1N . arm1ReceivedN . arm1LostN . arm1AnalyzedN . arm2Label . arm2N . arm2ReceivedN . arm2LostN . arm2AnalyzedN . excludedText Reasons post-randomization exclusions (comma separated)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consort.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "CONSORT Flowchart — consort",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summary$asDF .data.frame(results$summary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consortClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "CONSORT Flowchart — consortClass",
        "title": "CONSORT Flowchart — consortClass",
        "text": "CONSORT Flowchart CONSORT Flowchart",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consortClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "CONSORT Flowchart — consortClass",
        "text": "jmvcore::Analysis -> ClinicoPath::consortBase -> consortClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consortClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "CONSORT Flowchart — consortClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::consortBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consortClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "CONSORT Flowchart — consortClass",
        "text": "consortClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consortClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "CONSORT Flowchart — consortClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consortClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "CONSORT Flowchart — consortClass",
        "text": "",
        "code": "consortClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/consortClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "CONSORT Flowchart — consortClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTables.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Contingency Tables — contTables",
        "title": "Contingency Tables — contTables",
        "text": "X² test association (confused X² goodness fit) used test whether two categorical variables independent associated. p-value low, suggests variables independent, relationship two variables.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTables.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Contingency Tables — contTables",
        "text": "",
        "code": "contTables(   data,   rows,   cols,   counts = NULL,   layers = NULL,   chiSq = TRUE,   chiSqCorr = FALSE,   likeRat = FALSE,   fisher = FALSE,   contCoef = FALSE,   phiCra = FALSE,   logOdds = FALSE,   odds = FALSE,   relRisk = FALSE,   ci = TRUE,   ciWidth = 95,   gamma = FALSE,   taub = FALSE,   obs = TRUE,   exp = FALSE,   pcRow = FALSE,   pcCol = FALSE,   pcTot = FALSE,   formula )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTables.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Contingency Tables — contTables",
        "text": "data data data frame rows variable use rows contingency table (necessary providing formula, see examples) cols variable use columns contingency table (necessary providing formula, see examples) counts variable use counts contingency table (necessary providing formula, see examples) layers variables use split contingency table (necessary providing formula, see examples) chiSq TRUE (default) FALSE, provide X² chiSqCorr TRUE FALSE (default), provide X² continuity correction likeRat TRUE FALSE (default), provide likelihood ratio fisher TRUE FALSE (default), provide Fisher's exact test contCoef TRUE FALSE (default), provide contingency coefficient phiCra TRUE FALSE (default), provide Phi Cramer's V logOdds TRUE FALSE (default), provide log odds ratio (available 2x2 tables) odds TRUE FALSE (default), provide odds ratio (available 2x2 tables) relRisk TRUE FALSE (default), provide relative risk (available 2x2 tables) ci TRUE FALSE (default), provide confidence intervals comparative measures ciWidth number 50 99.9 (default: 95), width confidence intervals provide gamma TRUE FALSE (default), provide gamma taub TRUE FALSE (default), provide Kendall's tau-b obs TRUE FALSE (default), provide observed counts exp TRUE FALSE (default), provide expected counts pcRow TRUE FALSE (default), provide row percentages pcCol TRUE FALSE (default), provide column percentages pcTot TRUE FALSE (default), provide total percentages formula (optional) formula use, see examples",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTables.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Contingency Tables — contTables",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$freqs$asDF .data.frame(results$freqs)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTables.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Contingency Tables — contTables",
        "text": "",
        "code": "# \\donttest{ # data('HairEyeColor') # dat <- as.data.frame(HairEyeColor)  # contTables(formula = Freq ~ Hair:Eye, dat)  # #  CONTINGENCY TABLES # #  Contingency Tables #  ----------------------------------------------------- #    Hair     Brown    Blue    Hazel    Green    Total #  ----------------------------------------------------- #    Black       68      20       15        5      108 #    Brown      119      84       54       29      286 #    Red         26      17       14       14       71 #    Blond        7      94       10       16      127 #    Total      220     215       93       64      592 #  ----------------------------------------------------- # # #  X² Tests #  ------------------------------- #          Value    df    p #  ------------------------------- #    X²      138     9    < .001 #    N       592 #  ------------------------------- #  # Alternatively, omit the left of the formula (`Freq`) if each row # represents a single observation:  # contTables(formula = ~ Hair:Eye, dat) # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTablesPaired.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Paired Samples Contingency Tables — contTablesPaired",
        "title": "Paired Samples Contingency Tables — contTablesPaired",
        "text": "McNemar test",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTablesPaired.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Paired Samples Contingency Tables — contTablesPaired",
        "text": "",
        "code": "contTablesPaired(   data,   rows,   cols,   counts = NULL,   chiSq = TRUE,   chiSqCorr = FALSE,   exact = FALSE,   pcRow = FALSE,   pcCol = FALSE,   formula )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTablesPaired.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Paired Samples Contingency Tables — contTablesPaired",
        "text": "data data data frame rows variable use rows contingency table (necessary providing formula, see examples) cols variable use columns contingency table (necessary providing formula, see examples) counts variable use counts contingency table (necessary providing formula, see examples) chiSq TRUE (default) FALSE, provide X² chiSqCorr TRUE FALSE (default), provide X² continuity correction exact TRUE FALSE (default), provide exact log odds ratio (requires exact2x2 installed) pcRow TRUE FALSE (default), provide row percentages pcCol TRUE FALSE (default), provide column percentages formula (optional) formula use, see examples",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTablesPaired.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Paired Samples Contingency Tables — contTablesPaired",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$freqs$asDF .data.frame(results$freqs)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/contTablesPaired.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Paired Samples Contingency Tables — contTablesPaired",
        "text": "",
        "code": "dat <- data.frame(     `1st survey` = c('Approve', 'Approve', 'Disapprove', 'Disapprove'),     `2nd survey` = c('Approve', 'Disapprove', 'Approve', 'Disapprove'),     `Counts` = c(794, 150, 86, 570),     check.names=FALSE)  contTablesPaired(formula = Counts ~ `1st survey`:`2nd survey`, data = dat) #>  #>  PAIRED SAMPLES CONTINGENCY TABLES #>  #>  Contingency Tables                                #>  ────────────────────────────────────────────────  #>    1st survey    Approve    Disapprove    Total    #>  ────────────────────────────────────────────────  #>    Approve           794           150      944    #>    Disapprove         86           570      656    #>    Total             880           720     1600    #>  ────────────────────────────────────────────────  #>  #>  #>  McNemar Test                           #>  ─────────────────────────────────────  #>          Value       df    p            #>  ─────────────────────────────────────  #>    χ²    17.35593     1    0.0000310    #>    N     1600.000                       #>  ─────────────────────────────────────  #>   # #  PAIRED SAMPLES CONTINGENCY TABLES # #  Contingency Tables #  ------------------------------------------------ #    1st survey    Approve    Disapprove    Total #  ------------------------------------------------ #    Approve           794           150      944 #    Disapprove         86           570      656 #    Total             880           720     1600 #  ------------------------------------------------ # # #  McNemar Test #  ----------------------------------------------------- #                                Value    df    p #  ----------------------------------------------------- #    X²                           17.4     1    < .001 #    X² continuity correction     16.8     1    < .001 #  ----------------------------------------------------- #   # Alternatively, omit the left of the formula (`Counts`) from the # formula if each row represents a single observation:  contTablesPaired(formula = ~ `1st survey`:`2nd survey`, data = dat) #>  #>  PAIRED SAMPLES CONTINGENCY TABLES #>  #>  Contingency Tables                                #>  ────────────────────────────────────────────────  #>    1st survey    Approve    Disapprove    Total    #>  ────────────────────────────────────────────────  #>    Approve             1             1        2    #>    Disapprove          1             1        2    #>    Total               2             2        4    #>  ────────────────────────────────────────────────  #>  #>  #>  McNemar Test                           #>  ─────────────────────────────────────  #>          Value       df    p            #>  ─────────────────────────────────────  #>    χ²    0.000000     1    1.0000000    #>    N            4                       #>  ─────────────────────────────────────  #>"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlation.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Correlation — correlation",
        "title": "Correlation — correlation",
        "text": "Function Correlation.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlation.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Correlation — correlation",
        "text": "",
        "code": "correlation(data, vars)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlation.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Correlation — correlation",
        "text": "data data data frame. vars .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlation.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Correlation — correlation",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlation.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Correlation — correlation",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlationClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Correlation Analysis — correlationClass",
        "title": "Correlation Analysis — correlationClass",
        "text": "Correlation Analysis Correlation Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlationClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Correlation Analysis — correlationClass",
        "text": "jmvcore::Analysis -> ClinicoPath::correlationBase -> correlationClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlationClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Correlation Analysis — correlationClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::correlationBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlationClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Correlation Analysis — correlationClass",
        "text": "correlationClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlationClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Correlation Analysis — correlationClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlationClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Correlation Analysis — correlationClass",
        "text": "",
        "code": "correlationClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/correlationClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Correlation Analysis — correlationClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotest.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Co-Testing Analysis — cotest",
        "title": "Co-Testing Analysis — cotest",
        "text": "Function analyzing combined results two concurrent diagnostic tests. Calculates post-test probabilities based various scenarios (either test positive, positive, negative).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotest.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Co-Testing Analysis — cotest",
        "text": "",
        "code": "cotest(   test1_sens = 0.8,   test1_spec = 0.9,   test2_sens = 0.75,   test2_spec = 0.95,   indep = TRUE,   cond_dep_pos = 0.05,   cond_dep_neg = 0.05,   prevalence = 0.1,   fnote = FALSE,   fagan = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotest.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Co-Testing Analysis — cotest",
        "text": "test1_sens Sensitivity (true positive rate) Test 1. test1_spec Specificity (true negative rate) Test 1. test2_sens Sensitivity (true positive rate) Test 2. test2_spec Specificity (true negative rate) Test 2. indep Assume tests conditionally independent (default true). cond_dep_pos Conditional dependence tests subjects disease. Value 0 (independence) 1 (complete dependence). cond_dep_neg Conditional dependence tests subjects without disease. Value 0 (independence) 1 (complete dependence). prevalence Prior probability (disease prevalence population). Requires value 0.001 0.999. fnote . fagan .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotest.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Co-Testing Analysis — cotest",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$testParamsTable$asDF .data.frame(results$testParamsTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotest.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Co-Testing Analysis — cotest",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotestClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Co-Testing Analysis — cotestClass",
        "title": "Co-Testing Analysis — cotestClass",
        "text": "Co-Testing Analysis Co-Testing Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotestClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Co-Testing Analysis — cotestClass",
        "text": "jmvcore::Analysis -> ClinicoPath::cotestBase -> cotestClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotestClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Co-Testing Analysis — cotestClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::cotestBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotestClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Co-Testing Analysis — cotestClass",
        "text": "cotestClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotestClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Co-Testing Analysis — cotestClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotestClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Co-Testing Analysis — cotestClass",
        "text": "",
        "code": "cotestClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/cotestClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Co-Testing Analysis — cotestClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/covid_screening_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "COVID-19 Screening Data — covid_screening_data",
        "title": "COVID-19 Screening Data — covid_screening_data",
        "text": "simulated dataset evaluating COVID-19 screening strategies. includes patient identifiers, results various screening tests (rapid antigen, PCR, chest CT), symptom scores, actual COVID-19 status, demographic/risk information.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/covid_screening_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "COVID-19 Screening Data — covid_screening_data",
        "text": "",
        "code": "data(covid_screening_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/covid_screening_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "COVID-19 Screening Data — covid_screening_data",
        "text": "data frame 1000 rows 8 variables: patient_id Integer. Unique patient identifier. rapid_antigen Character. Result rapid antigen test (e.g., \"Positive\", \"Negative\"). pcr Character. Result PCR test (e.g., \"Positive\", \"Negative\"). chest_ct Character. Result chest CT scan (e.g., \"Normal\", \"Abnormal\", \"Performed\"). symptom_score Integer. Clinical symptom score, potentially based standardized checklist. covid_status Character. Actual COVID-19 status, confirmed gold standard (e.g., \"Positive\", \"Negative\"). age Integer. Patient's age years. risk_group Character. Patient's risk group (e.g., \"High\", \"Medium\", \"Low\").",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/covid_screening_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "COVID-19 Screening Data — covid_screening_data",
        "text": "",
        "code": "data(covid_screening_data) str(covid_screening_data) #> 'data.frame':\t1000 obs. of  8 variables: #>  $ patient_id   : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ rapid_antigen: Factor w/ 2 levels \"Negative\",\"Positive\": 1 2 1 1 1 1 1 1 1 1 ... #>  $ pcr          : Factor w/ 2 levels \"Negative\",\"Positive\": 1 2 NA NA 1 1 NA 1 1 NA ... #>  $ chest_ct     : Factor w/ 2 levels \"Normal\",\"Abnormal\": 2 1 1 1 1 1 1 1 1 1 ... #>  $ symptom_score: num  8 6 1 1 5 5 5 4 2 5 ... #>  $ covid_status : Factor w/ 2 levels \"Negative\",\"Positive\": 2 2 1 1 1 1 1 1 1 1 ... #>  $ age          : num  35 33 39 28 62 32 64 23 58 36 ... #>  $ risk_group   : Factor w/ 3 levels \"High\",\"Low\",\"Medium\": 2 2 2 2 2 3 3 3 2 2 ... head(covid_screening_data) #>   patient_id rapid_antigen      pcr chest_ct symptom_score covid_status age #> 1          1      Negative Negative Abnormal             8     Positive  35 #> 2          2      Positive Positive   Normal             6     Positive  33 #> 3          3      Negative     <NA>   Normal             1     Negative  39 #> 4          4      Negative     <NA>   Normal             1     Negative  28 #> 5          5      Negative Negative   Normal             5     Negative  62 #> 6          6      Negative Negative   Normal             5     Negative  32 #>   risk_group #> 1        Low #> 2        Low #> 3        Low #> 4        Low #> 5        Low #> 6     Medium table(covid_screening_data$covid_status, covid_screening_data$rapid_antigen) #>            #>            Negative Positive #>   Negative      830       21 #>   Positive       46      103"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstable.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Cross Tables — crosstable",
        "title": "Cross Tables — crosstable",
        "text": "Function making Cross Tables.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstable.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Cross Tables — crosstable",
        "text": "",
        "code": "crosstable(   data,   vars,   group,   sty = \"nejm\",   excl = FALSE,   cont = \"mean\",   pcat = \"chisq\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstable.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Cross Tables — crosstable",
        "text": "data data data frame. vars variable(s) appear rows cross table. group variable appear columns (groups) table. sty . excl Exclude rows missing values. cont . pcat .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstable.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Cross Tables — crosstable",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstable.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Cross Tables — crosstable",
        "text": "",
        "code": "# \\donttest{ # Example usage: # dat <- as.data.frame(your_data) # ClinicoPath::crosstable( #   data = dat, #   vars = vars(YourRowVariable), #   group = \"YourGroupingVariable\", #   sty = \"finalfit\", #   excl = TRUE, #   cont = \"mean\", #   pcat = \"chisq\", #   exportCSV = TRUE # ) # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstableClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "title": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "text": "function generates cross tables comparing dependent variable (rows) grouping variable (columns) automatically selects hypothesis tests appropriate clinical research. output tables rendered various styles (e.g., arsenal, finalfit, gtsummary, NEJM, Lancet, hmisc) intended pathologists oncologists. addition visualizing associations, function now optionally provides exportable CSV version cross table.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstableClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "text": "function produces HTML table output, requested, additional downloadable CSV export.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstableClass.html",
        "id": "details",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Details",
        "title": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "text": "function cleans variable names applies original labels. builds formula based cleaned data performs appropriate statistical test (e.g. chi-square Fisher’s exact test). Detailed user guidance provided via HTML -messages.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstableClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "text": "jmvcore::Analysis -> ClinicoPath::crosstableBase -> crosstableClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstableClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::crosstableBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstableClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "text": "crosstableClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstableClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstableClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "text": "",
        "code": "crosstableClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/crosstableClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Cross Table for Clinicopathological Comparisons — crosstableClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_longitudinal.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Longitudinal Measurement Data — data_longitudinal",
        "title": "Longitudinal Measurement Data — data_longitudinal",
        "text": "sample dataset representing longitudinal measurements multiple patients several time points.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_longitudinal.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Longitudinal Measurement Data — data_longitudinal",
        "text": "",
        "code": "data(data_longitudinal)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_longitudinal.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Longitudinal Measurement Data — data_longitudinal",
        "text": "data frame 140 rows 3 variables: PatientID Character. Unique identifier patient. Time Integer. time point measurement taken (e.g., day, week, month). Measurement Numeric. value measurement recorded given time point patient.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_longitudinal.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Longitudinal Measurement Data — data_longitudinal",
        "text": "",
        "code": "data(data_longitudinal) str(data_longitudinal) #> 'data.frame':\t140 obs. of  3 variables: #>  $ PatientID  : chr  \"PT1\" \"PT1\" \"PT1\" \"PT1\" ... #>  $ Time       : int  0 2 4 6 8 10 12 0 2 4 ... #>  $ Measurement: num  73.6 55 78.3 81.1 37.2 60.9 78.7 88.9 62.1 74 ... head(data_longitudinal) #>   PatientID Time Measurement #> 1       PT1    0        73.6 #> 2       PT1    2        55.0 #> 3       PT1    4        78.3 #> 4       PT1    6        81.1 #> 5       PT1    8        37.2 #> 6       PT1   10        60.9 summary(data_longitudinal$Measurement) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   25.70   42.48   52.60   53.83   61.88   88.90  # Plot measurements for a specific patient (if plotting package loaded) # if (requireNamespace(\"ggplot2\", quietly = TRUE) && \"PT001\" %in% data_longitudinal$PatientID) { #   ggplot2::ggplot(data_longitudinal[data_longitudinal$PatientID == \"PT001\",], #                   ggplot2::aes(x = Time, y = Measurement)) + #     ggplot2::geom_line() + ggplot2::geom_point() + #     ggplot2::ggtitle(\"Measurements for Patient PT001\") # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_percentage.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Patient Response Percentage Data — data_percentage",
        "title": "Patient Response Percentage Data — data_percentage",
        "text": "dataset containing patient identifiers corresponding treatment response values, likely expressed percentages.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_percentage.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Patient Response Percentage Data — data_percentage",
        "text": "",
        "code": "data(data_percentage)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_percentage.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Patient Response Percentage Data — data_percentage",
        "text": "data frame 10 rows 2 variables: PatientID Character. Unique identifier patient. Response Integer. treatment response value, presumably percentage (e.g., percent change tumor size).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_percentage.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Patient Response Percentage Data — data_percentage",
        "text": "",
        "code": "data(data_percentage) str(data_percentage) #> 'data.frame':\t10 obs. of  2 variables: #>  $ PatientID: chr  \"PT1\" \"PT2\" \"PT3\" \"PT4\" ... #>  $ Response : int  -100 -45 -30 -20 -10 0 10 20 30 40 head(data_percentage) #>   PatientID Response #> 1       PT1     -100 #> 2       PT2      -45 #> 3       PT3      -30 #> 4       PT4      -20 #> 5       PT5      -10 #> 6       PT6        0 summary(data_percentage$Response) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  -100.0   -27.5    -5.0   -10.5    17.5    40.0"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_raw.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Raw Measurement Data Over Time — data_raw",
        "title": "Raw Measurement Data Over Time — data_raw",
        "text": "dataset containing raw measurement values patients different time points. represent various clinical experimental raw readings.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_raw.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Raw Measurement Data Over Time — data_raw",
        "text": "",
        "code": "data(data_raw)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_raw.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Raw Measurement Data Over Time — data_raw",
        "text": "data frame 15 rows 3 variables: PatientID Character. Unique identifier patient. Time Integer. time point measurement taken (e.g., day, cycle, visit number). Measurement Integer. raw value measurement recorded.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_raw.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Raw Measurement Data Over Time — data_raw",
        "text": "",
        "code": "data(data_raw) str(data_raw) #> 'data.frame':\t15 obs. of  3 variables: #>  $ PatientID  : chr  \"PT1\" \"PT1\" \"PT1\" \"PT2\" ... #>  $ Time       : int  0 2 4 0 2 4 0 2 4 0 ... #>  $ Measurement: int  50 40 30 60 45 35 55 50 45 70 ... head(data_raw) #>   PatientID Time Measurement #> 1       PT1    0          50 #> 2       PT1    2          40 #> 3       PT1    4          30 #> 4       PT2    0          60 #> 5       PT2    2          45 #> 6       PT2    4          35 summary(data_raw$Measurement) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>    30.0    45.0    50.0    51.0    57.5    70.0"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_subgroup.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Subgroup Analysis Data — data_subgroup",
        "title": "Subgroup Analysis Data — data_subgroup",
        "text": "dataset containing patient responses, potentially treatment, along grouping variable subgroup analysis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_subgroup.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Subgroup Analysis Data — data_subgroup",
        "text": "",
        "code": "data(data_subgroup)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_subgroup.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Subgroup Analysis Data — data_subgroup",
        "text": "data frame 12 rows 3 variables: PatientID Character. Unique identifier patient. Response Integer. response value recorded patient. Group Character. subgroup patient belongs (e.g., \"GroupA\", \"GroupB\").",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/data_subgroup.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Subgroup Analysis Data — data_subgroup",
        "text": "",
        "code": "data(data_subgroup) str(data_subgroup) #> 'data.frame':\t12 obs. of  3 variables: #>  $ PatientID: chr  \"PT1\" \"PT2\" \"PT3\" \"PT4\" ... #>  $ Response : int  -100 -60 -35 -20 -15 0 5 10 25 40 ... #>  $ Group    : chr  \"A\" \"A\" \"A\" \"A\" ... head(data_subgroup) #>   PatientID Response Group #> 1       PT1     -100     A #> 2       PT2      -60     A #> 3       PT3      -35     A #> 4       PT4      -20     A #> 5       PT5      -15     B #> 6       PT6        0     B table(data_subgroup$Group) #>  #> A B C  #> 4 4 4  summary(data_subgroup$Response) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.  #> -100.000  -23.750    2.500   -3.333   28.750   60.000"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataquality.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Data Quality Assessment — dataquality",
        "title": "Data Quality Assessment — dataquality",
        "text": "module provides data quality assessment including duplicate detection, missing value analysis, data completeness summary (similar sumvar's dup() function).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataquality.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Data Quality Assessment — dataquality",
        "text": "",
        "code": "dataquality(   data,   vars,   check_duplicates = TRUE,   check_missing = TRUE,   complete_cases_only = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataquality.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Data Quality Assessment — dataquality",
        "text": "data data data frame. vars Variables assess data quality. none selected,  entire dataset analyzed. check_duplicates TRUE, analyzes duplicate values within variable across  entire dataset. check_missing TRUE, provides detailed missing value statistics patterns. complete_cases_only TRUE, analyzes completeness across selected variables simultaneously.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataquality.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Data Quality Assessment — dataquality",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataquality.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Data Quality Assessment — dataquality",
        "text": "",
        "code": "# \\donttest{ # Example: # 1. Load your data frame. # 2. Select variables to check for data quality issues. # 3. Choose analysis type (duplicates, missing values, or both). # 4. Run the dataquality module to see comprehensive data quality report. # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataqualityClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Data Quality Assessment — dataqualityClass",
        "title": "Data Quality Assessment — dataqualityClass",
        "text": "Data Quality Assessment Data Quality Assessment",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataqualityClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Data Quality Assessment — dataqualityClass",
        "text": "HTML summary data quality issues including duplicates missing values",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataqualityClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Data Quality Assessment — dataqualityClass",
        "text": "jmvcore::Analysis -> ClinicoPath::dataqualityBase -> dataqualityClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataqualityClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Data Quality Assessment — dataqualityClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::dataqualityBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataqualityClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Data Quality Assessment — dataqualityClass",
        "text": "dataqualityClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataqualityClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Data Quality Assessment — dataqualityClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataqualityClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Data Quality Assessment — dataqualityClass",
        "text": "",
        "code": "dataqualityClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dataqualityClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Data Quality Assessment — dataqualityClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/date_formats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Date Format Handling Example Data — date_formats",
        "title": "Date Format Handling Example Data — date_formats",
        "text": "dataset showcasing various date formats patient-related information. appears designed test demonstrate date parsing handling capabilities, well general data manipulation.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/date_formats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Date Format Handling Example Data — date_formats",
        "text": "",
        "code": "data(date_formats)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/date_formats.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Date Format Handling Example Data — date_formats",
        "text": "data frame 40 rows 15 variables: PatientID Character. Unique patient identifier. StartDate Date. start date, likely treatment observation period. Duration Numeric. Duration, possibly days months, related event period. Age Numeric. Patient's age. Weight Numeric. Patient's weight. ECOG Integer. ECOG (Eastern Cooperative Oncology Group) performance status score. PriorTherapy Character. Information prior therapies (e.g., \"Yes\", \"\", type therapy). EndDate Date. end date, corresponding StartDate. BestResponse Character. Best response treatment (e.g., \"CR\", \"PR\", \"SD\", \"PD\"). StartDate_YMD Date. Start date Year-Month-Day format. StartDate_DMY Date. Start date Day-Month-Year format. StartDate_MDY Date. Start date Month-Day-Year format. EndDate_YMD Date. End date Year-Month-Day format. EndDate_DMY Date. End date Day-Month-Year format. EndDate_MDY Date. End date Month-Day-Year format.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/date_formats.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Date Format Handling Example Data — date_formats",
        "text": "",
        "code": "data(date_formats) str(date_formats) #> 'data.frame':\t40 obs. of  15 variables: #>  $ PatientID    : chr  \"PT001\" \"PT002\" \"PT003\" \"PT004\" ... #>  $ StartDate    : Date, format: \"2020-01-02\" \"2020-02-18\" ... #>  $ Duration     : num  473 264 458 299 784 ... #>  $ Age          : num  53 49 39 53 44 62 60 82 52 58 ... #>  $ Weight       : num  50 61 97 86 66 58 88 73 71 38 ... #>  $ ECOG         : int  2 1 0 0 0 0 2 0 0 1 ... #>  $ PriorTherapy : chr  \"No\" \"Yes\" \"No\" \"Yes\" ... #>  $ EndDate      : Date, format: \"2021-04-19\" \"2020-11-08\" ... #>  $ BestResponse : chr  \"PR\" \"PR\" \"CR\" \"SD\" ... #>  $ StartDate_YMD: Date, format: \"2020-01-02\" \"2020-02-18\" ... #>  $ StartDate_DMY: Date, format: \"2020-01-02\" \"2020-02-18\" ... #>  $ StartDate_MDY: Date, format: \"2020-01-02\" \"2020-02-18\" ... #>  $ EndDate_YMD  : Date, format: \"2021-04-19\" \"2020-11-08\" ... #>  $ EndDate_DMY  : Date, format: \"2021-04-19\" \"2020-11-08\" ... #>  $ EndDate_MDY  : Date, format: \"2021-04-19\" \"2020-11-08\" ... head(date_formats[, 1:8]) # Show first few columns due to width #>   PatientID  StartDate Duration Age Weight ECOG PriorTherapy    EndDate #> 1     PT001 2020-01-02      473  53     50    2           No 2021-04-19 #> 2     PT002 2020-02-18      264  49     61    1          Yes 2020-11-08 #> 3     PT003 2020-01-02      458  39     97    0           No 2021-04-04 #> 4     PT004 2020-01-13      299  53     86    0          Yes 2020-11-07 #> 5     PT005 2020-01-24      784  44     66    0          Yes 2022-03-18 #> 6     PT006 2020-02-18      409  62     58    0           No 2021-04-02 summary(date_formats$Age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   36.00   49.75   57.50   59.10   72.50   84.00  table(date_formats$BestResponse) #>  #> CR PD PR SD  #> 10 11 10  9"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dca_test.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Decision Curve Analysis (DCA) Test Data — dca_test",
        "title": "Decision Curve Analysis (DCA) Test Data — dca_test",
        "text": "dataset designed performing Decision Curve Analysis (DCA). includes patient characteristics, outcome variable (cardiac_event), predicted probabilities several different risk models.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dca_test.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Decision Curve Analysis (DCA) Test Data — dca_test",
        "text": "",
        "code": "data(dca_test)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dca_test.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Decision Curve Analysis (DCA) Test Data — dca_test",
        "text": "data frame 50 rows 17 variables: patient_id Integer. Unique patient identifier. age Integer. Patient's age years. sex Character. Patient's sex. diabetes Character. Diabetes status (e.g., \"Yes\", \"\"). hypertension Character. Hypertension status (e.g., \"Yes\", \"\"). smoking Character. Smoking status (e.g., \"Yes\", \"\"). cholesterol Integer. Cholesterol level. troponin Numeric. Troponin level. creatinine Numeric. Creatinine level. cardiac_event Character. outcome variable, indicating cardiac event occurred. basic_model Numeric. Predicted probability cardiac event basic model. enhanced_model Numeric. Predicted probability enhanced model. biomarker_model Numeric. Predicted probability model including biomarker. miscalibrated_model Numeric. Predicted probability deliberately miscalibrated model. poor_model Numeric. Predicted probability poorly performing model. risk_category Character. categorized risk based criteria. hospital Character. Hospital identifier group.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dca_test.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Decision Curve Analysis (DCA) Test Data — dca_test",
        "text": "",
        "code": "data(dca_test) str(dca_test) #> 'data.frame':\t50 obs. of  17 variables: #>  $ patient_id         : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ age                : int  67 59 72 61 74 55 68 70 63 76 ... #>  $ sex                : chr  \"Male\" \"Female\" \"Male\" \"Female\" ... #>  $ diabetes           : chr  \"Yes\" \"No\" \"Yes\" \"No\" ... #>  $ hypertension       : chr  \"No\" \"Yes\" \"Yes\" \"No\" ... #>  $ smoking            : chr  \"Former\" \"Never\" \"Current\" \"Never\" ... #>  $ cholesterol        : int  245 198 267 201 234 278 189 298 212 256 ... #>  $ troponin           : num  2.1 0.8 3.2 1.1 1.8 2.5 0.9 4.1 1.4 2.8 ... #>  $ creatinine         : num  1.3 0.9 1.6 1 1.2 1.1 0.8 1.8 1.1 1.5 ... #>  $ cardiac_event      : chr  \"Yes\" \"No\" \"Yes\" \"No\" ... #>  $ basic_model        : num  0.234 0.089 0.421 0.067 0.198 0.312 0.123 0.567 0.098 0.389 ... #>  $ enhanced_model     : num  0.289 0.102 0.523 0.071 0.223 0.398 0.134 0.678 0.112 0.467 ... #>  $ biomarker_model    : num  0.312 0.098 0.578 0.069 0.234 0.423 0.128 0.723 0.109 0.512 ... #>  $ miscalibrated_model: num  0.421 0.16 0.758 0.121 0.356 0.562 0.221 0.894 0.176 0.7 ... #>  $ poor_model         : num  0.156 0.067 0.298 0.045 0.123 0.234 0.089 0.423 0.078 0.267 ... #>  $ risk_category      : chr  \"Moderate\" \"Low\" \"High\" \"Low\" ... #>  $ hospital           : chr  \"Hospital A\" \"Hospital B\" \"Hospital C\" \"Hospital A\" ... head(dca_test) #>   patient_id age    sex diabetes hypertension smoking cholesterol troponin #> 1          1  67   Male      Yes           No  Former         245      2.1 #> 2          2  59 Female       No          Yes   Never         198      0.8 #> 3          3  72   Male      Yes          Yes Current         267      3.2 #> 4          4  61 Female       No           No   Never         201      1.1 #> 5          5  74   Male       No          Yes  Former         234      1.8 #> 6          6  55 Female      Yes           No Current         278      2.5 #>   creatinine cardiac_event basic_model enhanced_model biomarker_model #> 1        1.3           Yes       0.234          0.289           0.312 #> 2        0.9            No       0.089          0.102           0.098 #> 3        1.6           Yes       0.421          0.523           0.578 #> 4        1.0            No       0.067          0.071           0.069 #> 5        1.2            No       0.198          0.223           0.234 #> 6        1.1           Yes       0.312          0.398           0.423 #>   miscalibrated_model poor_model risk_category   hospital #> 1               0.421      0.156      Moderate Hospital A #> 2               0.160      0.067           Low Hospital B #> 3               0.758      0.298          High Hospital C #> 4               0.121      0.045           Low Hospital A #> 5               0.356      0.123      Moderate Hospital B #> 6               0.562      0.234          High Hospital C summary(dca_test$basic_model) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.0560  0.0980  0.2105  0.2600  0.4160  0.6230  table(dca_test$cardiac_event) #>  #>  No Yes  #>  30  20"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dca_test_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Comprehensive Decision Curve Analysis (DCA) Data — dca_test_data",
        "title": "Comprehensive Decision Curve Analysis (DCA) Data — dca_test_data",
        "text": "larger comprehensive dataset Decision Curve Analysis, including patient demographics, clinical risk factors, multiple risk model predictions, outcome variables numeric character formats.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dca_test_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Comprehensive Decision Curve Analysis (DCA) Data — dca_test_data",
        "text": "",
        "code": "data(dca_test_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dca_test_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Comprehensive Decision Curve Analysis (DCA) Data — dca_test_data",
        "text": "data frame 800 rows 19 variables: patient_id Integer. Unique patient identifier. age Integer. Patient's age years. sex Character. Patient's sex. diabetes Character. Diabetes status. hypertension Character. Hypertension status. smoking Character. Smoking status. cholesterol Integer. Cholesterol level. troponin Numeric. Troponin level. creatinine Numeric. Serum creatinine level. cardiac_event_numeric Integer. Numeric indicator cardiac event (e.g., 0 1). cardiac_event Character. Character indicator cardiac event (e.g., \"Yes\", \"\"). true_risk Numeric. simulated true underlying risk score patient. basic_model Numeric. Predicted probability basic risk model. enhanced_model Numeric. Predicted probability enhanced risk model. biomarker_model Numeric. Predicted probability model incorporating biomarker. miscalibrated_model Numeric. Predicted probability model designed miscalibrated. poor_model Numeric. Predicted probability model poor discrimination. risk_category Character. Categorized risk level based criteria. hospital Character. Hospital center identifier.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dca_test_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Comprehensive Decision Curve Analysis (DCA) Data — dca_test_data",
        "text": "",
        "code": "data(dca_test_data) str(dca_test_data) #> 'data.frame':\t800 obs. of  19 variables: #>  $ patient_id           : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ age                  : num  72 74 64 60 72 43 73 62 62 54 ... #>  $ sex                  : chr  \"Male\" \"Male\" \"Male\" \"Male\" ... #>  $ diabetes             : chr  \"No\" \"Yes\" \"Yes\" \"No\" ... #>  $ hypertension         : chr  \"Yes\" \"No\" \"Yes\" \"No\" ... #>  $ smoking              : chr  \"Never\" \"Former\" \"Current\" \"Never\" ... #>  $ cholesterol          : num  213 164 248 228 211 223 225 226 183 203 ... #>  $ troponin             : num  4.1 5.27 2.61 10.58 9.72 ... #>  $ creatinine           : num  0.79 1.04 1.15 0.9 0.8 1.14 1.35 0.81 1.47 1.27 ... #>  $ cardiac_event_numeric: int  0 0 0 0 1 0 0 0 1 0 ... #>  $ cardiac_event        : Factor w/ 2 levels \"No\",\"Yes\": 1 1 1 1 2 1 1 1 2 1 ... #>  $ true_risk            : num  0.072 0.175 0.338 0.065 0.049 0.05 0.106 0.056 0.178 0.064 ... #>  $ basic_model          : num  0.117 0.13 0.135 0.071 0.037 0.016 0.064 0.026 0.104 0.039 ... #>  $ enhanced_model       : num  0.111 0.148 0.443 0.065 0.06 0.044 0.078 0.063 0.106 0.134 ... #>  $ biomarker_model      : num  0.093 0.217 0.508 0.064 0.036 0.066 0.169 0.039 0.155 0.093 ... #>  $ miscalibrated_model  : num  0.21 0.233 0.243 0.129 0.066 0.028 0.115 0.047 0.187 0.069 ... #>  $ poor_model           : num  0.024 0.264 0.135 0.204 0.137 0.093 0.036 0.088 0.1 0.047 ... #>  $ risk_category        : Factor w/ 4 levels \"Low\",\"Moderate\",..: 1 2 3 1 1 1 2 1 2 1 ... #>  $ hospital             : chr  \"Hospital A\" \"Hospital C\" \"Hospital C\" \"Hospital C\" ... head(dca_test_data) #>   patient_id age    sex diabetes hypertension smoking cholesterol troponin #> 1          1  72   Male       No          Yes   Never         213     4.10 #> 2          2  74   Male      Yes           No  Former         164     5.27 #> 3          3  64   Male      Yes          Yes Current         248     2.61 #> 4          4  60   Male       No           No   Never         228    10.58 #> 5          5  72 Female       No           No   Never         211     9.72 #> 6          6  43   Male       No           No Current         223     8.30 #>   creatinine cardiac_event_numeric cardiac_event true_risk basic_model #> 1       0.79                     0            No     0.072       0.117 #> 2       1.04                     0            No     0.175       0.130 #> 3       1.15                     0            No     0.338       0.135 #> 4       0.90                     0            No     0.065       0.071 #> 5       0.80                     1           Yes     0.049       0.037 #> 6       1.14                     0            No     0.050       0.016 #>   enhanced_model biomarker_model miscalibrated_model poor_model risk_category #> 1          0.111           0.093               0.210      0.024           Low #> 2          0.148           0.217               0.233      0.264      Moderate #> 3          0.443           0.508               0.243      0.135          High #> 4          0.065           0.064               0.129      0.204           Low #> 5          0.060           0.036               0.066      0.137           Low #> 6          0.044           0.066               0.028      0.093           Low #>     hospital #> 1 Hospital A #> 2 Hospital C #> 3 Hospital C #> 4 Hospital C #> 5 Hospital B #> 6 Hospital A summary(dca_test_data$enhanced_model) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>  0.0100  0.0570  0.1015  0.1374  0.1772  0.6930  table(dca_test_data$hospital, dca_test_data$cardiac_event) #>              #>               No Yes #>   Hospital A 222  34 #>   Hospital B 223  36 #>   Hospital C 246  39"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Medical Decision — decision",
        "title": "Medical Decision — decision",
        "text": "Function Medical Decision Analysis. Sensitivity, specificity, positive predictive value, negative predictive value.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Medical Decision — decision",
        "text": "",
        "code": "decision(   data,   gold,   goldPositive,   newtest,   testPositive,   pp = FALSE,   pprob = 0.3,   od = FALSE,   fnote = FALSE,   ci = FALSE,   fagan = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Medical Decision — decision",
        "text": "data data data frame. data frame contain variables specified 'variables' option. gold golden standard variable. goldPositive positive level golden standard variable. newtest new test variable. testPositive positive level new test variable. pp Boolean selection whether show prior probability. Default 'false'. pprob Prior probability (disease prevalence community). Requires value 0.001 0.999, default 0.300. od Boolean selection whether show frequency table. Default 'false'. fnote Boolean selection whether show footnotes. Default 'false'. ci Boolean selection whether show 95\\ Default 'false'. fagan Boolean selection whether show Fagan Nomogram. Default 'false'.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Medical Decision — decision",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$cTable$asDF .data.frame(results$cTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Medical Decision — decision",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision2.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Decision 2 for using init — decision2",
        "title": "Decision 2 for using init — decision2",
        "text": "Function Medical Decision Analysis. Sensitivity, specificity, positive predictive value, negative predictive value.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision2.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Decision 2 for using init — decision2",
        "text": "",
        "code": "decision2(data, gold, goldPositive, newtest, testPositive)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision2.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Decision 2 for using init — decision2",
        "text": "data data data frame. gold . goldPositive . newtest . testPositive .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision2.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Decision 2 for using init — decision2",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$cTable$asDF .data.frame(results$cTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decision2.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Decision 2 for using init — decision2",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Medical Decision Analysis — decisionClass",
        "title": "Medical Decision Analysis — decisionClass",
        "text": "Implements comprehensive medical decision analysis including:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionClass.html",
        "id": "details",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Details",
        "title": "Medical Decision Analysis — decisionClass",
        "text": "module provides tools analyzing diagnostic test performance options various visualization methods statistical comparisons. Sensitivity, specificity predictive values",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Medical Decision Analysis — decisionClass",
        "text": "Provide test reference standard data Select analysis options View results tables plots",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Medical Decision Analysis — decisionClass",
        "text": "jmvcore::Analysis -> ClinicoPath::decisionBase -> decisionClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Medical Decision Analysis — decisionClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::decisionBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Medical Decision Analysis — decisionClass",
        "text": "decisionClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Medical Decision Analysis — decisionClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionClass.html",
        "id": "usage-1",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Medical Decision Analysis — decisionClass",
        "text": "",
        "code": "decisionClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Medical Decision Analysis — decisionClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculator.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Medical Decision Calculator — decisioncalculator",
        "title": "Medical Decision Calculator — decisioncalculator",
        "text": "Function Medical Decision Calculator.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculator.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Medical Decision Calculator — decisioncalculator",
        "text": "",
        "code": "decisioncalculator(   TP = 90,   TN = 80,   FP = 30,   FN = 20,   pp = FALSE,   pprob = 0.3,   fnote = FALSE,   ci = FALSE,   fagan = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculator.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Medical Decision Calculator — decisioncalculator",
        "text": "TP . TN . FP . FN . pp . pprob Prior probability (disease prevalence community). Requires value 0.001 0.999, default 0.300. fnote . ci . fagan .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculator.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Medical Decision Calculator — decisioncalculator",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$cTable$asDF .data.frame(results$cTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculator.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Medical Decision Calculator — decisioncalculator",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculatorClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Decision Calculator — decisioncalculatorClass",
        "title": "Decision Calculator — decisioncalculatorClass",
        "text": "Decision Calculator Decision Calculator",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculatorClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Decision Calculator — decisioncalculatorClass",
        "text": "jmvcore::Analysis -> ClinicoPath::decisioncalculatorBase -> decisioncalculatorClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculatorClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Decision Calculator — decisioncalculatorClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::decisioncalculatorBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculatorClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Decision Calculator — decisioncalculatorClass",
        "text": "decisioncalculatorClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculatorClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Decision Calculator — decisioncalculatorClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculatorClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Decision Calculator — decisioncalculatorClass",
        "text": "",
        "code": "decisioncalculatorClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncalculatorClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Decision Calculator — decisioncalculatorClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombine.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Combine Medical Decision Tests — decisioncombine",
        "title": "Combine Medical Decision Tests — decisioncombine",
        "text": "Function combining multiple Medical Decision Tests evaluating performance. Calculate sensitivity, specificity, positive predictive value, negative predictive value combined tests using different combination rules.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombine.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Combine Medical Decision Tests — decisioncombine",
        "text": "",
        "code": "decisioncombine(   data,   gold,   goldPositive,   test1,   test1Positive,   test2,   test2Positive,   test3,   test3Positive,   combRule = \"any\",   pp = FALSE,   pprob = 0.3,   od = FALSE,   fnote = FALSE,   ci = FALSE,   fagan = FALSE,   showIndividual = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombine.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Combine Medical Decision Tests — decisioncombine",
        "text": "data data data frame. gold . goldPositive . test1 . test1Positive . test2 . test2Positive . test3 . test3Positive . combRule Rule combining test results. \"\" means positive test positive (), \"\" means positive tests positive (), \"majority\" means positive half tests positive. pp . pprob Prior probability (disease prevalence community). Requires value 0.001 0.999, default 0.300. od Boolean selection whether show frequency tables. Default 'false'. fnote . ci . fagan . showIndividual .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombine.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Combine Medical Decision Tests — decisioncombine",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$cTable$asDF .data.frame(results$cTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombine.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Combine Medical Decision Tests — decisioncombine",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombineClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Combine Medical Decision Tests — decisioncombineClass",
        "title": "Combine Medical Decision Tests — decisioncombineClass",
        "text": "Combine Medical Decision Tests Combine Medical Decision Tests",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombineClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Combine Medical Decision Tests — decisioncombineClass",
        "text": "jmvcore::Analysis -> ClinicoPath::decisioncombineBase -> decisioncombineClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombineClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Combine Medical Decision Tests — decisioncombineClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::decisioncombineBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombineClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Combine Medical Decision Tests — decisioncombineClass",
        "text": "decisioncombineClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombineClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Combine Medical Decision Tests — decisioncombineClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombineClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Combine Medical Decision Tests — decisioncombineClass",
        "text": "",
        "code": "decisioncombineClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncombineClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Combine Medical Decision Tests — decisioncombineClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompare.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Compare Medical Decision Tests — decisioncompare",
        "title": "Compare Medical Decision Tests — decisioncompare",
        "text": "Function comparing multiple Medical Decision Tests. Compares sensitivity, specificity, positive predictive value, negative predictive value, metrics different tests golden standard. Includes statistical comparison using McNemar's test confidence intervals differences.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompare.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Compare Medical Decision Tests — decisioncompare",
        "text": "",
        "code": "decisioncompare(   data,   gold,   goldPositive,   test1,   test1Positive,   test2,   test2Positive,   test3,   test3Positive,   pp = FALSE,   pprob = 0.3,   od = FALSE,   fnote = FALSE,   ci = FALSE,   plot = FALSE,   statComp = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompare.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Compare Medical Decision Tests — decisioncompare",
        "text": "data data data frame. gold . goldPositive . test1 . test1Positive . test2 . test2Positive . test3 . test3Positive . pp . pprob Prior probability (disease prevalence community). Requires value 0.001 0.999, default 0.300. od Boolean selection whether show frequency tables. Default 'false'. fnote . ci . plot . statComp Perform statistical comparison tests (McNemar's test confidence intervals differences).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompare.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Compare Medical Decision Tests — decisioncompare",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$cTable1$asDF .data.frame(results$cTable1)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompare.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Compare Medical Decision Tests — decisioncompare",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompareClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Compare Medical Decision Tests — decisioncompareClass",
        "title": "Compare Medical Decision Tests — decisioncompareClass",
        "text": "Compare Medical Decision Tests Compare Medical Decision Tests",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompareClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Compare Medical Decision Tests — decisioncompareClass",
        "text": "jmvcore::Analysis -> ClinicoPath::decisioncompareBase -> decisioncompareClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompareClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Compare Medical Decision Tests — decisioncompareClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::decisioncompareBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompareClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Compare Medical Decision Tests — decisioncompareClass",
        "text": "decisioncompareClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompareClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Compare Medical Decision Tests — decisioncompareClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompareClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Compare Medical Decision Tests — decisioncompareClass",
        "text": "",
        "code": "decisioncompareClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncompareClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Compare Medical Decision Tests — decisioncompareClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurve.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Decision Curve Analysis — decisioncurve",
        "title": "Decision Curve Analysis — decisioncurve",
        "text": "Decision Curve Analysis evaluating clinical utility prediction models diagnostic tests. Calculates net benefit across threshold probabilities determine using model provides benefit default strategies.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurve.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Decision Curve Analysis — decisioncurve",
        "text": "",
        "code": "decisioncurve(   data,   outcome,   outcomePositive,   models,   modelNames = \"\",   thresholdRange = \"clinical\",   thresholdMin = 0.05,   thresholdMax = 0.5,   thresholdStep = 0.01,   showTable = TRUE,   selectedThresholds = \"0.05, 0.10, 0.15, 0.20, 0.25, 0.30\",   showPlot = TRUE,   plotStyle = \"standard\",   showReferenceLinesLabels = TRUE,   highlightRange = FALSE,   highlightMin = 0.1,   highlightMax = 0.3,   calculateClinicalImpact = FALSE,   populationSize = 1000,   showInterventionAvoided = FALSE,   confidenceIntervals = FALSE,   bootReps = 1000,   ciLevel = 0.95,   showOptimalThreshold = TRUE,   compareModels = FALSE,   weightedAUC = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurve.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Decision Curve Analysis — decisioncurve",
        "text": "data data data frame. outcome Binary outcome variable (0/1 FALSE/TRUE). represents condition event want predict. outcomePositive level outcome variable represents positive case (presence condition/event). models Variables representing predicted probabilities risk scores different models. Can include multiple models comparison. modelNames Optional comma-separated list names models. provided, variable names used. thresholdRange Range threshold probabilities evaluate. thresholdMin Minimum threshold probability using custom range. thresholdMax Maximum threshold probability using custom range. thresholdStep Step size threshold probabilities. showTable Display table net benefit values selected thresholds. selectedThresholds Comma-separated list threshold probabilities display table. showPlot Display decision curve plot. plotStyle Style decision curve plot. showReferenceLinesLabels Show labels \"Treat \" \"Treat None\" reference lines. highlightRange Highlight clinically relevant threshold range plot. highlightMin Minimum threshold highlighted range. highlightMax Maximum threshold highlighted range. calculateClinicalImpact Calculate clinical impact metrics (number needed screen, etc.). populationSize Population size calculating clinical impact metrics. showInterventionAvoided Show many unnecessary interventions avoided compared treat-. confidenceIntervals Calculate bootstrap confidence intervals net benefit curves. bootReps Number bootstrap replications confidence intervals. ciLevel Confidence level bootstrap confidence intervals. showOptimalThreshold Identify display optimal threshold probabilities model. compareModels Calculate statistical tests comparing model performance. weightedAUC Calculate weighted area decision curve.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurve.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Decision Curve Analysis — decisioncurve",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$resultsTable$asDF .data.frame(results$resultsTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurve.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Decision Curve Analysis — decisioncurve",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurveClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Decision Curve Analysis — decisioncurveClass",
        "title": "Decision Curve Analysis — decisioncurveClass",
        "text": "Decision Curve Analysis Decision Curve Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurveClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Decision Curve Analysis — decisioncurveClass",
        "text": "jmvcore::Analysis -> ClinicoPath::decisioncurveBase -> decisioncurveClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurveClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Decision Curve Analysis — decisioncurveClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::decisioncurveBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurveClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Decision Curve Analysis — decisioncurveClass",
        "text": "decisioncurveClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurveClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Decision Curve Analysis — decisioncurveClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurveClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Decision Curve Analysis — decisioncurveClass",
        "text": "",
        "code": "decisioncurveClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisioncurveClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Decision Curve Analysis — decisioncurveClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanel.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Decision Panel Optimization — decisionpanel",
        "title": "Decision Panel Optimization — decisionpanel",
        "text": "Optimize diagnostic test panels evaluating various combination strategies including parallel testing (cotest), sequential testing, repeated tests. Creates decision trees minimize cost maximizing accuracy.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanel.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Decision Panel Optimization — decisionpanel",
        "text": "",
        "code": "decisionpanel(   data,   tests,   testLevels = \"\",   gold,   goldPositive,   useCosts = FALSE,   testCosts = \"\",   fpCost = 100,   fnCost = 1000,   strategies = \"all\",   parallelRules = \"any\",   customThreshold = 2,   maxTests = 3,   sequentialStop = \"positive\",   optimizationCriteria = \"accuracy\",   minSensitivity = 0.8,   minSpecificity = 0.8,   createTree = FALSE,   treeMethod = \"costSensitive\",   maxDepth = 5,   minSplit = 20,   showAllCombinations = FALSE,   topN = 10,   compareStrategies = TRUE,   bootstrap = FALSE,   bootReps = 1000,   plotTree = TRUE,   plotComparison = TRUE,   plotCostEffect = TRUE,   plotROC = FALSE,   prevalence = 0,   crossValidate = FALSE,   nFolds = 5,   seed = 12345 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanel.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Decision Panel Optimization — decisionpanel",
        "text": "data data data frame. tests Variables representing different diagnostic tests.  Can select multiple tests (10) panel optimization. testLevels String specifying positive test levels. Can : - Single value (used tests): \"Positive\" - Multiple values (comma-separated): \"Positive,Yes,1\"   - Empty string (auto-detection): \"\" gold gold standard variable disease classification. goldPositive level gold standard variable indicates disease presence. useCosts Include cost considerations optimization process. testCosts Comma-separated costs test order selected tests. Example: \"10,25,50\" three tests. fpCost Cost harm associated false positive result. fnCost Cost harm associated false negative result. strategies testing strategies evaluate analysis. parallelRules Rule combining results parallel testing. customThreshold Number positive tests required overall positive result (using custom rule). maxTests Maximum number tests combine strategy. sequentialStop stop testing sequential strategies. optimizationCriteria Primary criterion optimizing test panels. minSensitivity Minimum sensitivity constraint panel selection. minSpecificity Minimum specificity constraint panel selection. createTree Generate optimal decision tree test sequencing. treeMethod Method constructing decision tree. maxDepth Maximum depth decision tree. minSplit Minimum number observations required split node. showAllCombinations Display performance metrics possible test combinations. topN Number best-performing panels display results. compareStrategies Show comparative analysis different testing strategies. bootstrap Calculate bootstrap confidence intervals performance metrics. bootReps Number bootstrap replications confidence intervals. plotTree Display visual representation optimal decision tree. plotComparison Create comparison plots different testing strategies. plotCostEffect Create cost-effectiveness frontier plot. plotROC Display ROC curves top performing panels. prevalence Known disease prevalence (0 = use sample prevalence). crossValidate Perform k-fold cross-validation panel performance. nFolds Number folds cross-validation. seed Random seed reproducibility bootstrap cross-validation.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanel.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Decision Panel Optimization — decisionpanel",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$optimalPanel$asDF .data.frame(results$optimalPanel)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanel.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Decision Panel Optimization — decisionpanel",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanelClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Decision Panel Optimization — decisionpanelClass",
        "title": "Decision Panel Optimization — decisionpanelClass",
        "text": "Decision Panel Optimization Decision Panel Optimization",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanelClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Decision Panel Optimization — decisionpanelClass",
        "text": "jmvcore::Analysis -> ClinicoPath::decisionpanelBase -> decisionpanelClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanelClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Decision Panel Optimization — decisionpanelClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::decisionpanelBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanelClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Decision Panel Optimization — decisionpanelClass",
        "text": "decisionpanelClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanelClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Decision Panel Optimization — decisionpanelClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanelClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Decision Panel Optimization — decisionpanelClass",
        "text": "",
        "code": "decisionpanelClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/decisionpanelClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Decision Panel Optimization — decisionpanelClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dendogram.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Dendogram — dendogram",
        "title": "Dendogram — dendogram",
        "text": "Dendogram",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dendogram.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Dendogram — dendogram",
        "text": "",
        "code": "dendogram(data, dep, group, alt = \"notequal\", varEq = TRUE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dendogram.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Dendogram — dendogram",
        "text": "data . dep . group . alt . varEq .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/dendogram.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Dendogram — dendogram",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchart.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Study Flowchart — flowchart",
        "title": "Study Flowchart — flowchart",
        "text": "Creates CONSORT-style flowcharts showing participant flow studies",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchart.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Study Flowchart — flowchart",
        "text": "",
        "code": "flowchart(   data,   nodes,   counts,   direction = \"TB\",   nodeWidth = 2.5,   nodeHeight = 1,   fontSize = 10,   showPercentages = TRUE,   showExclusions = TRUE,   nodeColor = \"blue\",   includeTitle = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchart.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Study Flowchart — flowchart",
        "text": "data data data frame. nodes Variables containing node descriptions/labels counts Variables containing counts node direction Direction flowchart flow nodeWidth . nodeHeight . fontSize . showPercentages Show percentage initial participants step showExclusions Show exclusion counts edge labels nodeColor Color scheme nodes includeTitle Include automatic title flow statistics",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchart.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Study Flowchart — flowchart",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$nodeData$asDF .data.frame(results$nodeData)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchartClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Study Flowchart — flowchartClass",
        "title": "Study Flowchart — flowchartClass",
        "text": "Creates CONSORT-style flowcharts clinical studies research workflows",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchartClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Study Flowchart — flowchartClass",
        "text": "jmvcore::Analysis -> ClinicoPath::flowchartBase -> flowchartClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchartClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Study Flowchart — flowchartClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::flowchartBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchartClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Study Flowchart — flowchartClass",
        "text": "flowchartClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchartClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Study Flowchart — flowchartClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchartClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Study Flowchart — flowchartClass",
        "text": "",
        "code": "flowchartClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/flowchartClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Study Flowchart — flowchartClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummary.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Group and Summarize — groupsummary",
        "title": "Group and Summarize — groupsummary",
        "text": "Group data categorical variables calculate summary statistics",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummary.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Group and Summarize — groupsummary",
        "text": "",
        "code": "groupsummary(   data,   groupVars,   sumVars,   statistics = list(\"sum\", \"mean\", \"n\"),   dateVar,   dateFormat = \"ymd\",   timeAggregation = \"day\",   showMissing = FALSE,   addPercentage = TRUE,   sortBy = \"groups\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummary.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Group and Summarize — groupsummary",
        "text": "data data data frame. groupVars Variables group (categorical date). sumVars Numeric variables calculate statistics group. statistics . dateVar Select date variable group variables apply date formatting. dateFormat . timeAggregation . showMissing Include groups missing values summary. addPercentage Add percentage total sum values. sortBy .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummary.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Group and Summarize — groupsummary",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summaryTable$asDF .data.frame(results$summaryTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummary.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Group and Summarize — groupsummary",
        "text": "",
        "code": "# \\donttest{ # Group by one or more categorical variables and sum numeric variables groupsummary(     data = mydata,     groupVars = c(\"Category\", \"Group\"),     sumVars = c(\"Value1\", \"Value2\") ) #> Error in groupsummary(data = mydata, groupVars = c(\"Category\", \"Group\"),     sumVars = c(\"Value1\", \"Value2\")): argument \"dateVar\" is missing, with no default # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummaryClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Group and Summarize — groupsummaryClass",
        "title": "Group and Summarize — groupsummaryClass",
        "text": "Group Summarize Group Summarize",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummaryClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Group and Summarize — groupsummaryClass",
        "text": "jmvcore::Analysis -> ClinicoPath::groupsummaryBase -> groupsummaryClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummaryClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Group and Summarize — groupsummaryClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::groupsummaryBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummaryClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Group and Summarize — groupsummaryClass",
        "text": "groupsummaryClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummaryClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Group and Summarize — groupsummaryClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummaryClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Group and Summarize — groupsummaryClass",
        "text": "",
        "code": "groupsummaryClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/groupsummaryClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Group and Summarize — groupsummaryClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummary.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Tables via gtsummary — gtsummary",
        "title": "Tables via gtsummary — gtsummary",
        "text": "Tables via gtsummary",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummary.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Tables via gtsummary — gtsummary",
        "text": "",
        "code": "gtsummary(data, dep, group, alt = \"notequal\", varEq = TRUE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummary.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Tables via gtsummary — gtsummary",
        "text": "data . dep . group . alt . varEq .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummary.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Tables via gtsummary — gtsummary",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummaryClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Tables via gtsummary — gtsummaryClass",
        "title": "Tables via gtsummary — gtsummaryClass",
        "text": "Tables via gtsummary Tables via gtsummary",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummaryClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Tables via gtsummary — gtsummaryClass",
        "text": "jmvcore::Analysis -> ClinicoPath::gtsummaryBase -> gtsummaryClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummaryClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Tables via gtsummary — gtsummaryClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::gtsummaryBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummaryClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Tables via gtsummary — gtsummaryClass",
        "text": "gtsummaryClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummaryClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Tables via gtsummary — gtsummaryClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummaryClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Tables via gtsummary — gtsummaryClass",
        "text": "",
        "code": "gtsummaryClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/gtsummaryClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Tables via gtsummary — gtsummaryClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/histopathology.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Histopathology Data — histopathology",
        "title": "Histopathology Data — histopathology",
        "text": "simulated dataset histopathological research, containing patient demographics, clinical findings, hypothetical molecular data. dataset intended demonstration testing analysis functions.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/histopathology.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Histopathology Data — histopathology",
        "text": "",
        "code": "data(histopathology)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/histopathology.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Histopathology Data — histopathology",
        "text": "data frame 250 rows 38 variables: ID Numeric. Unique patient identifier. Name Character. Patient's name (simulated). Sex Character. Patient's sex (e.g., \"Male\", \"Female\"). Age Numeric. Patient's age years. Race Character. Patient's race (e.g., \"White\", \"Black\"). PreinvasiveComponent Character. Presence preinvasive component (e.g., \"Present\", \"Absent\"). LVI Character. Lymphovascular invasion status (e.g., \"Present\", \"Absent\"). PNI Character. Perineural invasion status (e.g., \"Present\", \"Absent\"). LastFollowUpDate POSIXct. Date time last follow-. Death Character. Death status (e.g., \"YANLIŞ\" False/, \"DOĞRU\" True/Yes). Indicates patient died. Group Character. Treatment control group (e.g., \"Control\", \"Treatment\"). Grade Numeric. Tumor grade (e.g., 1, 2, 3). TStage Numeric. Tumor stage (e.g., 1, 2, 3, 4). Anti-X-intensity Numeric. Intensity Anti-X marker staining. Anti-Y-intensity Numeric. Intensity Anti-Y marker staining. LymphNodeMetastasis Character. Lymph node metastasis status (e.g., \"Present\", \"Absent\"). Valid Character. Validity status (e.g., \"YANLIŞ\", \"DOĞRU\"). Meaning needs context. Smoker Character. Smoking status (e.g., \"YANLIŞ\", \"DOĞRU\"). Grade_Level Character. Tumor grade categorized (e.g., \"low\", \"high\", \"moderate\"). SurgeryDate POSIXct. Date time surgery. DeathTime Character. Time death category (e.g., \"Within1Year\"). int Character. Interval string, likely representing duration two dates. OverallTime Numeric. Overall time, likely survival time unit (e.g., months). Outcome Numeric. Outcome variable, likely coded (e.g., 0 alive, 1 deceased). Mortality5yr Character. 5-year mortality status (e.g., \"Alive\", \"Dead\"). Rater 1 Numeric. Rating Rater 1. Rater 2 Numeric. Rating Rater 2. Rater 3 Numeric. Rating Rater 3. Rater Numeric. Rating Rater . Rater B Numeric. Rating Rater B. New Test Numeric. Result new diagnostic test. Golden Standart Numeric. Result gold standard diagnostic test. MeasurementA Numeric. continuous measurement. MeasurementB Numeric. Another continuous measurement. Disease Status Character. Disease status (e.g., \"Ill\", \"Healthy\"). Measurement1 Numeric. Measurement test observation. Measurement2 Numeric. Another measurement test observation. Outcome2 Character. secondary outcome measure levels like \"DOD\" (Dead Disease), \"DOOC\" (Dead Cause), \"AWD\" (Alive Disease), \"AWOD\" (Alive Without Disease).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/histopathology.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Histopathology Data — histopathology",
        "text": "",
        "code": "data(histopathology) str(histopathology) #> spc_tbl_ [250 × 38] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>  $ ID                  : num [1:250] 1 2 3 4 5 6 7 8 9 10 ... #>  $ Name                : chr [1:250] \"Tonisia\" \"Daniyah\" \"Naviana\" \"Daerion\" ... #>  $ Sex                 : chr [1:250] \"Male\" \"Female\" \"Male\" \"Male\" ... #>  $ Age                 : num [1:250] 27 36 65 51 58 53 33 26 25 68 ... #>  $ Race                : chr [1:250] \"White\" \"White\" \"White\" \"White\" ... #>  $ PreinvasiveComponent: chr [1:250] \"Present\" \"Absent\" \"Absent\" \"Absent\" ... #>  $ LVI                 : chr [1:250] \"Present\" \"Absent\" \"Absent\" \"Present\" ... #>  $ PNI                 : chr [1:250] \"Absent\" \"Absent\" \"Absent\" \"Absent\" ... #>  $ LastFollowUpDate    : chr [1:250] \"2019.10.22 00:00:00\" \"2019.06.22 00:00:00\" \"2019.08.22 00:00:00\" \"2019.03.22 00:00:00\" ... #>  $ Death               : chr [1:250] \"YANLIŞ\" \"DOĞRU\" \"DOĞRU\" \"YANLIŞ\" ... #>  $ Group               : chr [1:250] \"Control\" \"Treatment\" \"Control\" \"Treatment\" ... #>  $ Grade               : num [1:250] 2 2 1 3 2 2 1 2 3 3 ... #>  $ TStage              : num [1:250] 4 4 4 4 1 4 2 3 4 4 ... #>  $ Anti-X-intensity    : num [1:250] 3 2 2 3 3 3 2 2 1 2 ... #>  $ Anti-Y-intensity    : num [1:250] 1 1 2 3 3 2 2 2 1 3 ... #>  $ LymphNodeMetastasis : chr [1:250] \"Present\" \"Absent\" \"Absent\" \"Absent\" ... #>  $ Valid               : chr [1:250] \"YANLIŞ\" \"DOĞRU\" \"YANLIŞ\" \"DOĞRU\" ... #>  $ Smoker              : chr [1:250] \"YANLIŞ\" \"YANLIŞ\" \"DOĞRU\" \"YANLIŞ\" ... #>  $ Grade_Level         : chr [1:250] \"high\" \"low\" \"low\" \"high\" ... #>  $ SurgeryDate         : chr [1:250] \"2019.07.08 00:00:00\" \"2019.03.18 00:00:00\" \"2019.05.18 00:00:00\" \"2018.10.24 00:00:00\" ... #>  $ DeathTime           : chr [1:250] \"Within1Year\" \"Within1Year\" \"Within1Year\" \"Within1Year\" ... #>  $ int                 : chr [1:250] \"2019-07-08 UTC--2019-10-22 UTC\" \"2019-03-18 UTC--2019-06-22 UTC\" \"2019-05-18 UTC--2019-08-22 UTC\" \"2018-10-24 UTC--2019-03-22 UTC\" ... #>  $ OverallTime         : num [1:250] 3.5 3.1 3.1 4.9 3.3 9.3 6.3 9 5.8 9.9 ... #>  $ Outcome             : num [1:250] 0 1 1 0 0 0 1 1 1 0 ... #>  $ Mortality5yr        : chr [1:250] \"Alive\" \"Dead\" \"Dead\" \"Alive\" ... #>  $ Rater 1             : num [1:250] 0 1 1 0 0 0 1 1 1 0 ... #>  $ Rater 2             : num [1:250] 0 0 0 0 0 0 0 0 0 0 ... #>  $ Rater 3             : num [1:250] 1 1 1 0 1 1 1 1 1 1 ... #>  $ Rater A             : num [1:250] 3 2 3 3 2 3 1 1 2 1 ... #>  $ Rater B             : num [1:250] 3 2 3 3 2 3 1 1 2 1 ... #>  $ New Test            : num [1:250] 0 0 0 0 0 0 1 0 0 0 ... #>  $ Golden Standart     : num [1:250] 0 0 0 0 0 0 0 0 0 0 ... #>  $ MeasurementA        : num [1:250] -1.63432 0.37071 0.01585 -1.23584 -0.00141 ... #>  $ MeasurementB        : num [1:250] 0.611 0.554 0.742 0.622 0.527 ... #>  $ Disease Status      : chr [1:250] \"Ill\" \"Ill\" \"Healthy\" \"Ill\" ... #>  $ Measurement1        : num [1:250] 0.387 0.829 0.159 2.447 0.847 ... #>  $ Measurement2        : num [1:250] 1.8654 0.5425 0.0701 2.4071 0.5564 ... #>  $ Outcome2            : chr [1:250] \"DOD\" \"DOOC\" \"AWD\" \"AWOD\" ... #>  - attr(*, \"spec\")=List of 3 #>   ..$ cols   :List of 38 #>   .. ..$ ID                  : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Name                : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Sex                 : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Age                 : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Race                : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ PreinvasiveComponent: list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ LVI                 : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ PNI                 : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ LastFollowUpDate    : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Death               : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Group               : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Grade               : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ TStage              : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Anti-X-intensity    : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Anti-Y-intensity    : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ LymphNodeMetastasis : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Valid               : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Smoker              : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Grade_Level         : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ SurgeryDate         : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ DeathTime           : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ int                 : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ OverallTime         : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Outcome             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Mortality5yr        : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Rater 1             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Rater 2             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Rater 3             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Rater A             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Rater B             : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ New Test            : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Golden Standart     : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ MeasurementA        : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ MeasurementB        : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Disease Status      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   .. ..$ Measurement1        : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Measurement2        : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ Outcome2            : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_character\" \"collector\" #>   ..$ default: list() #>   .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\" #>   ..$ skip   : num 1 #>   ..- attr(*, \"class\")= chr \"col_spec\" head(histopathology) #> # A tibble: 6 × 38 #>      ID Name    Sex      Age Race  PreinvasiveComponent LVI     PNI     #>   <dbl> <chr>   <chr>  <dbl> <chr> <chr>                <chr>   <chr>   #> 1     1 Tonisia Male      27 White Present              Present Absent  #> 2     2 Daniyah Female    36 White Absent               Absent  Absent  #> 3     3 Naviana Male      65 White Absent               Absent  Absent  #> 4     4 Daerion Male      51 White Absent               Present Absent  #> 5     5 Tamyiah Female    58 Black Absent               Absent  Absent  #> 6     6 Donnajo Female    53 White Absent               Present Present #> # ℹ 30 more variables: LastFollowUpDate <chr>, Death <chr>, Group <chr>, #> #   Grade <dbl>, TStage <dbl>, `Anti-X-intensity` <dbl>, #> #   `Anti-Y-intensity` <dbl>, LymphNodeMetastasis <chr>, Valid <chr>, #> #   Smoker <chr>, Grade_Level <chr>, SurgeryDate <chr>, DeathTime <chr>, #> #   int <chr>, OverallTime <dbl>, Outcome <dbl>, Mortality5yr <chr>, #> #   `Rater 1` <dbl>, `Rater 2` <dbl>, `Rater 3` <dbl>, `Rater A` <dbl>, #> #   `Rater B` <dbl>, `New Test` <dbl>, `Golden Standart` <dbl>, … summary(histopathology$Age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's  #>   25.00   38.00   49.00   49.44   62.00   73.00       1  hist(histopathology$TStage)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/hospital_admission_hourly.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Hourly Hospital Admission Data — hospital_admission_hourly",
        "title": "Hourly Hospital Admission Data — hospital_admission_hourly",
        "text": "dataset simulating hourly hospital admissions, including patient vitals department information. Useful time series analysis operational research.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/hospital_admission_hourly.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Hourly Hospital Admission Data — hospital_admission_hourly",
        "text": "",
        "code": "data(hospital_admission_hourly)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/hospital_admission_hourly.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Hourly Hospital Admission Data — hospital_admission_hourly",
        "text": "data frame 1200 rows 9 variables: PatientID Character. Unique patient identifier. AdmissionDate Date. date hospital admission. Hour Integer. hour hospital admission (0-23). AdmissionTime POSIXct. Combined date time admission. Department Character. hospital department patient admitted (e.g., \"Emergency\", \"Cardiology\"). HeartRate Integer. Patient's heart rate admission. SystolicBP Integer. Patient's systolic blood pressure admission. OxygenSaturation Integer. Patient's oxygen saturation (SpO2) admission. PainScore Integer. Patient's reported pain score admission (e.g., 0-10 scale).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/hospital_admission_hourly.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Hourly Hospital Admission Data — hospital_admission_hourly",
        "text": "",
        "code": "data(hospital_admission_hourly) str(hospital_admission_hourly) #> 'data.frame':\t1200 obs. of  9 variables: #>  $ PatientID       : chr  \"PT001\" \"PT001\" \"PT001\" \"PT001\" ... #>  $ AdmissionDate   : chr  \"2022-01-01\" \"2022-01-01\" \"2022-01-01\" \"2022-01-01\" ... #>  $ Hour            : int  0 1 2 3 4 5 6 7 8 9 ... #>  $ AdmissionTime   : chr  \"2022-01-01 00:00:00\" \"2022-01-01 01:00:00\" \"2022-01-01 02:00:00\" \"2022-01-01 03:00:00\" ... #>  $ Department      : chr  \"ICU\" \"General Ward\" \"General Ward\" \"Emergency\" ... #>  $ HeartRate       : int  90 91 90 80 71 87 77 77 95 66 ... #>  $ SystolicBP      : int  131 154 105 108 140 127 126 129 111 129 ... #>  $ OxygenSaturation: int  96 98 94 93 100 99 97 93 95 96 ... #>  $ PainScore       : int  3 6 3 3 2 1 4 5 8 2 ... head(hospital_admission_hourly) #>   PatientID AdmissionDate Hour       AdmissionTime   Department HeartRate #> 1     PT001    2022-01-01    0 2022-01-01 00:00:00          ICU        90 #> 2     PT001    2022-01-01    1 2022-01-01 01:00:00 General Ward        91 #> 3     PT001    2022-01-01    2 2022-01-01 02:00:00 General Ward        90 #> 4     PT001    2022-01-01    3 2022-01-01 03:00:00    Emergency        80 #> 5     PT001    2022-01-01    4 2022-01-01 04:00:00          ICU        71 #> 6     PT001    2022-01-01    5 2022-01-01 05:00:00 General Ward        87 #>   SystolicBP OxygenSaturation PainScore #> 1        131               96         3 #> 2        154               98         6 #> 3        105               94         3 #> 4        108               93         3 #> 5        140              100         2 #> 6        127               99         1 summary(hospital_admission_hourly$HeartRate) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   28.00   70.75   80.00   81.01   91.00  136.00  table(hospital_admission_hourly$Department) #>  #>    Emergency General Ward          ICU  #>          590          261          349"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeff.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "ICC coefficients — icccoeff",
        "title": "ICC coefficients — icccoeff",
        "text": "Function Interclass Correlation Coefficient Calculation.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeff.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "ICC coefficients — icccoeff",
        "text": "",
        "code": "icccoeff(data, vars)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeff.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "ICC coefficients — icccoeff",
        "text": "data data data frame. vars .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeff.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "ICC coefficients — icccoeff",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeff.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "ICC coefficients — icccoeff",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeffClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa — icccoeffClass",
        "title": "Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa — icccoeffClass",
        "text": "Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeffClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa — icccoeffClass",
        "text": "jmvcore::Analysis -> ClinicoPath::icccoeffBase -> icccoeffClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeffClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa — icccoeffClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::icccoeffBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeffClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa — icccoeffClass",
        "text": "icccoeffClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeffClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa — icccoeffClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeffClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa — icccoeffClass",
        "text": "",
        "code": "icccoeffClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/icccoeffClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Interclass Correlation Coefficient Also see http://www.cookbook-r.com/Statistical_analysis/Inter-rater_reliability/#ordinal-data-weighted-kappa — icccoeffClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihc_test_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Immunohistochemistry (IHC) Test Data — ihc_test_data",
        "title": "Immunohistochemistry (IHC) Test Data — ihc_test_data",
        "text": "dataset containing simulated Immunohistochemistry (IHC) marker results set samples. marker's expression likely categorical (e.g., \"Positive\", \"Negative\", \"Low\", \"High\", specific scoring).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihc_test_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Immunohistochemistry (IHC) Test Data — ihc_test_data",
        "text": "",
        "code": "data(ihc_test_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihc_test_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Immunohistochemistry (IHC) Test Data — ihc_test_data",
        "text": "data frame 100 rows 9 variables: SampleID Character. Unique identifier sample. ER Character. Estrogen Receptor status score. PR Character. Progesterone Receptor status score. HER2 Character. HER2/neu status score. Ki67 Character. Ki-67 proliferation index, possibly category percentage range. p53 Character. p53 protein expression status score. CD3 Character. CD3 (T-cell marker) expression status score. CD20 Character. CD20 (B-cell marker) expression status score. CD45 Character. CD45 (leukocyte common antigen) expression status score.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihc_test_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Immunohistochemistry (IHC) Test Data — ihc_test_data",
        "text": "",
        "code": "data(ihc_test_data) str(ihc_test_data) #> 'data.frame':\t100 obs. of  9 variables: #>  $ SampleID: chr  \"S001\" \"S002\" \"S003\" \"S004\" ... #>  $ ER      : chr  \"1+\" \"3+\" \"2+\" \"-\" ... #>  $ PR      : chr  \"1+\" \"3+\" \"2+\" \"3+\" ... #>  $ HER2    : chr  \"-\" \"3+\" \"1+\" \"1+\" ... #>  $ Ki67    : chr  \"-\" \"1+\" \"-\" \"-\" ... #>  $ p53     : chr  \"1+\" \"-\" \"1+\" \"2+\" ... #>  $ CD3     : chr  \"+\" \"+\" \"+\" \"+\" ... #>  $ CD20    : chr  \"+\" \"-\" \"+\" \"+\" ... #>  $ CD45    : chr  \"-\" \"+\" \"+\" \"-\" ... head(ihc_test_data) #>   SampleID ER PR HER2 Ki67 p53 CD3 CD20 CD45 #> 1     S001 1+ 1+    -    -  1+   +    +    - #> 2     S002 3+ 3+   3+   1+   -   +    -    + #> 3     S003 2+ 2+   1+    -  1+   +    +    + #> 4     S004  - 3+   1+    -  2+   +    +    - #> 5     S005  - 1+   1+   2+   -   +    +    + #> 6     S006 1+ 3+   2+    -  2+   +    -    + table(ihc_test_data$ER) #>  #>  - 1+ 2+ 3+  #> 18 30 30 22  table(ihc_test_data$HER2, ihc_test_data$Ki67) #>      #>       - 1+ 2+ #>   -  13 19 12 #>   1+  8 12  7 #>   2+  2  7 10 #>   3+  1  3  6"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "IHC Expression Analysis — ihcstats",
        "title": "IHC Expression Analysis — ihcstats",
        "text": "IHC Expression Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "IHC Expression Analysis — ihcstats",
        "text": "",
        "code": "ihcstats(   data,   markers,   computeHScore = FALSE,   clusterMethod = \"hierarchical\",   distanceMetric = \"gower\",   nClusters = 3,   showDendrogram = FALSE,   showHeatmap = FALSE,   showScoreDist = FALSE,   pcaAnalysis = FALSE,   standardizeData = TRUE,   showPCAPlot = FALSE,   showClusterValidation = FALSE,   optimalKMethod = \"elbow\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstats.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "IHC Expression Analysis — ihcstats",
        "text": "data data data frame. markers IHC marker variables categorical expression scores computeHScore . clusterMethod . distanceMetric . nClusters . showDendrogram . showHeatmap . showScoreDist . pcaAnalysis . standardizeData . showPCAPlot . showClusterValidation . optimalKMethod .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstats.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "IHC Expression Analysis — ihcstats",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$hscoreTable$asDF .data.frame(results$hscoreTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstatsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "IHC Expression Analysis — ihcstatsClass",
        "title": "IHC Expression Analysis — ihcstatsClass",
        "text": "IHC Expression Analysis IHC Expression Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstatsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "IHC Expression Analysis — ihcstatsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::ihcstatsBase -> ihcstatsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstatsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "IHC Expression Analysis — ihcstatsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::ihcstatsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstatsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "IHC Expression Analysis — ihcstatsClass",
        "text": "ihcstatsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstatsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "IHC Expression Analysis — ihcstatsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstatsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "IHC Expression Analysis — ihcstatsClass",
        "text": "",
        "code": "ihcstatsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ihcstatsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "IHC Expression Analysis — ihcstatsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagram.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arc Diagram — jjarcdiagram",
        "title": "Arc Diagram — jjarcdiagram",
        "text": "'Creates arc diagrams network visualization using arcdiagram package.'",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagram.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Arc Diagram — jjarcdiagram",
        "text": "",
        "code": "jjarcdiagram(   data,   source,   target,   weight,   group,   showNodes = TRUE,   nodeSize = \"fixed\",   nodeSizeValue = 2,   sortNodes = \"none\",   sortDecreasing = FALSE,   horizontal = TRUE,   arcWidth = \"fixed\",   arcWidthValue = 1,   arcTransparency = 0.5 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagram.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Arc Diagram — jjarcdiagram",
        "text": "data data data frame. source . target . weight . group . showNodes . nodeSize . nodeSizeValue . sortNodes . sortDecreasing . horizontal . arcWidth . arcWidthValue . arcTransparency .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagram.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Arc Diagram — jjarcdiagram",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagram.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Arc Diagram — jjarcdiagram",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagramClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arc Diagram — jjarcdiagramClass",
        "title": "Arc Diagram — jjarcdiagramClass",
        "text": "Arc Diagram Arc Diagram",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagramClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Arc Diagram — jjarcdiagramClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjarcdiagramBase -> jjarcdiagramClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagramClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Arc Diagram — jjarcdiagramClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjarcdiagramBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagramClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Arc Diagram — jjarcdiagramClass",
        "text": "jjarcdiagramClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagramClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Arc Diagram — jjarcdiagramClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagramClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Arc Diagram — jjarcdiagramClass",
        "text": "",
        "code": "jjarcdiagramClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjarcdiagramClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Arc Diagram — jjarcdiagramClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Bar Charts — jjbarstats",
        "title": "Bar Charts — jjbarstats",
        "text": "'Wrapper Function ggstatsplot::ggbarstats ggstatsplot::grouped_ggbarstats generate Bar Charts.'",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Bar Charts — jjbarstats",
        "text": "",
        "code": "jjbarstats(   data,   dep,   group,   grvar,   excl = TRUE,   typestatistics = \"parametric\",   pairwisecomparisons = TRUE,   pairwisedisplay = \"significant\",   padjustmethod = \"holm\",   originaltheme = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstats.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Bar Charts — jjbarstats",
        "text": "data data data frame. dep . group . grvar . excl . typestatistics . pairwisecomparisons . pairwisedisplay . padjustmethod . originaltheme .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstats.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Bar Charts — jjbarstats",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstats.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Bar Charts — jjbarstats",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstatsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Bar Charts — jjbarstatsClass",
        "title": "Bar Charts — jjbarstatsClass",
        "text": "Bar Charts Bar Charts",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstatsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Bar Charts — jjbarstatsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjbarstatsBase -> jjbarstatsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstatsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Bar Charts — jjbarstatsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjbarstatsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstatsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Bar Charts — jjbarstatsClass",
        "text": "jjbarstatsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstatsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Bar Charts — jjbarstatsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstatsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Bar Charts — jjbarstatsClass",
        "text": "",
        "code": "jjbarstatsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbarstatsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Bar Charts — jjbarstatsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Box-Violin Plots to Compare Between Groups — jjbetweenstats",
        "title": "Box-Violin Plots to Compare Between Groups — jjbetweenstats",
        "text": "Box-Violin Plots Compare Groups",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Box-Violin Plots to Compare Between Groups — jjbetweenstats",
        "text": "",
        "code": "jjbetweenstats(   data,   dep,   group,   grvar = NULL,   centralityplotting = FALSE,   centralitytype = \"parametric\",   typestatistics = \"parametric\",   pairwisecomparisons = FALSE,   pairwisedisplay = \"significant\",   padjustmethod = \"holm\",   effsizetype = \"biased\",   violin = TRUE,   boxplot = TRUE,   point = TRUE,   mytitle = \"Within Group Comparison\",   xtitle = \"\",   ytitle = \"\",   originaltheme = FALSE,   resultssubtitle = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstats.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Box-Violin Plots to Compare Between Groups — jjbetweenstats",
        "text": "data data data frame. dep . group . grvar . centralityplotting . centralitytype . typestatistics . pairwisecomparisons . pairwisedisplay . padjustmethod . effsizetype . violin . boxplot . point . mytitle . xtitle . ytitle . originaltheme . resultssubtitle .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstats.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Box-Violin Plots to Compare Between Groups — jjbetweenstats",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstats.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Box-Violin Plots to Compare Between Groups — jjbetweenstats",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstatsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Violin Plots to Compare Between Groups — jjbetweenstatsClass",
        "title": "Violin Plots to Compare Between Groups — jjbetweenstatsClass",
        "text": "Violin Plots Compare Groups Violin Plots Compare Groups",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstatsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Violin Plots to Compare Between Groups — jjbetweenstatsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjbetweenstatsBase -> jjbetweenstatsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstatsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Violin Plots to Compare Between Groups — jjbetweenstatsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjbetweenstatsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstatsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Violin Plots to Compare Between Groups — jjbetweenstatsClass",
        "text": "jjbetweenstatsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstatsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Violin Plots to Compare Between Groups — jjbetweenstatsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstatsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Violin Plots to Compare Between Groups — jjbetweenstatsClass",
        "text": "",
        "code": "jjbetweenstatsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjbetweenstatsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Violin Plots to Compare Between Groups — jjbetweenstatsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmat.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Correlation Matrix — jjcorrmat",
        "title": "Correlation Matrix — jjcorrmat",
        "text": "Correlation Matrix",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmat.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Correlation Matrix — jjcorrmat",
        "text": "",
        "code": "jjcorrmat(data, dep, grvar, typestatistics = \"parametric\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmat.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Correlation Matrix — jjcorrmat",
        "text": "data data data frame. dep . grvar . typestatistics .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmat.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Correlation Matrix — jjcorrmat",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmat.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Correlation Matrix — jjcorrmat",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmatClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Correlation Matrix — jjcorrmatClass",
        "title": "Correlation Matrix — jjcorrmatClass",
        "text": "Correlation Matrix Correlation Matrix",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmatClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Correlation Matrix — jjcorrmatClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjcorrmatBase -> jjcorrmatClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmatClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Correlation Matrix — jjcorrmatClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjcorrmatBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmatClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Correlation Matrix — jjcorrmatClass",
        "text": "jjcorrmatClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmatClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Correlation Matrix — jjcorrmatClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmatClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Correlation Matrix — jjcorrmatClass",
        "text": "",
        "code": "jjcorrmatClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjcorrmatClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Correlation Matrix — jjcorrmatClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Dot Chart — jjdotplotstats",
        "title": "Dot Chart — jjdotplotstats",
        "text": "Dot Chart",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Dot Chart — jjdotplotstats",
        "text": "",
        "code": "jjdotplotstats(   data,   dep,   group,   grvar,   typestatistics = \"parametric\",   effsizetype = \"biased\",   centralityplotting = FALSE,   centralitytype = \"parametric\",   mytitle = \"\",   xtitle = \"\",   ytitle = \"\",   originaltheme = FALSE,   resultssubtitle = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstats.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Dot Chart — jjdotplotstats",
        "text": "data data data frame. dep . group . grvar . typestatistics . effsizetype . centralityplotting . centralitytype . mytitle . xtitle . ytitle . originaltheme . resultssubtitle .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstats.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Dot Chart — jjdotplotstats",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstats.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Dot Chart — jjdotplotstats",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstatsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Dot Chart — jjdotplotstatsClass",
        "title": "Dot Chart — jjdotplotstatsClass",
        "text": "Dot Chart Dot Chart",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstatsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Dot Chart — jjdotplotstatsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjdotplotstatsBase -> jjdotplotstatsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstatsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Dot Chart — jjdotplotstatsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjdotplotstatsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstatsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Dot Chart — jjdotplotstatsClass",
        "text": "jjdotplotstatsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstatsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Dot Chart — jjdotplotstatsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstatsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Dot Chart — jjdotplotstatsClass",
        "text": "",
        "code": "jjdotplotstatsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjdotplotstatsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Dot Chart — jjdotplotstatsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Histogram — jjhistostats",
        "title": "Histogram — jjhistostats",
        "text": "'Wrapper Function ggstatsplot::gghistostats ggstatsplot::grouped_gghistostats generate Histogram.'",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Histogram — jjhistostats",
        "text": "",
        "code": "jjhistostats(   data,   dep,   grvar,   typestatistics = \"parametric\",   centralityline = TRUE,   changebinwidth = FALSE,   binwidth = 1.1,   resultssubtitle = TRUE,   normalcurve = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostats.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Histogram — jjhistostats",
        "text": "data data data frame. dep . grvar . typestatistics . centralityline . changebinwidth . binwidth . resultssubtitle . normalcurve .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostats.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Histogram — jjhistostats",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostats.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Histogram — jjhistostats",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostatsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Histogram — jjhistostatsClass",
        "title": "Histogram — jjhistostatsClass",
        "text": "Histogram Histogram",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostatsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Histogram — jjhistostatsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjhistostatsBase -> jjhistostatsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostatsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Histogram — jjhistostatsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjhistostatsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostatsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Histogram — jjhistostatsClass",
        "text": "jjhistostatsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostatsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Histogram — jjhistostatsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostatsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Histogram — jjhistostatsClass",
        "text": "",
        "code": "jjhistostatsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjhistostatsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Histogram — jjhistostatsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Pie Charts — jjpiestats",
        "title": "Pie Charts — jjpiestats",
        "text": "Pie Charts",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Pie Charts — jjpiestats",
        "text": "",
        "code": "jjpiestats(   data,   dep,   group,   grvar,   typestatistics = \"parametric\",   originaltheme = FALSE,   resultssubtitle = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestats.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Pie Charts — jjpiestats",
        "text": "data data data frame. dep . group . grvar . typestatistics . originaltheme . resultssubtitle .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestats.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Pie Charts — jjpiestats",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestats.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Pie Charts — jjpiestats",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestatsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Pie Charts — jjpiestatsClass",
        "title": "Pie Charts — jjpiestatsClass",
        "text": "Pie Charts Pie Charts",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestatsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Pie Charts — jjpiestatsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjpiestatsBase -> jjpiestatsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestatsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Pie Charts — jjpiestatsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjpiestatsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestatsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Pie Charts — jjpiestatsClass",
        "text": "jjpiestatsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestatsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Pie Charts — jjpiestatsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestatsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Pie Charts — jjpiestatsClass",
        "text": "",
        "code": "jjpiestatsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjpiestatsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Pie Charts — jjpiestatsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Ridgeline Plot — jjridgestats",
        "title": "Ridgeline Plot — jjridgestats",
        "text": "Ridgeline Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Ridgeline Plot — jjridgestats",
        "text": "",
        "code": "jjridgestats(   data,   dep,   group,   plotStyle = \"density\",   scaling = 1,   bandwidth = 1,   binwidth = 1,   fill = TRUE,   colorscheme = \"viridis\",   customColor = \"#4682B4\",   themeChoice = \"minimal\",   legendPosition = \"none\",   mytitle = \"\",   xtitle = \"\",   ytitle = \"\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestats.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Ridgeline Plot — jjridgestats",
        "text": "data data data frame. dep . group . plotStyle . scaling . bandwidth . binwidth . fill . colorscheme . customColor . themeChoice . legendPosition . mytitle . xtitle . ytitle .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestats.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Ridgeline Plot — jjridgestats",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestatsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Enhanced Ridgeline Plot — jjridgestatsClass",
        "title": "Enhanced Ridgeline Plot — jjridgestatsClass",
        "text": "Enhanced Ridgeline Plot Enhanced Ridgeline Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestatsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Enhanced Ridgeline Plot — jjridgestatsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjridgestatsBase -> jjridgestatsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestatsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Enhanced Ridgeline Plot — jjridgestatsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjridgestatsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestatsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Enhanced Ridgeline Plot — jjridgestatsClass",
        "text": "jjridgestatsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestatsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Enhanced Ridgeline Plot — jjridgestatsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestatsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Enhanced Ridgeline Plot — jjridgestatsClass",
        "text": "",
        "code": "jjridgestatsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjridgestatsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Enhanced Ridgeline Plot — jjridgestatsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplot.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "River Plots — jjriverplot",
        "title": "River Plots — jjriverplot",
        "text": "'Function generating river plots (alluvial diagrams) visualize flows transitions time categories.'",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplot.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "River Plots — jjriverplot",
        "text": "",
        "code": "jjriverplot(   data,   id = NULL,   time,   strata,   weight = NULL,   plotType = \"alluvial\",   fillType = \"first\",   sortStreams = TRUE,   labelNodes = TRUE,   curveType = \"cardinal\",   showCounts = FALSE,   showLegend = TRUE,   mytitle = \"\",   xtitle = \"\",   ytitle = \"\",   originaltheme = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplot.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "River Plots — jjriverplot",
        "text": "data data data frame. id Optional identifier individual entities data. time Variable representing time points sequential stages. strata Variables containing categories change time. weight Optional numerical variable determine stream width. plotType Type river plot generate. fillType Determines colors assigned flows. sortStreams Sort alluvial streams frequency. labelNodes Add labels nodes. curveType Type curve use stream paths. showCounts Display counts diagram. showLegend Display color legend. mytitle Title plot. xtitle Label x-axis. ytitle Label y-axis. originaltheme Use ggStatsPlot theme instead default theme.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplot.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "River Plots — jjriverplot",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplot.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "River Plots — jjriverplot",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplotClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "River Plots — jjriverplotClass",
        "title": "River Plots — jjriverplotClass",
        "text": "River Plots River Plots",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplotClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "River Plots — jjriverplotClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjriverplotBase -> jjriverplotClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplotClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "River Plots — jjriverplotClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjriverplotBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplotClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "River Plots — jjriverplotClass",
        "text": "jjriverplotClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplotClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "River Plots — jjriverplotClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplotClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "River Plots — jjriverplotClass",
        "text": "",
        "code": "jjriverplotClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjriverplotClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "River Plots — jjriverplotClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Scatter Plot — jjscatterstats",
        "title": "Scatter Plot — jjscatterstats",
        "text": "Scatter Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Scatter Plot — jjscatterstats",
        "text": "",
        "code": "jjscatterstats(   data,   dep,   group,   grvar,   typestatistics = \"parametric\",   mytitle = \"\",   xtitle = \"\",   ytitle = \"\",   originaltheme = FALSE,   resultssubtitle = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstats.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Scatter Plot — jjscatterstats",
        "text": "data data data frame. dep . group . grvar . typestatistics . mytitle . xtitle . ytitle . originaltheme . resultssubtitle .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstats.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Scatter Plot — jjscatterstats",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstats.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Scatter Plot — jjscatterstats",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstatsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Scatter Plot — jjscatterstatsClass",
        "title": "Scatter Plot — jjscatterstatsClass",
        "text": "Scatter Plot Scatter Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstatsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Scatter Plot — jjscatterstatsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjscatterstatsBase -> jjscatterstatsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstatsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Scatter Plot — jjscatterstatsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjscatterstatsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstatsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Scatter Plot — jjscatterstatsClass",
        "text": "jjscatterstatsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstatsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Scatter Plot — jjscatterstatsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstatsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Scatter Plot — jjscatterstatsClass",
        "text": "",
        "code": "jjscatterstatsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjscatterstatsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Scatter Plot — jjscatterstatsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraph.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "StreamGraphs — jjstreamgraph",
        "title": "StreamGraphs — jjstreamgraph",
        "text": "'Create interactive StreamGraphs using R streamgraph package.'",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraph.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "StreamGraphs — jjstreamgraph",
        "text": "",
        "code": "jjstreamgraph(   data,   timeVar,   valueVar,   groupVar,   offset = \"silhouette\",   interpolate = \"cardinal\",   palette = \"Blues\",   width = \"800px\",   height = \"500px\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraph.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "StreamGraphs — jjstreamgraph",
        "text": "data data data frame. timeVar Variable representing time points (x-axis) valueVar Variable containing values plotted (y-axis) groupVar Categorical variable grouping data streams offset Type offset use streamgraph interpolate Type interpolation points palette ColorBrewer palette use streams width Width plot height Height plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraph.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "StreamGraphs — jjstreamgraph",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraph.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "StreamGraphs — jjstreamgraph",
        "text": "",
        "code": "# \\donttest{ # Example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraphClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "StreamGraphs — jjstreamgraphClass",
        "title": "StreamGraphs — jjstreamgraphClass",
        "text": "StreamGraphs StreamGraphs",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraphClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "StreamGraphs — jjstreamgraphClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjstreamgraphBase -> jjstreamgraphClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraphClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "StreamGraphs — jjstreamgraphClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjstreamgraphBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraphClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "StreamGraphs — jjstreamgraphClass",
        "text": "jjstreamgraphClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraphClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "StreamGraphs — jjstreamgraphClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraphClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "StreamGraphs — jjstreamgraphClass",
        "text": "",
        "code": "jjstreamgraphClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjstreamgraphClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "StreamGraphs — jjstreamgraphClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemap.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Treemap — jjtreemap",
        "title": "Treemap — jjtreemap",
        "text": "'Creates treemap visualizations categorical data'",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemap.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Treemap — jjtreemap",
        "text": "",
        "code": "jjtreemap(   data,   group,   size,   color,   aspectRatio = 1.67,   borderWidth = 0.7,   labelLevel1Size = 15,   labelLevel2Size = 12,   labelLevel1Color = \"white\",   labelLevel2Color = \"black\",   labelFontFace = \"normal\",   labelBackground = \"transparent\",   labelAlignH = \"center\",   labelAlignV = \"center\",   labelOverlap = 0.5,   title = \"\",   subtitle = \"\",   caption = \"\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemap.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Treemap — jjtreemap",
        "text": "data data data frame. group . size . color . aspectRatio . borderWidth . labelLevel1Size . labelLevel2Size . labelLevel1Color . labelLevel2Color . labelFontFace . labelBackground . labelAlignH . labelAlignV . labelOverlap . title . subtitle . caption .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemap.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Treemap — jjtreemap",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemap.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Treemap — jjtreemap",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemapClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Treemap — jjtreemapClass",
        "title": "Treemap — jjtreemapClass",
        "text": "Treemap Treemap",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemapClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Treemap — jjtreemapClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jjtreemapBase -> jjtreemapClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemapClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Treemap — jjtreemapClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jjtreemapBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemapClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Treemap — jjtreemapClass",
        "text": "jjtreemapClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemapClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Treemap — jjtreemapClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemapClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Treemap — jjtreemapClass",
        "text": "",
        "code": "jjtreemapClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjtreemapClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Treemap — jjtreemapClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjwithinstats.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Box-Violin Plots to Compare Within Groups — jjwithinstats",
        "title": "Box-Violin Plots to Compare Within Groups — jjwithinstats",
        "text": "Box-Violin Plots Compare Within Groups",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjwithinstats.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Box-Violin Plots to Compare Within Groups — jjwithinstats",
        "text": "",
        "code": "jjwithinstats(   data,   dep1,   dep2,   dep3,   dep4,   pointpath = FALSE,   centralitypath = FALSE,   centralityplotting = FALSE,   centralitytype = \"parametric\",   typestatistics = \"parametric\",   pairwisecomparisons = FALSE,   pairwisedisplay = \"significant\",   padjustmethod = \"holm\",   effsizetype = \"biased\",   violin = TRUE,   boxplot = TRUE,   point = TRUE,   mytitle = \"Within Group Comparison\",   xtitle = \"\",   ytitle = \"\",   originaltheme = FALSE,   resultssubtitle = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjwithinstats.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Box-Violin Plots to Compare Within Groups — jjwithinstats",
        "text": "data data data frame. dep1 . dep2 . dep3 . dep4 . pointpath . centralitypath . centralityplotting . centralitytype . typestatistics . pairwisecomparisons . pairwisedisplay . padjustmethod . effsizetype . violin . boxplot . point . mytitle . xtitle . ytitle . originaltheme . resultssubtitle .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjwithinstats.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Box-Violin Plots to Compare Within Groups — jjwithinstats",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jjwithinstats.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Box-Violin Plots to Compare Within Groups — jjwithinstats",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolin.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Violin Plot — jviolin",
        "title": "Violin Plot — jviolin",
        "text": "Violin Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolin.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Violin Plot — jviolin",
        "text": "",
        "code": "jviolin(   data,   dep,   group,   col,   fill,   excl = FALSE,   flip = FALSE,   themex = \"ipsum\",   usexlabel = FALSE,   xlabel = \"\",   useylabel = FALSE,   ylabel = \"\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolin.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Violin Plot — jviolin",
        "text": "data . dep . group . col . fill . excl . flip . themex . usexlabel . xlabel . useylabel . ylabel .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolin.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Violin Plot — jviolin",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolinClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Violin Plot — jviolinClass",
        "title": "Violin Plot — jviolinClass",
        "text": "Violin Plot Violin Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolinClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Violin Plot — jviolinClass",
        "text": "Violin Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolinClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Violin Plot — jviolinClass",
        "text": "jmvcore::Analysis -> ClinicoPath::jviolinBase -> jviolinClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolinClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Violin Plot — jviolinClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::jviolinBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolinClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Violin Plot — jviolinClass",
        "text": "jviolinClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolinClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Violin Plot — jviolinClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolinClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Violin Plot — jviolinClass",
        "text": "",
        "code": "jviolinClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/jviolinClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Violin Plot — jviolinClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCI.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCI",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCI",
        "text": "Power Analysis Interobserver Agreement Analysis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCI.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCI",
        "text": "",
        "code": "kappaSizeCI(   outcome = \"2\",   kappa0 = 0.6,   kappaL = 0.4,   kappaU = 0.8,   props = \"0.20 , 0.80\",   raters = \"2\",   alpha = 0.05 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCI.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCI",
        "text": "outcome Number outcome level. kappa0 null hypothesis value kappa. kappaL lower limit kappa. kappaU upper limit kappa. props Proportions outcome level. raters Number raters. alpha significance level.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCI.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCI",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCI.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCI",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCIClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCIClass",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCIClass",
        "text": "Confidence Interval Approach Number Subjects Required Confidence Interval Approach Number Subjects Required",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCIClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCIClass",
        "text": "jmvcore::Analysis -> ClinicoPath::kappaSizeCIBase -> kappaSizeCIClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCIClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCIClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::kappaSizeCIBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCIClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCIClass",
        "text": "kappaSizeCIClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCIClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCIClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCIClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCIClass",
        "text": "",
        "code": "kappaSizeCIClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeCIClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Confidence Interval Approach for the Number of Subjects Required — kappaSizeCIClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedN.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Lowest Expected Value for a fixed sample size — kappaSizeFixedN",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedN",
        "text": "Lowest Expected Value fixed sample size.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedN.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedN",
        "text": "",
        "code": "kappaSizeFixedN(   outcome = \"2\",   kappa0 = 0.4,   props = \"0.20 , 0.80\",   raters = \"2\",   alpha = 0.05,   n = 100 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedN.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedN",
        "text": "outcome Number outcome level. kappa0 Expected value kappa. props Proportions outcome level. raters Number raters. alpha Significance level. n Sample size.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedN.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedN",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedN.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedN",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedNClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Lowest Expected Value for a fixed sample size — kappaSizeFixedNClass",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedNClass",
        "text": "Lowest Expected Value fixed sample size Lowest Expected Value fixed sample size",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedNClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedNClass",
        "text": "jmvcore::Analysis -> ClinicoPath::kappaSizeFixedNBase -> kappaSizeFixedNClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedNClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedNClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::kappaSizeFixedNBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedNClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedNClass",
        "text": "kappaSizeFixedNClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedNClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedNClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedNClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedNClass",
        "text": "",
        "code": "kappaSizeFixedNClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizeFixedNClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Lowest Expected Value for a fixed sample size — kappaSizeFixedNClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePower.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Power Approach for the Number of Subjects Required — kappaSizePower",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePower",
        "text": "Power Analysis Interobserver Agreement Analysis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePower.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePower",
        "text": "",
        "code": "kappaSizePower(   outcome = \"2\",   kappa0 = 0.4,   kappa1 = 0.6,   props = \"0.20 , 0.80\",   raters = \"2\",   alpha = 0.05,   power = 0.8 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePower.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePower",
        "text": "outcome Number outcome level. kappa0 Expected value kappa. kappa1 Expected value kappa. props Proportions outcome level. raters Number raters. alpha Significance level. power Power.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePower.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePower",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePower.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePower",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePowerClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Power Approach for the Number of Subjects Required — kappaSizePowerClass",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePowerClass",
        "text": "Power Approach Number Subjects Required Power Approach Number Subjects Required",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePowerClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePowerClass",
        "text": "jmvcore::Analysis -> ClinicoPath::kappaSizePowerBase -> kappaSizePowerClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePowerClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePowerClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::kappaSizePowerBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePowerClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePowerClass",
        "text": "kappaSizePowerClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePowerClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePowerClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePowerClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePowerClass",
        "text": "",
        "code": "kappaSizePowerClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/kappaSizePowerClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Power Approach for the Number of Subjects Required — kappaSizePowerClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocox.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Lasso-Cox Regression — lassocox",
        "title": "Lasso-Cox Regression — lassocox",
        "text": "Performs Lasso-penalized Cox regression variable selection survival analysis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocox.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Lasso-Cox Regression — lassocox",
        "text": "",
        "code": "lassocox(   data,   elapsedtime,   outcome,   outcomeLevel,   explanatory,   lambda = \"lambda.1se\",   nfolds = 10,   standardize = TRUE,   cv_plot = TRUE,   coef_plot = TRUE,   survival_plot = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocox.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Lasso-Cox Regression — lassocox",
        "text": "data data data frame. elapsedtime numeric variable representing follow-time event last observation. outcome outcome variable. Typically indicates event status (e.g., death, recurrence). outcomeLevel level outcome considered event. explanatory Variables considered selection Lasso-Cox regression. lambda Method selecting optimal lambda parameter cross-validation. nfolds Number folds cross-validation. standardize Whether standardize predictor variables fitting. cv_plot Whether show cross-validation plot. coef_plot Whether show coefficient path plot. survival_plot Whether show survival curves risk groups.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocox.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Lasso-Cox Regression — lassocox",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$modelSummary$asDF .data.frame(results$modelSummary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocox.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Lasso-Cox Regression — lassocox",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocoxClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Lasso-Cox Regression — lassocoxClass",
        "title": "Lasso-Cox Regression — lassocoxClass",
        "text": "Lasso-Cox Regression Lasso-Cox Regression",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocoxClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Lasso-Cox Regression — lassocoxClass",
        "text": "jmvcore::Analysis -> ClinicoPath::lassocoxBase -> lassocoxClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocoxClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Lasso-Cox Regression — lassocoxClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::lassocoxBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocoxClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Lasso-Cox Regression — lassocoxClass",
        "text": "lassocoxClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocoxClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Lasso-Cox Regression — lassocoxClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocoxClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Lasso-Cox Regression — lassocoxClass",
        "text": "",
        "code": "lassocoxClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lassocoxClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Lasso-Cox Regression — lassocoxClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/linechart.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Line Chart — linechart",
        "title": "Line Chart — linechart",
        "text": "Line Chart",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/linechart.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Line Chart — linechart",
        "text": "",
        "code": "linechart(data, xvar, yvar)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/linechart.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Line Chart — linechart",
        "text": "data . xvar . yvar .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/linechart.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Line Chart — linechart",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lollipop.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Lollipop Chart — lollipop",
        "title": "Lollipop Chart — lollipop",
        "text": "Lollipop Chart",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lollipop.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Lollipop Chart — lollipop",
        "text": "",
        "code": "lollipop(data, dep, group, highlight)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lollipop.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Lollipop Chart — lollipop",
        "text": "data . dep . group . highlight .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/lollipop.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Lollipop Chart — lollipop",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/medical_research_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "General Medical Research Data — medical_research_data",
        "title": "General Medical Research Data — medical_research_data",
        "text": "comprehensive simulated dataset general medical research, including patient demographics, visit information, clinical measurements, lab results, various health scores. dataset structured represent data collected multiple visits patients.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/medical_research_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "General Medical Research Data — medical_research_data",
        "text": "",
        "code": "data(medical_research_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/medical_research_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "General Medical Research Data — medical_research_data",
        "text": "data frame 890 rows 32 variables: PatientID Character. Unique patient identifier. VisitNumber Integer. sequential number patient's visit. VisitDate Character. Date visit. ideally parsed Date. StudyCenter Character. Identifier study center hospital. AgeGroup Character. Categorized age group patient. Gender Character. Gender patient. TreatmentGroup Character. Assigned treatment group (e.g., \"Treatment \", \"Control\"). DiagnosisPrimary Character. Primary diagnosis patient. DiseaseStage Character. Stage primary disease. ComorbidityCount Integer. Number comorbidities. BMICategory Character. Body Mass Index category (e.g., \"Underweight\", \"Normal\", \"Overweight\"). SystolicBP Integer. Systolic blood pressure (mmHg). DiastolicBP Integer. Diastolic blood pressure (mmHg). HeartRate Integer. Heart rate (beats per minute). Temperature Numeric. Body temperature (e.g., Celsius Fahrenheit). RespiratoryRate Integer. Respiratory rate (breaths per minute). OxygenSaturation Integer. Oxygen saturation (SpO2, percent). HbA1c Numeric. Glycated hemoglobin level (%). Creatinine Numeric. Creatinine level (e.g., mg/dL µmol/L). eGFR Integer. Estimated Glomerular Filtration Rate. Hemoglobin Numeric. Hemoglobin level (e.g., g/dL). WBC Numeric. White Blood Cell count (e.g., cells/µL). Platelets Integer. Platelet count (e.g., cells/µL). TotalCholesterol Integer. Total cholesterol level (e.g., mg/dL). LDLCholesterol Integer. LDL (low-density lipoprotein) cholesterol level. HDLCholesterol Integer. HDL (high-density lipoprotein) cholesterol level. Triglycerides Integer. Triglycerides level. PainScore Integer. Patient-reported pain score (e.g., 0-10 scale). QualityOfLife Integer. Quality Life score standardized questionnaire. FunctionalStatus Integer. Functional status score. MedicationAdherence Integer. Medication adherence score percentage. ClinicalScore Integer. composite overall clinical score.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/medical_research_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "General Medical Research Data — medical_research_data",
        "text": "",
        "code": "data(medical_research_data) str(medical_research_data) #> 'data.frame':\t890 obs. of  32 variables: #>  $ PatientID          : chr  \"PT001\" \"PT001\" \"PT001\" \"PT002\" ... #>  $ VisitNumber        : int  1 2 3 1 2 3 1 2 3 4 ... #>  $ VisitDate          : chr  \"2022-01-01\" \"2022-02-09\" \"2022-04-12\" \"2022-01-01\" ... #>  $ StudyCenter        : chr  \"Boston Medical Center\" \"Boston Medical Center\" \"Boston Medical Center\" \"Johns Hopkins\" ... #>  $ AgeGroup           : chr  \"46-60\" \"46-60\" \"46-60\" \"46-60\" ... #>  $ Gender             : chr  \"Male\" \"Male\" \"Male\" \"Female\" ... #>  $ TreatmentGroup     : chr  \"Treatment A\" \"Treatment A\" \"Treatment A\" \"Treatment A+B\" ... #>  $ DiagnosisPrimary   : chr  \"Diabetes Type 2\" \"Diabetes Type 2\" \"Diabetes Type 2\" \"Diabetes Type 2\" ... #>  $ DiseaseStage       : chr  \"Stage II\" \"Stage II\" \"Stage II\" \"Stage II\" ... #>  $ ComorbidityCount   : int  3 3 3 3 3 3 2 2 2 2 ... #>  $ BMICategory        : chr  \"Normal\" \"Normal\" \"Normal\" \"Overweight\" ... #>  $ SystolicBP         : int  142 141 143 120 118 125 139 145 124 133 ... #>  $ DiastolicBP        : int  111 103 111 96 94 94 101 109 89 106 ... #>  $ HeartRate          : int  84 66 55 76 88 72 83 101 66 71 ... #>  $ Temperature        : num  36.6 37.9 36.7 36.8 37.5 36.7 36 36.5 36.8 36.8 ... #>  $ RespiratoryRate    : int  16 11 16 15 18 27 12 20 14 17 ... #>  $ OxygenSaturation   : int  98 98 94 98 100 98 100 96 96 98 ... #>  $ HbA1c              : num  NA 9.4 9 6.7 9.1 10.4 10.3 5.9 8.8 NA ... #>  $ Creatinine         : num  0.74 0.6 0.46 0.73 1.43 1.08 1.08 0.63 0.97 NA ... #>  $ eGFR               : int  89 85 92 89 80 81 84 NA 94 87 ... #>  $ Hemoglobin         : num  14.1 11.5 NA 10.6 13.2 13.6 12.8 NA 14.2 13.8 ... #>  $ WBC                : num  NA 10 9.1 7.5 5.7 NA NA NA 3.9 4.2 ... #>  $ Platelets          : int  238 225 295 254 297 181 186 141 NA 249 ... #>  $ TotalCholesterol   : int  130 NA 165 236 216 198 146 216 154 192 ... #>  $ LDLCholesterol     : int  95 136 132 145 136 NA 113 148 146 84 ... #>  $ HDLCholesterol     : int  41 62 50 36 64 NA 50 41 48 58 ... #>  $ Triglycerides      : int  148 117 53 226 104 108 103 163 199 NA ... #>  $ PainScore          : int  NA NA 1 4 7 2 4 4 3 NA ... #>  $ QualityOfLife      : int  41 58 75 53 64 51 65 61 68 87 ... #>  $ FunctionalStatus   : int  91 97 69 63 74 76 45 100 49 87 ... #>  $ MedicationAdherence: int  88 100 97 100 87 88 73 100 69 60 ... #>  $ ClinicalScore      : int  59 55 70 50 46 67 47 40 67 46 ... head(medical_research_data) #>   PatientID VisitNumber  VisitDate           StudyCenter AgeGroup Gender #> 1     PT001           1 2022-01-01 Boston Medical Center    46-60   Male #> 2     PT001           2 2022-02-09 Boston Medical Center    46-60   Male #> 3     PT001           3 2022-04-12 Boston Medical Center    46-60   Male #> 4     PT002           1 2022-01-01         Johns Hopkins    46-60 Female #> 5     PT002           2 2022-04-18         Johns Hopkins    46-60 Female #> 6     PT002           3 2022-05-30         Johns Hopkins    46-60 Female #>   TreatmentGroup DiagnosisPrimary DiseaseStage ComorbidityCount BMICategory #> 1    Treatment A  Diabetes Type 2     Stage II                3      Normal #> 2    Treatment A  Diabetes Type 2     Stage II                3      Normal #> 3    Treatment A  Diabetes Type 2     Stage II                3      Normal #> 4  Treatment A+B  Diabetes Type 2     Stage II                3  Overweight #> 5  Treatment A+B  Diabetes Type 2     Stage II                3  Overweight #> 6  Treatment A+B  Diabetes Type 2     Stage II                3  Overweight #>   SystolicBP DiastolicBP HeartRate Temperature RespiratoryRate OxygenSaturation #> 1        142         111        84        36.6              16               98 #> 2        141         103        66        37.9              11               98 #> 3        143         111        55        36.7              16               94 #> 4        120          96        76        36.8              15               98 #> 5        118          94        88        37.5              18              100 #> 6        125          94        72        36.7              27               98 #>   HbA1c Creatinine eGFR Hemoglobin  WBC Platelets TotalCholesterol #> 1    NA       0.74   89       14.1   NA       238              130 #> 2   9.4       0.60   85       11.5 10.0       225               NA #> 3   9.0       0.46   92         NA  9.1       295              165 #> 4   6.7       0.73   89       10.6  7.5       254              236 #> 5   9.1       1.43   80       13.2  5.7       297              216 #> 6  10.4       1.08   81       13.6   NA       181              198 #>   LDLCholesterol HDLCholesterol Triglycerides PainScore QualityOfLife #> 1             95             41           148        NA            41 #> 2            136             62           117        NA            58 #> 3            132             50            53         1            75 #> 4            145             36           226         4            53 #> 5            136             64           104         7            64 #> 6             NA             NA           108         2            51 #>   FunctionalStatus MedicationAdherence ClinicalScore #> 1               91                  88            59 #> 2               97                 100            55 #> 3               69                  97            70 #> 4               63                 100            50 #> 5               74                  87            46 #> 6               76                  88            67 summary(medical_research_data$AgeGroup) # Example, assuming Age is present, use AgeGroup #>    Length     Class      Mode  #>       890 character character  hist(medical_research_data$SystolicBP)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/melanoma.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Melanoma Survival Data — melanoma",
        "title": "Melanoma Survival Data — melanoma",
        "text": "Data study survival patients malignant melanoma. Patients tumors surgically removed 1962 1977. dataset part boot R package, originally Andersen et al. (1993).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/melanoma.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Melanoma Survival Data — melanoma",
        "text": "",
        "code": "data(melanoma)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/melanoma.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Melanoma Survival Data — melanoma",
        "text": "data frame 205 rows 7 variables: time Numeric. Survival time days since operation. status Numeric. Censoring status: 1 indicates death melanoma, 2 indicates alive last follow-(censored), 3 indicates death causes (censored). sex Numeric. Sex patient: 1 = Male, 0 = Female. age Numeric. Age patient years time operation. year Numeric. Year operation. thickness Numeric. Tumor thickness millimeters (mm). ulcer Numeric. Ulceration status tumor: 0 = Absent, 1 = Present.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/melanoma.html",
        "id": "source",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Source",
        "title": "Melanoma Survival Data — melanoma",
        "text": "Andersen, P.K., Borgan, O., Gill, R.D. Keiding, N. (1993) Statistical Models Based Counting Processes. Springer-Verlag. Data included boot R package.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/melanoma.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Melanoma Survival Data — melanoma",
        "text": "",
        "code": "data(melanoma) str(melanoma) #> spc_tbl_ [205 × 7] (S3: spec_tbl_df/tbl_df/tbl/data.frame) #>  $ time     : num [1:205] 10 30 35 99 185 204 210 232 232 279 ... #>  $ status   : num [1:205] 3 3 2 3 1 1 1 3 1 1 ... #>  $ sex      : num [1:205] 1 1 1 0 1 1 1 0 1 0 ... #>  $ age      : num [1:205] 76 56 41 71 52 28 77 60 49 68 ... #>  $ year     : num [1:205] 1972 1968 1977 1968 1965 ... #>  $ thickness: num [1:205] 6.76 0.65 1.34 2.9 12.08 ... #>  $ ulcer    : num [1:205] 1 0 0 0 1 1 1 1 1 1 ... #>  - attr(*, \"spec\")=List of 3 #>   ..$ cols   :List of 7 #>   .. ..$ time     : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ status   : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ sex      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ age      : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ year     : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ thickness: list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   .. ..$ ulcer    : list() #>   .. .. ..- attr(*, \"class\")= chr [1:2] \"collector_double\" \"collector\" #>   ..$ default: list() #>   .. ..- attr(*, \"class\")= chr [1:2] \"collector_guess\" \"collector\" #>   ..$ skip   : num 1 #>   ..- attr(*, \"class\")= chr \"col_spec\" head(melanoma) #> # A tibble: 6 × 7 #>    time status   sex   age  year thickness ulcer #>   <dbl>  <dbl> <dbl> <dbl> <dbl>     <dbl> <dbl> #> 1    10      3     1    76  1972      6.76     1 #> 2    30      3     1    56  1968      0.65     0 #> 3    35      2     1    41  1977      1.34     0 #> 4    99      3     0    71  1968      2.9      0 #> 5   185      1     1    52  1965     12.1      1 #> 6   204      1     1    28  1971      4.84     1 summary(melanoma$time) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>      10    1525    2005    2153    3042    5565  table(melanoma$status, melanoma$ulcer) #>     #>      0  1 #>   1 16 41 #>   2 92 42 #>   3  7  7"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/mi_ruleout_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Myocardial Infarction (MI) Rule-Out Data — mi_ruleout_data",
        "title": "Myocardial Infarction (MI) Rule-Out Data — mi_ruleout_data",
        "text": "simulated dataset evaluating diagnostic strategies ruling myocardial infarction (MI) patients presenting chest pain. includes patient demographics, risk factors, ECG findings, serial troponin levels, CT angiography results, along final MI status.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/mi_ruleout_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Myocardial Infarction (MI) Rule-Out Data — mi_ruleout_data",
        "text": "",
        "code": "data(mi_ruleout_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/mi_ruleout_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Myocardial Infarction (MI) Rule-Out Data — mi_ruleout_data",
        "text": "data frame 800 rows 11 variables: patient_id Integer. Unique patient identifier. ecg Character. Electrocardiogram (ECG) findings (e.g., \"Normal\", \"Ischemic changes\", \"Non-specific\"). troponin_initial Character. Initial cardiac troponin level category (e.g., \"Normal\", \"Slightly Elevated\", \"Elevated\"). troponin_3hr Character. Cardiac troponin level 3 hours category (e.g., \"Normal\", \"Slightly Elevated\", \"Elevated\"). ct_angiography Character. Result CT angiography (e.g., \"Negative CAD\", \"Positive CAD\", \"Performed\"). mi_status Character. Final diagnosis myocardial infarction (e.g., \"MI Confirmed\", \"MI Ruled \"). age Integer. Patient's age years. chest_pain Character. Type chest pain experienced patient (e.g., \"Typical Angina\", \"Atypical Angina\", \"Non-cardiac\"). diabetes Character. Diabetes mellitus status (e.g., \"Yes\", \"\"). smoking Character. Current smoking status (e.g., \"Current Smoker\", \"Former Smoker\", \"Never Smoked\"). prior_cad Character. History prior coronary artery disease (e.g., \"Yes\", \"\").",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/mi_ruleout_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Myocardial Infarction (MI) Rule-Out Data — mi_ruleout_data",
        "text": "",
        "code": "data(mi_ruleout_data) str(mi_ruleout_data) #> 'data.frame':\t800 obs. of  11 variables: #>  $ patient_id      : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ ecg             : chr  \"Normal\" \"Ischemic changes\" \"Normal\" \"Ischemic changes\" ... #>  $ troponin_initial: chr  \"Normal\" \"Elevated\" \"Normal\" \"Elevated\" ... #>  $ troponin_3hr    : chr  \"Normal\" \"Elevated\" \"Normal\" \"Elevated\" ... #>  $ ct_angiography  : chr  \"Significant stenosis\" \"Significant stenosis\" \"Significant stenosis\" \"Significant stenosis\" ... #>  $ mi_status       : chr  \"No MI\" \"MI\" \"No MI\" \"MI\" ... #>  $ age             : int  53 41 84 44 56 40 78 78 56 36 ... #>  $ chest_pain      : chr  \"Atypical\" \"Typical\" \"Atypical\" \"Atypical\" ... #>  $ diabetes        : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ smoking         : chr  \"No\" \"No\" \"No\" \"No\" ... #>  $ prior_cad       : chr  \"Yes\" \"No\" \"No\" \"No\" ... head(mi_ruleout_data) #>   patient_id              ecg troponin_initial troponin_3hr #> 1          1           Normal           Normal       Normal #> 2          2 Ischemic changes         Elevated     Elevated #> 3          3           Normal           Normal       Normal #> 4          4 Ischemic changes         Elevated     Elevated #> 5          5           Normal           Normal       Normal #> 6          6           Normal           Normal       Normal #>         ct_angiography mi_status age  chest_pain diabetes smoking prior_cad #> 1 Significant stenosis     No MI  53    Atypical       No      No       Yes #> 2 Significant stenosis        MI  41     Typical       No      No        No #> 3 Significant stenosis     No MI  84    Atypical       No      No        No #> 4 Significant stenosis        MI  44    Atypical       No      No        No #> 5                 <NA>     No MI  56 Non-cardiac      Yes      No        No #> 6          No stenosis     No MI  40 Non-cardiac       No     Yes        No table(mi_ruleout_data$mi_status) #>  #>    MI No MI  #>    81   719  summary(mi_ruleout_data$age) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   30.00   49.00   60.00   60.13   71.00   90.00"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/modelbuilder_test_data.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Model Builder Test Data — modelbuilder_test_data",
        "title": "Model Builder Test Data — modelbuilder_test_data",
        "text": "dataset testing developing predictive models, particularly cardiovascular events. contains patient demographics, clinical risk factors, lab values, outcome variable.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/modelbuilder_test_data.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Model Builder Test Data — modelbuilder_test_data",
        "text": "",
        "code": "data(modelbuilder_test_data)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/modelbuilder_test_data.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Model Builder Test Data — modelbuilder_test_data",
        "text": "data frame 600 rows 16 variables: patient_id Character. Unique patient identifier. hospital Character. Hospital study center identifier. age Integer. Patient's age years. sex Character. Patient's sex (e.g., \"Male\", \"Female\"). diabetes Character. Diabetes status (e.g., \"Yes\", \"\"). hypertension Character. Hypertension status (e.g., \"Yes\", \"\"). smoking Character. Smoking status (e.g., \"Yes\", \"\", \"Former\"). cholesterol Integer. Total cholesterol level. bmi Numeric. Body Mass Index. systolic_bp Integer. Systolic blood pressure. family_history Character. Family history cardiovascular disease (e.g., \"Yes\", \"\"). troponin Numeric. Cardiac troponin level. creatinine Numeric. Serum creatinine level. cardiovascular_event Character. Outcome variable indicating cardiovascular event occurred (e.g., \"Yes\", \"\"). true_risk Numeric. simulated true underlying risk score patient. risk_category Character. pre-calculated risk category based certain criteria.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/modelbuilder_test_data.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Model Builder Test Data — modelbuilder_test_data",
        "text": "",
        "code": "data(modelbuilder_test_data) str(modelbuilder_test_data) #> 'data.frame':\t600 obs. of  16 variables: #>  $ patient_id          : chr  \"PT0001\" \"PT0002\" \"PT0003\" \"PT0004\" ... #>  $ hospital            : chr  \"University Medical Center\" \"General Hospital\" \"Community Hospital\" \"Community Hospital\" ... #>  $ age                 : num  81 58 69 73 70 64 83 64 85 64 ... #>  $ sex                 : chr  \"Male\" \"Male\" \"Female\" \"Male\" ... #>  $ diabetes            : chr  \"Yes\" \"No\" \"No\" \"Yes\" ... #>  $ hypertension        : chr  \"No\" \"No\" \"No\" \"Yes\" ... #>  $ smoking             : chr  \"Never\" \"Current\" \"Never\" \"Former\" ... #>  $ cholesterol         : num  167 194 185 186 129 205 243 250 283 219 ... #>  $ bmi                 : num  20.2 28.2 21.3 25.1 21.8 34.3 29.6 28.1 30.6 32.2 ... #>  $ systolic_bp         : num  132 121 134 131 130 170 107 148 132 130 ... #>  $ family_history      : chr  \"No\" \"Yes\" \"No\" \"Yes\" ... #>  $ troponin            : num  7.36 2.32 3.43 2.41 NA 3.66 3.12 2.68 2.5 3.39 ... #>  $ creatinine          : num  1.19 1.19 1.09 1.29 1.15 0.93 1.32 0.9 1.07 0.96 ... #>  $ cardiovascular_event: Factor w/ 2 levels \"No\",\"Yes\": 1 2 1 2 NA 2 2 2 2 1 ... #>  $ true_risk           : num  0.823 0.901 0.212 0.976 NA 0.875 0.764 0.792 0.987 0.811 ... #>  $ risk_category       : Factor w/ 4 levels \"Low\",\"Moderate\",..: 4 4 3 4 NA 4 4 4 4 4 ... head(modelbuilder_test_data) #>   patient_id                  hospital age    sex diabetes hypertension smoking #> 1     PT0001 University Medical Center  81   Male      Yes           No   Never #> 2     PT0002          General Hospital  58   Male       No           No Current #> 3     PT0003        Community Hospital  69 Female       No           No   Never #> 4     PT0004        Community Hospital  73   Male      Yes          Yes  Former #> 5     PT0005 University Medical Center  70 Female       No          Yes   Never #> 6     PT0006        Community Hospital  64 Female       No          Yes  Former #>   cholesterol  bmi systolic_bp family_history troponin creatinine #> 1         167 20.2         132             No     7.36       1.19 #> 2         194 28.2         121            Yes     2.32       1.19 #> 3         185 21.3         134             No     3.43       1.09 #> 4         186 25.1         131            Yes     2.41       1.29 #> 5         129 21.8         130             No       NA       1.15 #> 6         205 34.3         170            Yes     3.66       0.93 #>   cardiovascular_event true_risk risk_category #> 1                   No     0.823     Very High #> 2                  Yes     0.901     Very High #> 3                   No     0.212          High #> 4                  Yes     0.976     Very High #> 5                 <NA>        NA          <NA> #> 6                  Yes     0.875     Very High summary(modelbuilder_test_data$bmi) #>    Min. 1st Qu.  Median    Mean 3rd Qu.    Max.  #>   18.00   23.80   26.70   26.72   29.40   40.20  table(modelbuilder_test_data$cardiovascular_event) #>  #>  No Yes  #> 169 358"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvival.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Multivariable Survival Analysis — multisurvival",
        "title": "Multivariable Survival Analysis — multisurvival",
        "text": "Function Multivariable Survival Analysis using Cox-regression.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvival.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Multivariable Survival Analysis — multisurvival",
        "text": "",
        "code": "multisurvival(   data,   elapsedtime,   tint = FALSE,   dxdate,   fudate,   timetypedata = \"ymd\",   timetypeoutput = \"months\",   uselandmark = FALSE,   landmark = 3,   outcome,   outcomeLevel,   dod,   dooc,   awd,   awod,   analysistype = \"overall\",   explanatory,   contexpl,   multievent = FALSE,   hr = FALSE,   sty = \"t1\",   ph_cox = FALSE,   km = FALSE,   endplot = 60,   byplot = 12,   ci95 = FALSE,   risktable = FALSE,   censored = FALSE,   medianline = \"none\",   pplot = TRUE,   cutp = \"12, 36, 60\",   calculateRiskScore = FALSE,   numRiskGroups = \"four\",   plotRiskGroups = FALSE,   ac = FALSE,   adjexplanatory,   ac_method = \"average\",   showNomogram = FALSE,   use_modelSelection = FALSE,   modelSelection = \"enter\",   selectionCriteria = \"aic\",   pEntry = 0.05,   pRemoval = 0.1,   use_stratify = FALSE,   stratvar,   person_time = FALSE,   time_intervals = \"12, 36, 60\",   rate_multiplier = 100,   use_tree = FALSE,   min_node = 20,   complexity = 0.01,   max_depth = 5,   show_terminal_nodes = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvival.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Multivariable Survival Analysis — multisurvival",
        "text": "data dataset analyzed, provided data frame. Must contain variables specified options . elapsedtime numeric variable representing follow-time event last observation. tint = false, pre-calculated numeric time variable. tint = true, dxdate fudate used calculate time. tint true, survival time calculated dxdate fudate. false, elapsedtime provided pre-calculated numeric variable. dxdate Date diagnosis. Required tint = true. Must match format specified timetypedata. fudate Follow-date date last observation. Required tint = true. Must match format specified timetypedata. timetypedata Specifies format date variables input data. critical tint = true, dxdate fudate parsed according format calculate survival time. example, data files record dates \"YYYY-MM-DD\", select ymd. timetypeoutput units survival time reported output. Choose days, weeks, months, years. uselandmark true, applies landmark analysis starting specified time point. landmark time point (units defined timetypeoutput) start landmark analyses. used uselandmark = true. outcome outcome variable. Typically indicates event status (e.g., death, recurrence). survival analysis, may factor numeric event indicator. outcomeLevel level outcome considered event. example, outcome factor, specify level indicates event occurrence. dod level outcome corresponding death due disease, applicable. dooc level outcome corresponding death due causes, applicable. awd level outcome corresponding alive disease, applicable. awod level outcome corresponding alive without disease, applicable. analysistype Type survival analysis: - overall: -cause survival - cause: Cause-specific survival - compete: Competing risks analysis explanatory Categorical explanatory (predictor) variables included Cox model. contexpl Continuous explanatory (predictor) variables included Cox model. multievent true, multiple event levels considered competing risks analysis. Requires specifying dod, dooc, etc. hr true, generates plot hazard ratios explanatory variable Cox model. sty style hazard ratio (forest) plot. \"finalfit\" \"survminer forestplot\". ph_cox true, tests proportional hazards assumption Cox model. Use suspect violations PH assumption. km true, produces Kaplan-Meier survival plot. Useful visualization survival functions without covariate adjustment. endplot maximum follow-time (units defined timetypeoutput) display survival plots. byplot interval (units defined timetypeoutput) time points labels shown plots. ci95 true, displays 95\\ estimates plots. risktable true, displays number subjects risk time point survival plot. censored true, marks censored observations (e.g., using tick marks) survival plot. medianline true, displays line indicating median survival time survival plot. pplot true, displays p-value survival comparison test survival plot. cutp . calculateRiskScore true, calculates risk score Cox model coefficients individual. numRiskGroups Select number risk groups create risk scores. data divided equal quantiles based selection. plotRiskGroups true, stratifies individuals risk groups based calculated risk scores plots survival curves. ac . adjexplanatory . ac_method Method computing adjusted survival curves showNomogram . use_modelSelection true, applies variable selection procedure find best-fitting model based criteria like AIC likelihood ratio tests. modelSelection method used select variables: - enter: Includes variables (selection) - forward: Adds variables one time improve model - backward: Removes variables significantly contribute - : Combination forward backward steps selectionCriteria criterion used adding removing variables model selection: - aic: Balances model fit complexity - lrt: Uses likelihood ratio tests decide inclusion/removal pEntry Significance level variable enters model forward stepwise selection. pRemoval Significance level variable removed model backward stepwise selection. use_stratify true, uses stratification handle variables violate proportional hazards assumption. Stratification creates separate baseline hazard functions different groups. stratvar Variables used stratification. proportional hazards met, stratification can adjust model better fit data allowing different baseline hazards. person_time Enable option calculate display person-time metrics, including total follow-time incidence rates. metrics help quantify rate events per unit time study population. time_intervals Specify time intervals stratified person-time analysis. Enter  comma-separated list time points create intervals. example,  \"12, 36, 60\" create intervals 0-12, 12-36, 36-60, 60+. rate_multiplier Specify multiplier incidence rates (e.g., 100 rates per 100 person-years, 1000 rates per 1000 person-years). use_tree true, fits survival decision tree identify subgroups different survival outcomes. Decision trees provide intuitive alternative Cox regression identifying risk factors. min_node minimum number observations required terminal node. Larger values create simpler trees may generalizable potentially miss important subgroups. complexity complexity parameter tree pruning. Higher values result smaller trees. parameter controls trade-tree size goodness fit. max_depth maximum depth decision tree. Limits complexity tree avoid overfitting. show_terminal_nodes true, displays Kaplan-Meier survival curves terminal node decision tree.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvival.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Multivariable Survival Analysis — multisurvival",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$personTimeTable$asDF .data.frame(results$personTimeTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvival.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Multivariable Survival Analysis — multisurvival",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvivalClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Multivariable Survival Analysis — multisurvivalClass",
        "title": "Multivariable Survival Analysis — multisurvivalClass",
        "text": "Multivariable Survival Analysis Multivariable Survival Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvivalClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Multivariable Survival Analysis — multisurvivalClass",
        "text": "jmvcore::Analysis -> ClinicoPath::multisurvivalBase -> multisurvivalClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvivalClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Multivariable Survival Analysis — multisurvivalClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::multisurvivalBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvivalClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Multivariable Survival Analysis — multisurvivalClass",
        "text": "multisurvivalClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvivalClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Multivariable Survival Analysis — multisurvivalClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvivalClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Multivariable Survival Analysis — multisurvivalClass",
        "text": "",
        "code": "multisurvivalClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/multisurvivalClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Multivariable Survival Analysis — multisurvivalClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogold_standard.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "No Gold Standard Diagnostic Test Data — nogold_standard",
        "title": "No Gold Standard Diagnostic Test Data — nogold_standard",
        "text": "simulated dataset evaluating diagnostic tests absence perfect gold standard. includes results multiple imperfect tests , simulation purposes, 'true' disease status.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogold_standard.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "No Gold Standard Diagnostic Test Data — nogold_standard",
        "text": "",
        "code": "data(nogold_standard)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogold_standard.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "No Gold Standard Diagnostic Test Data — nogold_standard",
        "text": "data frame 200 rows 6 variables: caseID Integer. Unique identifier case patient. disease Character. true underlying disease status (e.g., \"Present\", \"Absent\"). real \"gold standard\" scenarios, unknown estimated. test1 Character. Result first diagnostic test (e.g., \"pos\", \"neg\", \"Positive\", \"Negative\"). test2 Character. Result second diagnostic test. test3 Character. Result third diagnostic test. test4 Character. Result fourth diagnostic test.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogold_standard.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "No Gold Standard Diagnostic Test Data — nogold_standard",
        "text": "",
        "code": "data(nogold_standard) str(nogold_standard) #> 'data.frame':\t200 obs. of  6 variables: #>  $ caseID : int  1 2 3 4 5 6 7 8 9 10 ... #>  $ disease: chr  \"healthy\" \"disease\" \"healthy\" \"disease\" ... #>  $ test1  : chr  \"pos\" \"neg\" \"pos\" \"pos\" ... #>  $ test2  : chr  \"neg\" \"pos\" \"neg\" \"pos\" ... #>  $ test3  : chr  \"pos\" \"pos\" \"neg\" \"neg\" ... #>  $ test4  : chr  \"neg\" \"pos\" \"neg\" \"pos\" ... head(nogold_standard) #>   caseID disease test1 test2 test3 test4 #> 1      1 healthy   pos   neg   pos   neg #> 2      2 disease   neg   pos   pos   pos #> 3      3 healthy   pos   neg   neg   neg #> 4      4 disease   pos   pos   neg   pos #> 5      5 disease   pos   pos   neg   pos #> 6      6 healthy   neg   pos   pos   neg table(nogold_standard$test1, nogold_standard$test2) #>       #>       neg pos #>   neg 118  25 #>   pos  26  31"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandard.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Analysis Without Gold Standard — nogoldstandard",
        "title": "Analysis Without Gold Standard — nogoldstandard",
        "text": "Analysis diagnostic tests without gold standard reference",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandard.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Analysis Without Gold Standard — nogoldstandard",
        "text": "",
        "code": "nogoldstandard(   data,   test1,   test1Positive,   test2,   test2Positive,   test3,   test3Positive,   test4,   test4Positive,   test5,   test5Positive,   method = \"latent_class\",   bootstrap = FALSE,   nboot = 1000,   alpha = 0.05 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandard.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Analysis Without Gold Standard — nogoldstandard",
        "text": "data data data frame. test1 First diagnostic test variable. test1Positive positive level Test 1. test2 Second diagnostic test variable. test2Positive positive level Test 2. test3 Third diagnostic test variable (optional). test3Positive positive level Test 3. test4 Fourth diagnostic test variable (optional). test4Positive positive level Test 4. test5 Fifth diagnostic test variable (optional). test5Positive positive level Test 5. method Method analyzing tests without gold standard. bootstrap Calculate bootstrap confidence intervals. nboot Number bootstrap samples confidence intervals. alpha Alpha level confidence intervals.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandard.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Analysis Without Gold Standard — nogoldstandard",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$prevalence$asDF .data.frame(results$prevalence)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandard.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Analysis Without Gold Standard — nogoldstandard",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandardClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Analysis Without Gold Standard — nogoldstandardClass",
        "title": "Analysis Without Gold Standard — nogoldstandardClass",
        "text": "Analysis Without Gold Standard Analysis Without Gold Standard",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandardClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Analysis Without Gold Standard — nogoldstandardClass",
        "text": "jmvcore::Analysis -> ClinicoPath::nogoldstandardBase -> nogoldstandardClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandardClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Analysis Without Gold Standard — nogoldstandardClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::nogoldstandardBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandardClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Analysis Without Gold Standard — nogoldstandardClass",
        "text": "nogoldstandardClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandardClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Analysis Without Gold Standard — nogoldstandardClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandardClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Analysis Without Gold Standard — nogoldstandardClass",
        "text": "",
        "code": "nogoldstandardClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nogoldstandardClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Analysis Without Gold Standard — nogoldstandardClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nomogram.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Nomogram — nomogram",
        "title": "Nomogram — nomogram",
        "text": "Nomogram",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nomogram.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Nomogram — nomogram",
        "text": "",
        "code": "nomogram(data, dep, group, alt = \"notequal\", varEq = TRUE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nomogram.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Nomogram — nomogram",
        "text": "data . dep . group . alt . varEq .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nomogram.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Nomogram — nomogram",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nomogrammer.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Fagan Nomogram Function — nomogrammer",
        "title": "Fagan Nomogram Function — nomogrammer",
        "text": "Create Fagan nomogram Bayesian analysis diagnostic testing Create Fagan nomogram Bayesian analysis diagnostic testing",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nomogrammer.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Fagan Nomogram Function — nomogrammer",
        "text": "",
        "code": "nomogrammer(   Prevalence = 0.4,   Sens = 0.9,   Spec = 0.8,   Plr = NULL,   Nlr = NULL,   Detail = TRUE,   NullLine = TRUE,   LabelSize = 2.8,   Verbose = FALSE )  nomogrammer(   Prevalence = 0.4,   Sens = 0.9,   Spec = 0.8,   Plr = NULL,   Nlr = NULL,   Detail = TRUE,   NullLine = TRUE,   LabelSize = 2.8,   Verbose = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nomogrammer.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Fagan Nomogram Function — nomogrammer",
        "text": "Prevalence Prior probability / prevalence Sens Sensitivity Spec Specificity Plr Positive likelihood ratio (calculated Sens Spec provided) Nlr Negative likelihood ratio (calculated Sens Spec provided) Detail Whether show detailed statistics plot NullLine Whether show null effect line LabelSize Size text labels Verbose Whether print additional information",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nomogrammer.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Fagan Nomogram Function — nomogrammer",
        "text": "ggplot object Fagan nomogram plot object Fagan nomogram",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/nomogrammer.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Fagan Nomogram Function — nomogrammer",
        "text": "",
        "code": "# Using sensitivity and specificity nomogrammer(Prevalence = 0.3, Sens = 0.9, Spec = 0.8)   # Using likelihood ratios nomogrammer(Prevalence = 0.3, Plr = 4.5, Nlr = 0.125)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratio.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Odds Ratio Table and Plot — oddsratio",
        "title": "Odds Ratio Table and Plot — oddsratio",
        "text": "Function Odds Ratio Table Plot.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratio.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Odds Ratio Table and Plot — oddsratio",
        "text": "",
        "code": "oddsratio(data, explanatory, outcome, showNomogram = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratio.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Odds Ratio Table and Plot — oddsratio",
        "text": "data data data frame. explanatory explanatory variables used analysis. outcome outcome variable used analysis. showNomogram Display interactive nomogram converting pre-test post-test  probabilities using likelihood ratios calculated data.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratio.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Odds Ratio Table and Plot — oddsratio",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratio.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Odds Ratio Table and Plot — oddsratio",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratioClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Odds Ratio Table and Plot — oddsratioClass",
        "title": "Odds Ratio Table and Plot — oddsratioClass",
        "text": "Odds Ratio Table Plot Odds Ratio Table Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratioClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Odds Ratio Table and Plot — oddsratioClass",
        "text": "jmvcore::Analysis -> ClinicoPath::oddsratioBase -> oddsratioClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratioClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Odds Ratio Table and Plot — oddsratioClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::oddsratioBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratioClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Odds Ratio Table and Plot — oddsratioClass",
        "text": "oddsratioClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratioClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Odds Ratio Table and Plot — oddsratioClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratioClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Odds Ratio Table and Plot — oddsratioClass",
        "text": "",
        "code": "oddsratioClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oddsratioClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Odds Ratio Table and Plot — oddsratioClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oneSurvival.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "One Survival Outcome — oneSurvival",
        "title": "One Survival Outcome — oneSurvival",
        "text": "One Survival Outcome",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oneSurvival.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "One Survival Outcome — oneSurvival",
        "text": "",
        "code": "oneSurvival(data, times, status, ciyn = FALSE, timeunits = \"None\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oneSurvival.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "One Survival Outcome — oneSurvival",
        "text": "data . times . status . ciyn . timeunits .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/oneSurvival.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "One Survival Outcome — oneSurvival",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$onesurvTable1$asDF .data.frame(results$onesurvTable1)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizer.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizer",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizer",
        "text": "Advanced tool preparing outcome variables various types survival analysis including overall survival, cause-specific, competing risks, progression-free survival, multistate models.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizer.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizer",
        "text": "",
        "code": "outcomeorganizer(   data,   outcome,   outcomeLevel,   recurrence,   recurrenceLevel,   patientID,   analysistype = \"os\",   multievent = FALSE,   dod,   dooc,   awd,   awod,   useHierarchy = FALSE,   eventPriority = 1,   intervalCensoring = FALSE,   intervalStart,   intervalEnd,   adminCensoring = FALSE,   adminDate,   outputTable = TRUE,   diagnostics = FALSE,   visualization = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizer.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizer",
        "text": "data data data frame. outcome primary outcome variable recoded survival analysis (e.g., vital status). outcomeLevel level outcome variable represents event interest (e.g., \"Death\", \"Relapse\"). recurrence Variable indicating disease recurrence progression (RFS/PFS/DFS analyses). recurrenceLevel level indicating recurrence progression occurred. patientID Patient identifier handling multiple records applying event hierarchies. analysistype type survival analysis prepare outcome . multievent true, allows multiple event types (e.g., death disease vs death causes). dod level representing death disease interest. dooc level representing death causes disease interest. awd level representing patients alive disease. awod level representing patients alive disease-free. useHierarchy true, applies hierarchy multiple events occur patient. eventPriority event code (e.g., 1, 2) takes precedence multiple events occur. intervalCensoring true, prepares data interval-censored analysis exact event times unknown. intervalStart Variable containing start interval event might occurred. intervalEnd Variable containing end interval event might occurred. adminCensoring true, applies administrative censoring specified date. adminDate Variable containing administrative censoring date. outputTable true, displays table showing frequency recoded outcome value. diagnostics true, displays diagnostic information recoding process. visualization true, displays visualization distribution recoded outcomes.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizer.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizer",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$outputTable$asDF .data.frame(results$outputTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizer.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizer",
        "text": "",
        "code": "# \\donttest{ # Example usage will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizerClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizerClass",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizerClass",
        "text": "Enhanced Outcome Organizer Survival Analysis Enhanced Outcome Organizer Survival Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizerClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizerClass",
        "text": "jmvcore::Analysis -> ClinicoPath::outcomeorganizerBase -> outcomeorganizerClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizerClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizerClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::outcomeorganizerBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizerClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizerClass",
        "text": "outcomeorganizerClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizerClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizerClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizerClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizerClass",
        "text": "",
        "code": "outcomeorganizerClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/outcomeorganizerClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Enhanced Outcome Organizer for Survival Analysis — outcomeorganizerClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Pairwise Chi-Square Test — pairchi2",
        "title": "Pairwise Chi-Square Test — pairchi2",
        "text": "Performs post-hoc pairwise chi-square tests following significant overall chi-square test independence. Includes multiple testing correction standardized residuals analysis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Pairwise Chi-Square Test — pairchi2",
        "text": "",
        "code": "pairchi2(   data,   row,   col,   adjust = \"bonferroni\",   showAssumptions = TRUE,   showExpected = FALSE,   showStdRes = TRUE,   plots = FALSE,   effectSize = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Pairwise Chi-Square Test — pairchi2",
        "text": "data data data frame. row row variable contingency table (categorical). col column variable contingency table (categorical). adjust Method adjusting p-values multiple comparisons. Bonferroni recommended conservative control Type error. showAssumptions Display checks chi-square test assumptions. showExpected Display expected frequencies cell. showStdRes Display standardized residuals identify cells contribute chi-square statistic. plots Display association plots mosaic plots. effectSize Calculate display effect size measures (Cramér's V, Phi coefficient).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Pairwise Chi-Square Test — pairchi2",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$assumptions$asDF .data.frame(results$assumptions)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Pairwise Chi-Square Test — pairchi2",
        "text": "",
        "code": "# \\donttest{ # Example usage will be provided # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2Class.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Pairwise Chi-Square Analysis — pairchi2Class",
        "title": "Pairwise Chi-Square Analysis — pairchi2Class",
        "text": "Pairwise Chi-Square Analysis Pairwise Chi-Square Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2Class.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Pairwise Chi-Square Analysis — pairchi2Class",
        "text": "jmvcore::Analysis -> ClinicoPath::pairchi2Base -> pairchi2Class",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2Class.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Pairwise Chi-Square Analysis — pairchi2Class",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::pairchi2Base$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2Class.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Pairwise Chi-Square Analysis — pairchi2Class",
        "text": "pairchi2Class$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2Class.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Pairwise Chi-Square Analysis — pairchi2Class",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2Class.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Pairwise Chi-Square Analysis — pairchi2Class",
        "text": "",
        "code": "pairchi2Class$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pairchi2Class.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Pairwise Chi-Square Analysis — pairchi2Class",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/parallelplot.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Parallel Plot — parallelplot",
        "title": "Parallel Plot — parallelplot",
        "text": "Parallel Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/parallelplot.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Parallel Plot — parallelplot",
        "text": "",
        "code": "parallelplot(data, dep, group, alt = \"notequal\", varEq = TRUE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/parallelplot.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Parallel Plot — parallelplot",
        "text": "data . dep . group . alt . varEq .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/parallelplot.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Parallel Plot — parallelplot",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelines.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Patient Timeline Data for Clinical Oncology — patientTimelines",
        "title": "Patient Timeline Data for Clinical Oncology — patientTimelines",
        "text": "dataset containing simulated patient timeline data clinical oncology research. dataset represents typical patient journeys cancer treatment, including diagnosis, treatment, response assessment, outcomes. data simulates realistic clinical study patients enroll different timepoints varied treatment durations outcomes.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelines.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Patient Timeline Data for Clinical Oncology — patientTimelines",
        "text": "",
        "code": "patientTimelines"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelines.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Patient Timeline Data for Clinical Oncology — patientTimelines",
        "text": "data frame 30 rows 15 variables: PatientID Patient identifier, formatted PT001, PT002, etc. StartTime Numeric. Time observation began, varies patients represent staggered enrollment (values greater 0) EndTime Numeric. Time observation ended, units StartTime BestResponse Factor levels: CR (Complete Response), PR (Partial Response), SD (Stable Disease), PD (Progressive Disease), NE (Evaluable) Surgery Numeric. Time surgery relative study start. May negative surgeries occurred enrollment TreatmentStart Numeric. Time treatment began relative study start ResponseAssessment Numeric. Time response assessment relative study start Progression Numeric. Time disease progression, NA progression Death Numeric. Time death, NA patient alive last follow-Risk Factor levels: High, Medium, Low. Risk classification patient Age Numeric. Patient age years ECOG Integer (0-3). ECOG performance status ResponseDuration Numeric. Duration response, calculated Progression - ResponseAssessment FollowUpDuration Numeric. Total duration follow-, StartTime EndTime",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelines.html",
        "id": "note",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Note",
        "title": "Patient Timeline Data for Clinical Oncology — patientTimelines",
        "text": "also date-based version dataset time variables represented actual dates instead numeric values, named 'patientTimelinesDates'.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelines.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Patient Timeline Data for Clinical Oncology — patientTimelines",
        "text": "",
        "code": "data(patientTimelines)  # Show staggered entry of patients into the study hist(patientTimelines$StartTime,      main = \"Patient Enrollment Times\",      xlab = \"Start Time\")   # Basic swimmer plot swimmerplot(   data = patientTimelines,   patientID = \"PatientID\",   start = \"StartTime\",   end = \"EndTime\",   event = \"BestResponse\" ) #> Error in swimmerplot(data = patientTimelines, patientID = \"PatientID\",     start = \"StartTime\", end = \"EndTime\", event = \"BestResponse\"): argument \"sortVariable\" is missing, with no default  # With milestones swimmerplot(   data = patientTimelines,   patientID = \"PatientID\",   start = \"StartTime\",   end = \"EndTime\",   event = \"BestResponse\",   milestone1Name = \"Surgery\",   milestone1Date = \"Surgery\",   milestone2Name = \"Treatment\",   milestone2Date = \"TreatmentStart\" ) #> Error in swimmerplot(data = patientTimelines, patientID = \"PatientID\",     start = \"StartTime\", end = \"EndTime\", event = \"BestResponse\",     milestone1Name = \"Surgery\", milestone1Date = \"Surgery\", milestone2Name = \"Treatment\",     milestone2Date = \"TreatmentStart\"): argument \"sortVariable\" is missing, with no default"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelinesDates.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Patient Timeline Data with Dates for Clinical Oncology — patientTimelinesDates",
        "title": "Patient Timeline Data with Dates for Clinical Oncology — patientTimelinesDates",
        "text": "dataset containing simulated patient timeline data clinical oncology research, time variables represented actual dates. dataset represents typical patient journeys cancer treatment, including diagnosis, treatment, response assessment, outcomes. data simulates realistic clinical study patients enroll 6-month period varied treatment durations outcomes.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelinesDates.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Patient Timeline Data with Dates for Clinical Oncology — patientTimelinesDates",
        "text": "",
        "code": "patientTimelinesDates"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelinesDates.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Patient Timeline Data with Dates for Clinical Oncology — patientTimelinesDates",
        "text": "data frame 30 rows 15 variables: PatientID Patient identifier, formatted PT001, PT002, etc. StartDate Date. Date observation began, varies across patients represent staggered enrollment EndDate Date. Date observation ended BestResponse Factor levels: CR (Complete Response), PR (Partial Response), SD (Stable Disease), PD (Progressive Disease), NE (Evaluable) Surgery Date. Date surgery, may study enrollment date TreatmentStart Date. Date treatment began ResponseAssessment Date. Date response assessment Progression Date. Date disease progression, NA progression Death Date. Date death, NA patient alive last follow-Risk Factor levels: High, Medium, Low. Risk classification patient Age Numeric. Patient age years ECOG Integer (0-3). ECOG performance status ResponseDuration Numeric. Duration response days, calculated Progression - ResponseAssessment FollowUpDuration Numeric. Total duration follow-days, StartDate EndDate",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelinesDates.html",
        "id": "note",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Note",
        "title": "Patient Timeline Data with Dates for Clinical Oncology — patientTimelinesDates",
        "text": "date-based version patientTimelines dataset.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/patientTimelinesDates.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Patient Timeline Data with Dates for Clinical Oncology — patientTimelinesDates",
        "text": "",
        "code": "data(patientTimelinesDates)  # Show staggered entry of patients into the study hist(as.numeric(patientTimelinesDates$StartDate - min(patientTimelinesDates$StartDate)),      main = \"Patient Enrollment Days from Study Start\",      xlab = \"Days\")   # Basic swimmer plot with date data swimmerplot(   data = patientTimelinesDates,   patientID = \"PatientID\",   start = \"StartDate\",   end = \"EndDate\",   event = \"BestResponse\",   timetype = \"datetime\",   timetypedata = \"ymd\",   timetypeoutput = \"months\" ) #> Error in swimmerplot(data = patientTimelinesDates, patientID = \"PatientID\",     start = \"StartDate\", end = \"EndDate\", event = \"BestResponse\",     timetype = \"datetime\", timetypedata = \"ymd\", timetypeoutput = \"months\"): argument \"sortVariable\" is missing, with no default  # With absolute time display to show the actual enrollment pattern swimmerplot(   data = patientTimelinesDates,   patientID = \"PatientID\",   start = \"StartDate\",   end = \"EndDate\",   event = \"BestResponse\",   timetype = \"datetime\",   timetypedata = \"ymd\",   timetypeoutput = \"months\",   startType = \"absolute\" ) #> Error in swimmerplot(data = patientTimelinesDates, patientID = \"PatientID\",     start = \"StartDate\", end = \"EndDate\", event = \"BestResponse\",     timetype = \"datetime\", timetypedata = \"ymd\", timetypeoutput = \"months\",     startType = \"absolute\"): argument \"sortVariable\" is missing, with no default"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pipe.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Pipe operator from https://github.com/poldham/covidlens/blob/master/R/utils-pipe.R See magrittr::%>% for details. — %>%",
        "title": "Pipe operator from https://github.com/poldham/covidlens/blob/master/R/utils-pipe.R See magrittr::%>% for details. — %>%",
        "text": "Pipe operator https://github.com/poldham/covidlens/blob/master/R/utils-pipe.R See magrittr::%>% details.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/pipe.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Pipe operator from https://github.com/poldham/covidlens/blob/master/R/utils-pipe.R See magrittr::%>% for details. — %>%",
        "text": "",
        "code": "lhs %>% rhs"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvival.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Power Analysis for Survival Studies — powersurvival",
        "title": "Power Analysis for Survival Studies — powersurvival",
        "text": "Calculates power, sample size, minimum detectable hazard ratio survival studies. helps researchers design adequately powered studies detect meaningful differences survival groups.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvival.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Power Analysis for Survival Studies — powersurvival",
        "text": "",
        "code": "powersurvival(   data,   calc_type = \"sample_size\",   study_design = \"simple\",   hazard_ratio = 0.7,   power = 0.8,   alpha = 0.05,   sample_size = 200,   allocation_ratio = 1,   prob_event = 0.5,   accrual_time = 1,   follow_up_time = 3,   median_survival = 5,   loss_followup = 0.05 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvival.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Power Analysis for Survival Studies — powersurvival",
        "text": "data data data frame. Note power analysis typically require actual data - used study planning. calc_type Select calculate. 'Power' calculates statistical power given sample size hazard ratio. 'Sample Size' determines required sample size desired power hazard ratio. 'Hazard Ratio' calculates minimum detectable effect size given sample size power. study_design Select study design complexity. 'Simple' assumes fixed follow-period subjects. 'Complex' allows accrual period variable follow-times. hazard_ratio hazard ratio detect. Values < 1 indicate protective effects (treatment better control); values > 1 indicate harmful effects (control better treatment). power probability detecting effect one exists (1 minus Type II error rate). Conventional values 0.8 0.9. alpha Type error rate (probability falsely rejecting null hypothesis). Conventional value 0.05. sample_size total number subjects across groups. sample size calculation, starting value search algorithm. allocation_ratio ratio control group size treatment group size. 1 indicates equal allocation. Values > 1 mean subjects control group; values < 1 mean treatment group. prob_event overall probability observing event (e.g., death) study period. affects number events observed, crucial power. accrual_time period participants recruited, years. used complex designs. follow_up_time additional follow-period accrual ends, years. used complex designs. median_survival median survival time control group, years. Used estimate baseline hazard rate. used complex designs. loss_followup annual rate loss follow-(attrition). used complex designs.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvival.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Power Analysis for Survival Studies — powersurvival",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvival.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Power Analysis for Survival Studies — powersurvival",
        "text": "",
        "code": "# \\donttest{ # Example power calculation for a survival study # powersurvival( #   calc_type = \"sample_size\", #   hazard_ratio = 0.7, #   power = 0.8, #   alpha = 0.05, #   prob_event = 0.5, #   allocation_ratio = 1 # ) # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvivalClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Power Analysis for Survival Studies — powersurvivalClass",
        "title": "Power Analysis for Survival Studies — powersurvivalClass",
        "text": "Power Analysis Survival Studies Power Analysis Survival Studies",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvivalClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Power Analysis for Survival Studies — powersurvivalClass",
        "text": "jmvcore::Analysis -> ClinicoPath::powersurvivalBase -> powersurvivalClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvivalClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Power Analysis for Survival Studies — powersurvivalClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::powersurvivalBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvivalClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Power Analysis for Survival Studies — powersurvivalClass",
        "text": "powersurvivalClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvivalClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Power Analysis for Survival Studies — powersurvivalClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvivalClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Power Analysis for Survival Studies — powersurvivalClass",
        "text": "",
        "code": "powersurvivalClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/powersurvivalClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Power Analysis for Survival Studies — powersurvivalClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ppv.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Positive Predictive Value — ppv",
        "title": "Positive Predictive Value — ppv",
        "text": "Positive Predictive Value",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ppv.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Positive Predictive Value — ppv",
        "text": "",
        "code": "ppv(percTrue = 50, alpha = 0.05, power = 0.8, percHack = 0)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ppv.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Positive Predictive Value — ppv",
        "text": "percTrue . alpha . power . percHack .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/ppv.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Positive Predictive Value — ppv",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$confusion$asDF .data.frame(results$confusion)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/print.DeLong.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Print Method for DeLong — print.DeLong",
        "title": "Print Method for DeLong — print.DeLong",
        "text": "Print Method DeLong",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/print.DeLong.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Print Method for DeLong — print.DeLong",
        "text": "",
        "code": "# S3 method for class 'DeLong' print(x, digits = max(3, getOption(\"digits\") - 3), ...)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/print.DeLong.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Print Method for DeLong — print.DeLong",
        "text": "x Object class DeLong digits Number digits print ... Additional arguments",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/print.DeLong.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Print Method for DeLong — print.DeLong",
        "text": "Prints AUC, pairwise comparisons overall test",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/print.sensSpecTable.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Print formatted HTML table for sensitivity/specificity results — print.sensSpecTable",
        "title": "Print formatted HTML table for sensitivity/specificity results — print.sensSpecTable",
        "text": "Print formatted HTML table sensitivity/specificity results Sensitivity Specificity Table",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/print.sensSpecTable.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Print formatted HTML table for sensitivity/specificity results — print.sensSpecTable",
        "text": "",
        "code": "# S3 method for class 'sensSpecTable' print(Title, TP, FP, TN, FN)  # S3 method for class 'sensSpecTable' print(Title, TP, FP, TN, FN)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/print.sensSpecTable.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Print formatted HTML table for sensitivity/specificity results — print.sensSpecTable",
        "text": "Title Title table TP True Positives FP False Positives TN True Negatives FN False Negatives",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/print.sensSpecTable.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Print formatted HTML table for sensitivity/specificity results — print.sensSpecTable",
        "text": "HTML string containing formatted table HTML table",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdaroc.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "ROC Analysis — psychopdaroc",
        "title": "ROC Analysis — psychopdaroc",
        "text": "Receiver Operating Characteristic (ROC) curve analysis optimal cutpoint determination.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdaroc.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "ROC Analysis — psychopdaroc",
        "text": "",
        "code": "psychopdaroc(   data,   dependentVars,   classVar,   positiveClass,   subGroup,   method = \"maximize_metric\",   metric = \"youden\",   direction = \">=\",   specifyCutScore = \"\",   tol_metric = 0.05,   break_ties = \"mean\",   allObserved = FALSE,   boot_runs = 0,   usePriorPrev = FALSE,   priorPrev = 0.5,   costratioFP = 1,   sensSpecTable = FALSE,   showThresholdTable = FALSE,   maxThresholds = 20,   delongTest = FALSE,   plotROC = TRUE,   combinePlots = TRUE,   cleanPlot = FALSE,   showOptimalPoint = TRUE,   displaySE = FALSE,   smoothing = FALSE,   showConfidenceBands = FALSE,   legendPosition = \"right\",   directLabel = FALSE,   interactiveROC = FALSE,   showCriterionPlot = FALSE,   showPrevalencePlot = FALSE,   showDotPlot = FALSE,   precisionRecallCurve = FALSE,   partialAUC = FALSE,   partialAUCfrom = 0.8,   partialAUCto = 1,   rocSmoothingMethod = \"none\",   bootstrapCI = FALSE,   bootstrapReps = 2000,   quantileCIs = FALSE,   quantiles = \"0.1,0.25,0.5,0.75,0.9\",   compareClassifiers = FALSE,   calculateIDI = FALSE,   calculateNRI = FALSE,   refVar,   nriThresholds = \"\",   idiNriBootRuns = 1000 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdaroc.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "ROC Analysis — psychopdaroc",
        "text": "data data data frame. dependentVars Test variable(s) evaluated classification performance. Multiple variables can selected comparison. classVar Binary classification variable representing true class (gold standard). Must exactly two levels. positiveClass Specifies level class variable treated positive class. subGroup Optional grouping variable stratified analysis.  ROC curves calculated separately group. method Method determining optimal cutpoint. Different methods optimize different aspects classifier performance. metric Metric optimize determining cutpoint.  applies maximize/minimize methods. direction Direction classification relative cutpoint. Use '>=' higher test values indicate positive class. specifyCutScore Specific cutpoint value use method set 'Manual cutpoint'. tol_metric Tolerance metric value multiple cutpoints yield similar performance. Cutpoints within tolerance considered equivalent. break_ties Method handling ties multiple cutpoints achieve metric value. allObserved Display performance metrics observed test values potential cutpoints, just optimal cutpoint. boot_runs Number bootstrap iterations methods using bootstrapping. Set 0 disable bootstrapping. usePriorPrev Use specified prior prevalence instead sample prevalence calculating predictive values. priorPrev Population prevalence use predictive value calculations. used 'Use Prior Prevalence' checked. costratioFP Relative cost false positives compared false negatives. Values > 1 penalize false positives heavily. sensSpecTable Display detailed confusion matrices optimal cutpoints. showThresholdTable Display detailed table performance metrics multiple thresholds. maxThresholds Maximum number threshold values show threshold table. delongTest Perform DeLong's test comparing AUCs multiple test variables. Requires least two test variables. plotROC Display ROC curves visual assessment classifier performance. combinePlots multiple test variables selected, combine ROC curves single plot. cleanPlot Create clean ROC curves without annotations, suitable publications. showOptimalPoint Display optimal cutpoint ROC curve. displaySE Display standard error bands ROC curves (LOESS smoothing applied). smoothing Apply LOESS smoothing ROC curves visualization. showConfidenceBands Display confidence bands around ROC curve. legendPosition Position legend plots multiple ROC curves. directLabel Label curves directly plot instead using legend. interactiveROC Create interactive HTML ROC plot (requires plotROC package). showCriterionPlot Plot showing sensitivity specificity change across different thresholds. showPrevalencePlot Plot showing PPV NPV change disease prevalence. showDotPlot Dot plot showing distribution test values class. precisionRecallCurve Display precision-recall curves alongside ROC curves. partialAUC Calculate AUC specific region ROC curve. partialAUCfrom Lower bound specificity range partial AUC calculation. partialAUCto Upper bound specificity range partial AUC calculation. rocSmoothingMethod Method smoothing ROC curve (requires pROC package). bootstrapCI Calculate bootstrap confidence intervals AUC optimal cutpoints. bootstrapReps Number bootstrap replications confidence interval calculation. quantileCIs Display confidence intervals specific quantiles test variable. quantiles Comma-separated list quantiles (0-1) display confidence intervals. compareClassifiers Perform comprehensive comparison classifier performance metrics. calculateIDI Calculate Integrated Discrimination Improvement model comparison. calculateNRI Calculate Net Reclassification Index model comparison. refVar Reference test variable IDI NRI calculations. variables compared reference. nriThresholds Comma-separated probability thresholds (0-1) defining risk categories NRI. Leave empty continuous NRI. idiNriBootRuns Number bootstrap iterations IDI NRI confidence intervals.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdaroc.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "ROC Analysis — psychopdaroc",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$simpleResultsTable$asDF .data.frame(results$simpleResultsTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdarocClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "ROC Analysis — psychopdarocClass",
        "title": "ROC Analysis — psychopdarocClass",
        "text": "ROC Analysis ROC Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdarocClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "ROC Analysis — psychopdarocClass",
        "text": "Table",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdarocClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "ROC Analysis — psychopdarocClass",
        "text": "jmvcore::Analysis -> ClinicoPath::psychopdarocBase -> psychopdarocClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdarocClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "ROC Analysis — psychopdarocClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::psychopdarocBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdarocClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "ROC Analysis — psychopdarocClass",
        "text": "psychopdarocClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdarocClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "ROC Analysis — psychopdarocClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdarocClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "ROC Analysis — psychopdarocClass",
        "text": "",
        "code": "psychopdarocClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/psychopdarocClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "ROC Analysis — psychopdarocClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/raw_to_prob.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Convert raw test values to predicted probabilities using ROC curve — raw_to_prob",
        "title": "Convert raw test values to predicted probabilities using ROC curve — raw_to_prob",
        "text": "function maps raw test values probabilities based position ROC curve. Used IDI/NRI calculations.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/raw_to_prob.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Convert raw test values to predicted probabilities using ROC curve — raw_to_prob",
        "text": "",
        "code": "raw_to_prob(values, actual, direction = \">=\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/raw_to_prob.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Convert raw test values to predicted probabilities using ROC curve — raw_to_prob",
        "text": "values Raw test values actual Binary outcomes (0/1) direction Direction test (\">=\" \"<=\")",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/raw_to_prob.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Convert raw test values to predicted probabilities using ROC curve — raw_to_prob",
        "text": "Vector predicted probabilities",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcat.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Summary of Categorical Variables — reportcat",
        "title": "Summary of Categorical Variables — reportcat",
        "text": "Generates detailed summary categorical variables including counts, percentages, missing value information. output presented textual visual formats, making easy interpret distribution data.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcat.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Summary of Categorical Variables — reportcat",
        "text": "",
        "code": "reportcat(   data,   vars,   sumvar_style = FALSE,   show_proportions = TRUE,   sort_by_frequency = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcat.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Summary of Categorical Variables — reportcat",
        "text": "data data data frame. vars Select variables data frame wish summarize. categorical variables (nominal, ordinal, factors) allowed. sumvar_style TRUE, provides comprehensive categorical analysis similar  sumvar package's tab1() function enhanced frequency tables percentage breakdowns. show_proportions TRUE, shows proportions alongside counts summary. sort_by_frequency TRUE, categories sorted frequency (common first).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcat.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Summary of Categorical Variables — reportcat",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcat.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Summary of Categorical Variables — reportcat",
        "text": "",
        "code": "# \\donttest{ # Example usage: # 1. Load your data into a data frame. # 2. Select the categorical variables to summarize. # 3. Run the reportcat module to view the summary. # # The module will produce a styled textual report along with a visual summary table. # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcatClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Summary of Categorical Variables — reportcatClass",
        "title": "Summary of Categorical Variables — reportcatClass",
        "text": "Summary Categorical Variables Summary Categorical Variables",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcatClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Summary of Categorical Variables — reportcatClass",
        "text": "Text",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcatClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Summary of Categorical Variables — reportcatClass",
        "text": "jmvcore::Analysis -> ClinicoPath::reportcatBase -> reportcatClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcatClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Summary of Categorical Variables — reportcatClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::reportcatBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcatClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Summary of Categorical Variables — reportcatClass",
        "text": "reportcatClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcatClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Summary of Categorical Variables — reportcatClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcatClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Summary of Categorical Variables — reportcatClass",
        "text": "",
        "code": "reportcatClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/reportcatClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Summary of Categorical Variables — reportcatClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retracted.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Find Retracted Papers from DOI — retracted",
        "title": "Find Retracted Papers from DOI — retracted",
        "text": "Find Retracted Papers DOI",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retracted.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Find Retracted Papers from DOI — retracted",
        "text": "",
        "code": "retracted(data, doi, database = \"or\", pmid = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retracted.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Find Retracted Papers from DOI — retracted",
        "text": "data data data frame. doi Column containing DOI strings. database Database check retractions. pmid Add corresponding PubMed IDs dataset.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retracted.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Find Retracted Papers from DOI — retracted",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summary$asDF .data.frame(results$summary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retractedClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Find Retracted Papers from DOI — retractedClass",
        "title": "Find Retracted Papers from DOI — retractedClass",
        "text": "Find Retracted Papers DOI Find Retracted Papers DOI",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retractedClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Find Retracted Papers from DOI — retractedClass",
        "text": "jmvcore::Analysis -> ClinicoPath::retractedBase -> retractedClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retractedClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Find Retracted Papers from DOI — retractedClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::retractedBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retractedClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Find Retracted Papers from DOI — retractedClass",
        "text": "retractedClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retractedClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Find Retracted Papers from DOI — retractedClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retractedClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Find Retracted Papers from DOI — retractedClass",
        "text": "",
        "code": "retractedClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/retractedClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Find Retracted Papers from DOI — retractedClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplot.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "River Plots — riverplot",
        "title": "River Plots — riverplot",
        "text": "'Function generating river plots (alluvial diagrams) visualize flows transitions time categories.'",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplot.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "River Plots — riverplot",
        "text": "",
        "code": "riverplot(   data,   id = NULL,   time,   strata,   weight = NULL,   plotType = \"alluvial\",   fillType = \"first\",   sortStreams = TRUE,   labelNodes = TRUE,   curveType = \"cardinal\",   showCounts = FALSE,   showLegend = TRUE,   mytitle = \"\",   xtitle = \"\",   ytitle = \"\",   originaltheme = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplot.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "River Plots — riverplot",
        "text": "data data data frame. id Optional identifier individual entities data. time Variable representing time points sequential stages. strata Variables containing categories change time. weight Optional numerical variable determine stream width. plotType Type river plot generate. fillType Determines colors assigned flows. sortStreams Sort alluvial streams frequency. labelNodes Add labels nodes. curveType Type curve use stream paths. showCounts Display counts diagram. showLegend Display color legend. mytitle Title plot. xtitle Label x-axis. ytitle Label y-axis. originaltheme Use ggStatsPlot theme instead default theme.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplot.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "River Plots — riverplot",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplot.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "River Plots — riverplot",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplotClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "River Plots — riverplotClass",
        "title": "River Plots — riverplotClass",
        "text": "River Plots River Plots",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplotClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "River Plots — riverplotClass",
        "text": "jmvcore::Analysis -> ClinicoPath::riverplotBase -> riverplotClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplotClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "River Plots — riverplotClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::riverplotBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplotClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "River Plots — riverplotClass",
        "text": "riverplotClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplotClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "River Plots — riverplotClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplotClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "River Plots — riverplotClass",
        "text": "",
        "code": "riverplotClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/riverplotClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "River Plots — riverplotClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "ROC Curve Analysis — roc",
        "title": "ROC Curve Analysis — roc",
        "text": "Function ROC (Receiver Operating Characteristic) Curve Analysis. Calculates sensitivity, specificity, AUC, Youden index, .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "ROC Curve Analysis — roc",
        "text": "",
        "code": "roc(   data,   classvar,   classpos,   testvar,   direction = \"greatpos\",   ci = TRUE,   cimethod = \"delong\",   youden = TRUE,   optimcrit = TRUE,   pp = FALSE,   pprob = 0.5,   costratioFP = 1,   coords = TRUE,   plotroc = TRUE,   plotci = FALSE,   plotbars = FALSE,   plotprev = FALSE,   plotidr = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "ROC Curve Analysis — roc",
        "text": "data data data frame. classvar string naming variable data contains  actual status (gold standard / diagnosis), must factor two levels. classpos level classification variable represents positive status. testvar string naming variable data contains  test result measurement, must numeric. direction Specify whether greater values test variable indicate positive test (default) lower values indicate positive test. Note: AUC always greater 0.5, even means inverting predictor internally. ci Boolean selection whether show 95\\ Default 'true'. cimethod Method calculating confidence intervals AUC. Default 'delong'. youden Boolean selection whether calculate Youden index (J = sensitivity + specificity - 1). Default 'true'. optimcrit Boolean selection whether calculate optimal criterion value. Default 'true'. pp Boolean selection whether use specified disease prevalence predictive values. Default 'false'. pprob Prior probability (disease prevalence population). Requires value 0.001 0.999, default 0.500. costratioFP Cost ratio false positive false negative decisions. Default 1.000 (equal costs). coords Boolean selection whether show full list coordinates ROC curve. includes possible thresholds sensitivity, specificity,  predictive values, likelihood ratios. Default 'true'. plotroc Boolean selection whether create ROC curve plot. Default 'true'. plotci Boolean selection whether show 95\\ ROC curve. Default 'false'. plotbars Boolean selection whether create plot sensitivity specificity versus criterion values. Default 'false'. plotprev Boolean selection whether create plot positive negative predictive values versus disease prevalence. Default 'false'. plotidr Boolean selection whether create interactive dot diagram Default 'true'.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "ROC Curve Analysis — roc",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summary$asDF .data.frame(results$summary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "ROC Curve Analysis — roc",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "ROC — roc2",
        "title": "ROC — roc2",
        "text": "Function ROC Analysis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "ROC — roc2",
        "text": "",
        "code": "roc2(   data,   measurement,   status,   excl = FALSE,   sty = FALSE,   quant = FALSE,   label = FALSE,   inter = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "ROC — roc2",
        "text": "data data data frame. measurement . status . excl . sty . quant . label . inter .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "ROC — roc2",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "ROC — roc2",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2Class.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "ROC Analysis — roc2Class",
        "title": "ROC Analysis — roc2Class",
        "text": "ROC Analysis ROC Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2Class.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "ROC Analysis — roc2Class",
        "text": "jmvcore::Analysis -> ClinicoPath::roc2Base -> roc2Class",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2Class.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "ROC Analysis — roc2Class",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::roc2Base$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2Class.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "ROC Analysis — roc2Class",
        "text": "roc2Class$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2Class.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "ROC Analysis — roc2Class",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2Class.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "ROC Analysis — roc2Class",
        "text": "",
        "code": "roc2Class$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/roc2Class.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "ROC Analysis — roc2Class",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/rocClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "ROC Curve Analysis — rocClass",
        "title": "ROC Curve Analysis — rocClass",
        "text": "ROC Curve Analysis ROC Curve Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/rocClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "ROC Curve Analysis — rocClass",
        "text": "jmvcore::Analysis -> ClinicoPath::rocBase -> rocClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/rocClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "ROC Curve Analysis — rocClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::rocBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/rocClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "ROC Curve Analysis — rocClass",
        "text": "rocClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/rocClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "ROC Curve Analysis — rocClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/rocClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "ROC Curve Analysis — rocClass",
        "text": "",
        "code": "rocClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/rocClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "ROC Curve Analysis — rocClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculator.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Screening Test Calculator — screeningcalculator",
        "title": "Screening Test Calculator — screeningcalculator",
        "text": "Function Screening Test Probability Calculator.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculator.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Screening Test Calculator — screeningcalculator",
        "text": "",
        "code": "screeningcalculator(   sens = 0.9,   spec = 0.8,   prev = 0.1,   repeat2 = TRUE,   repeat3 = TRUE,   fnote = FALSE,   fagan = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculator.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Screening Test Calculator — screeningcalculator",
        "text": "sens . spec . prev . repeat2 . repeat3 . fnote . fagan .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculator.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Screening Test Calculator — screeningcalculator",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$singleTestTable$asDF .data.frame(results$singleTestTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculator.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Screening Test Calculator — screeningcalculator",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculatorClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Screening Test Calculator — screeningcalculatorClass",
        "title": "Screening Test Calculator — screeningcalculatorClass",
        "text": "Screening Test Calculator Screening Test Calculator",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculatorClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Screening Test Calculator — screeningcalculatorClass",
        "text": "jmvcore::Analysis -> ClinicoPath::screeningcalculatorBase -> screeningcalculatorClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculatorClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Screening Test Calculator — screeningcalculatorClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::screeningcalculatorBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculatorClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Screening Test Calculator — screeningcalculatorClass",
        "text": "screeningcalculatorClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculatorClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Screening Test Calculator — screeningcalculatorClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculatorClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Screening Test Calculator — screeningcalculatorClass",
        "text": "",
        "code": "screeningcalculatorClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/screeningcalculatorClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Screening Test Calculator — screeningcalculatorClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtests.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Sequential Testing Analysis — sequentialtests",
        "title": "Sequential Testing Analysis — sequentialtests",
        "text": "Function Sequential Testing Analysis. Analyzes diagnostic accuracy changes applying two tests sequence (screening followed confirmation).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtests.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Sequential Testing Analysis — sequentialtests",
        "text": "",
        "code": "sequentialtests(   test1_name = \"Screening Test\",   test1_sens = 0.95,   test1_spec = 0.7,   test2_name = \"Confirmatory Test\",   test2_sens = 0.8,   test2_spec = 0.98,   strategy = \"serial_positive\",   prevalence = 0.1,   show_explanation = TRUE,   show_formulas = FALSE,   show_nomogram = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtests.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Sequential Testing Analysis — sequentialtests",
        "text": "test1_name . test1_sens . test1_spec . test2_name . test2_sens . test2_spec . strategy . prevalence . show_explanation . show_formulas . show_nomogram .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtests.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Sequential Testing Analysis — sequentialtests",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summary_table$asDF .data.frame(results$summary_table)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtests.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Sequential Testing Analysis — sequentialtests",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtestsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Sequential Testing Analysis — sequentialtestsClass",
        "title": "Sequential Testing Analysis — sequentialtestsClass",
        "text": "Sequential Testing Analysis Sequential Testing Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtestsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Sequential Testing Analysis — sequentialtestsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::sequentialtestsBase -> sequentialtestsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtestsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Sequential Testing Analysis — sequentialtestsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::sequentialtestsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtestsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Sequential Testing Analysis — sequentialtestsClass",
        "text": "sequentialtestsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtestsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Sequential Testing Analysis — sequentialtestsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtestsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Sequential Testing Analysis — sequentialtestsClass",
        "text": "",
        "code": "sequentialtestsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/sequentialtestsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Sequential Testing Analysis — sequentialtestsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearm.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Single Arm Survival — singlearm",
        "title": "Single Arm Survival — singlearm",
        "text": "Performs survival analysis single cohort patients without group comparisons. Use want analyze overall survival characteristics entire study population - example, determine median survival time 1/3/5-year survival rates patients collectively. differs regular survival analysis compares survival groups.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearm.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Single Arm Survival — singlearm",
        "text": "",
        "code": "singlearm(   data,   elapsedtime,   tint = FALSE,   dxdate,   fudate,   outcome,   outcomeLevel,   dod,   dooc,   awd,   awod,   analysistype = \"overall\",   cutp = \"12, 36, 60\",   timetypedata = \"ymd\",   timetypeoutput = \"months\",   uselandmark = FALSE,   landmark = 3,   sc = FALSE,   kmunicate = FALSE,   ce = FALSE,   ch = FALSE,   endplot = 60,   ybegin_plot = 0,   yend_plot = 1,   byplot = 12,   multievent = FALSE,   ci95 = FALSE,   risktable = FALSE,   censored = FALSE,   medianline = \"none\",   person_time = FALSE,   time_intervals = \"12, 36, 60\",   rate_multiplier = 100 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearm.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Single Arm Survival — singlearm",
        "text": "data data data frame. elapsedtime time--event follow-duration patient. numeric continuous, measured consistent units (e.g., months years). Can calculated automatically dates using date options . tint Enable option want calculate survival time dates data. useful separate columns diagnosis date follow-date want calculate time elapsed . dxdate date diagnosis study entry patient. consistent date format (e.g., YYYY-MM-DD). fudate date last follow-event patient. consistent date format (e.g., YYYY-MM-DD). outcome outcome event interest patient. factor numeric variable indicating whether patient experienced event (e.g., death) censoring (e.g., end follow-). outcomeLevel Select level outcome variable represents event interest. example, outcome variable \"death_status\" levels \"Alive\" \"Dead\", select \"Dead\" event level. dod Select level outcome variable represents death due disease. useful competing risk analysis multiple event types. dooc Select level outcome variable represents death due causes. useful competing risk analysis multiple event types. awd Select level outcome variable represents alive disease. useful competing risk analysis multiple event types. awod Select level outcome variable represents alive without disease. useful competing risk analysis multiple event types. analysistype Select type survival analysis perform. \"Overall\" analyzes survival patients regardless event type. \"Cause Specific\" analyzes survival specific event type (e.g., death due disease). \"Competing Risk\" analyzes survival multiple event types simultaneously. cutp Specify time points calculate survival probabilities. Enter comma-separated list time points consistent units (e.g., months years). example, \"12, 36, 60\" calculates survival probabilities 1, 3, 5 years. timetypedata select time type data (e.g., YYYY-MM-DD) timetypeoutput select time type output (default months) uselandmark Enables landmark analysis, addresses immortal time bias analyzing survival patients survive specified timepoint (landmark). Use want eliminate effect early deaths comparing treatments can given patients survive long enough receive . landmark Enables landmark analysis, addresses immortal time bias analyzing survival patients survive specified timepoint (landmark). Use want eliminate effect early deaths comparing treatments can given patients survive long enough receive . sc Enable option generate Kaplan-Meier survival plot confidence intervals. plot shows estimated survival probability time useful visualizing survival trends data. kmunicate Enable option generate publication-ready survival plot style KMunicate. plot shows estimated survival probability time confidence intervals suitable publication presentation. ce Enable option calculate plot cumulative number events time. plot shows total number events (e.g., deaths) occurred time point useful visualizing event rates data. ch Enable option calculate plot cumulative hazard function time. plot shows cumulative risk experiencing event (e.g., death) time point useful visualizing risk event time. endplot maximum time point include survival plots. end time survival curves cumulative event/hazard plots. Enter positive integer representing time consistent units (e.g., months years). ybegin_plot minimum value y-axis survival plots. Enter number 0 1 set lower limit y-axis. yend_plot maximum value y-axis survival plots. Enter number 0 1 set upper limit y-axis. byplot interval plotting survival probabilities. Enter positive integer representing time interval consistent units (e.g., months years). multievent Enable option perform survival analysis datasets multiple event levels. useful competing risk analysis multiple event types (e.g., death due disease, death due causes). ci95 Enable option display 95\\ survival plots. intervals show range uncertainty around estimated survival probabilities useful assessing precision estimates. risktable Enable option display table risk estimates time point. table shows estimated survival probability, cumulative event rate, cumulative hazard time point useful summarizing survival characteristics data. censored Enable option display censored observations survival plots. Censored observations patients experienced event interest end follow-indicated vertical ticks survival curves. medianline true, displays line indicating median survival time survival plot. person_time Enable option calculate display person-time metrics, including total follow-time incidence rates. metrics help quantify rate events per unit time study population. time_intervals Specify time intervals stratified person-time analysis. Enter  comma-separated list time points create intervals. example,  \"12, 36, 60\" create intervals 0-12, 12-36, 36-60, 60+. rate_multiplier Specify multiplier incidence rates (e.g., 100 rates per 100 person-years, 1000 rates per 1000 person-years).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearm.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Single Arm Survival — singlearm",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$medianTable$asDF .data.frame(results$medianTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearm.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Single Arm Survival — singlearm",
        "text": "",
        "code": "# \\donttest{ # Example analyzing overall survival for a patient cohort: # singlearm( #   data = patient_data, #   time = \"months_survival\", #   outcome = \"death_status\", #   outcome_level = \"Dead\" # ) # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearmClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Single Arm Survival — singlearmClass",
        "title": "Single Arm Survival — singlearmClass",
        "text": "function prepares cleans data single-arm survival analysis calculating survival time, filtering based landmark time, merging survival outcomes factors.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearmClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Single Arm Survival — singlearmClass",
        "text": "list containing cleaned data metadata plotting analysis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearmClass.html",
        "id": "note",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Note",
        "title": "Single Arm Survival — singlearmClass",
        "text": "Ensure input data contains required variables (elapsed time, outcome) meets specified formatting criteria.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearmClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Single Arm Survival — singlearmClass",
        "text": "jmvcore::Analysis -> ClinicoPath::singlearmBase -> singlearmClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearmClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Single Arm Survival — singlearmClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::singlearmBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearmClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Single Arm Survival — singlearmClass",
        "text": "singlearmClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearmClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Single Arm Survival — singlearmClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearmClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Single Arm Survival — singlearmClass",
        "text": "",
        "code": "singlearmClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/singlearmClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Single Arm Survival — singlearmClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigration.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Stage Migration Analysis — stagemigration",
        "title": "Stage Migration Analysis — stagemigration",
        "text": "Analyzes staging system changes \"Rogers Phenomenon\" disease staging.  analysis compares staging distributions staging system change, quantifies stage migration, evaluates changes prognostic performance.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigration.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Stage Migration Analysis — stagemigration",
        "text": "",
        "code": "stagemigration(   data,   oldStage,   newStage,   survivalTime,   event,   eventLevel,   plotMigration = TRUE,   survivalPlotType = \"separate\",   showCI = FALSE,   showWillRogers = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigration.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Stage Migration Analysis — stagemigration",
        "text": "data dataset containing staging survival information. oldStage original staging variable. represents staging system used revision change (e.g., TNM 7th edition). newStage new staging variable. represents revised changed staging system (e.g., TNM 8th edition). survivalTime survival follow-time variable. numeric variable representing time consistent units (e.g., months). event event indicator variable. can factor numeric variable indicating whether event interest (e.g., death) occurred. eventLevel level event variable indicates event occurred. required event variable factor. plotMigration Enable display alluvial/Sankey plot visualizing stage migration patterns. plot shows patients move stages old new systems. survivalPlotType Controls survival curves displayed comparing staging systems. \"Separate\" shows full KM plots system, \"Side side\"  focuses direct stage comparisons. showCI Enable display 95\\ curves. showWillRogers Enable perform detailed analysis Rogers phenomenon. compare survival within stages patients migrated .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigration.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Stage Migration Analysis — stagemigration",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$migrationSummary$asDF .data.frame(results$migrationSummary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigration.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Stage Migration Analysis — stagemigration",
        "text": "",
        "code": "# \\donttest{ # Example analyzing migration between TNM staging editions: # stagemigration( #   data = patient_data, #   oldStage = \"tnm7_stage\", #   newStage = \"tnm8_stage\", #   survivalTime = \"follow_up_months\", #   event = \"death_status\", #   eventLevel = \"Dead\" # ) # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigrationClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Stage Migration Analysis — stagemigrationClass",
        "title": "Stage Migration Analysis — stagemigrationClass",
        "text": "function analyzes stage migration different staging systems assesses impact prognostic value survival outcomes. provides tools quantifying Rogers phenomenon evaluating staging system performance.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigrationClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Stage Migration Analysis — stagemigrationClass",
        "text": "results object containing migration tables, survival comparisons, visualization migration patterns.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigrationClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Stage Migration Analysis — stagemigrationClass",
        "text": "jmvcore::Analysis -> ClinicoPath::stagemigrationBase -> stagemigrationClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigrationClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Stage Migration Analysis — stagemigrationClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::stagemigrationBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigrationClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Stage Migration Analysis — stagemigrationClass",
        "text": "stagemigrationClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigrationClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Stage Migration Analysis — stagemigrationClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigrationClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Stage Migration Analysis — stagemigrationClass",
        "text": "",
        "code": "stagemigrationClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/stagemigrationClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Stage Migration Analysis — stagemigrationClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Graphs and Plots — statsplot2",
        "title": "Graphs and Plots — statsplot2",
        "text": "Function Generating Plots Graphs Based Variable Types.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Graphs and Plots — statsplot2",
        "text": "",
        "code": "statsplot2(   data,   dep,   group,   grvar,   direction = \"independent\",   distribution = \"p\",   alluvsty = \"t1\",   excl = FALSE,   originaltheme = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Graphs and Plots — statsplot2",
        "text": "data data data frame. dep . group . grvar . direction select measurement type (repeated independent) distribution select distribution type (parametric nonparametric) alluvsty . excl . originaltheme .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Graphs and Plots — statsplot2",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Graphs and Plots — statsplot2",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2Class.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Plots and Graphs Based on Variable Types — statsplot2Class",
        "title": "Plots and Graphs Based on Variable Types — statsplot2Class",
        "text": "Plots Graphs Based Variable Types Plots Graphs Based Variable Types",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2Class.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Plots and Graphs Based on Variable Types — statsplot2Class",
        "text": "jmvcore::Analysis -> ClinicoPath::statsplot2Base -> statsplot2Class",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2Class.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Plots and Graphs Based on Variable Types — statsplot2Class",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::statsplot2Base$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2Class.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Plots and Graphs Based on Variable Types — statsplot2Class",
        "text": "statsplot2Class$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2Class.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Plots and Graphs Based on Variable Types — statsplot2Class",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2Class.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Plots and Graphs Based on Variable Types — statsplot2Class",
        "text": "",
        "code": "statsplot2Class$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/statsplot2Class.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Plots and Graphs Based on Variable Types — statsplot2Class",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforest.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Subgroup Analysis Forest Plot — subgroupforest",
        "title": "Subgroup Analysis Forest Plot — subgroupforest",
        "text": "Subgroup Analysis Forest Plot",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforest.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Subgroup Analysis Forest Plot — subgroupforest",
        "text": "",
        "code": "subgroupforest(   data,   outcome,   treatment,   subgroups,   time,   event,   outcomeType = \"survival\",   effectMeasure = \"hr\",   confidenceLevel = \"0.95\",   showOverall = TRUE,   showInteraction = TRUE,   sortBy = \"effect\",   showSampleSizes = TRUE,   logScale = TRUE,   nullLine = 1 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforest.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Subgroup Analysis Forest Plot — subgroupforest",
        "text": "data data data frame. outcome Primary outcome variable (time--event, binary, continuous). treatment Treatment exposure variable (binary factor). subgroups Variables defining patient subgroups analysis. time Time variable survival analysis (required outcome survival time). event Event indicator survival analysis (1=event, 0=censored). outcomeType Type outcome variable appropriate statistical analysis. effectMeasure Statistical measure treatment effect. confidenceLevel Confidence level intervals. showOverall Display overall treatment effect across patients. showInteraction Perform statistical tests subgroup interactions. sortBy Method ordering subgroups plot. showSampleSizes Display sample sizes subgroup. logScale Display effects log scale (appropriate ratios). nullLine Value null effect reference line (1 ratios, 0 differences).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforest.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Subgroup Analysis Forest Plot — subgroupforest",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summary$asDF .data.frame(results$summary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforestClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Subgroup Analysis Forest Plot — subgroupforestClass",
        "title": "Subgroup Analysis Forest Plot — subgroupforestClass",
        "text": "Creates forest plots showing treatment effects across different patient subgroups",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforestClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Subgroup Analysis Forest Plot — subgroupforestClass",
        "text": "jmvcore::Analysis -> ClinicoPath::subgroupforestBase -> subgroupforestClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforestClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Subgroup Analysis Forest Plot — subgroupforestClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::subgroupforestBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforestClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Subgroup Analysis Forest Plot — subgroupforestClass",
        "text": "subgroupforestClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforestClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Subgroup Analysis Forest Plot — subgroupforestClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforestClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Subgroup Analysis Forest Plot — subgroupforestClass",
        "text": "",
        "code": "subgroupforestClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/subgroupforestClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Subgroup Analysis Forest Plot — subgroupforestClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydata.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Summary of Continuous Variables — summarydata",
        "title": "Summary of Continuous Variables — summarydata",
        "text": "module generates descriptive statistics continuous variables. provides textual summary visually appealing summary table. Optionally, can enable distribution diagnostics examine normality, skewness, kurtosis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydata.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Summary of Continuous Variables — summarydata",
        "text": "",
        "code": "summarydata(data, vars, date_vars, distr = FALSE, sumvar_style = FALSE, grvar)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydata.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Summary of Continuous Variables — summarydata",
        "text": "data data data frame. vars string naming variables data contains continuous values used report date_vars Variables containing date/time data analyzed date-specific statistics (similar sumvar's dist_date function) distr TRUE, additional distribution diagnostics (Shapiro-Wilk test, skewness, kurtosis) computed explained. sumvar_style TRUE, provides comprehensive summary statistics including quartiles,  confidence intervals, missing value details sumvar package style. grvar Optional grouping variable stratify summary statistics categories.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydata.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Summary of Continuous Variables — summarydata",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydata.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Summary of Continuous Variables — summarydata",
        "text": "",
        "code": "# \\donttest{ # Example: # 1. Load your data frame. # 2. Select one or more continuous variables. # 3. (Optional) Enable Distribution Diagnostics to view additional tests. # 4. Run the summarydata module to see descriptive statistics and distribution characteristics. # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydataClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Summary of Continuous Variables with Distribution Diagnostics — summarydataClass",
        "title": "Summary of Continuous Variables with Distribution Diagnostics — summarydataClass",
        "text": "Summary Continuous Variables Distribution Diagnostics Summary Continuous Variables Distribution Diagnostics",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydataClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Summary of Continuous Variables with Distribution Diagnostics — summarydataClass",
        "text": "Text HTML summary table (optional distribution diagnostics)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydataClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Summary of Continuous Variables with Distribution Diagnostics — summarydataClass",
        "text": "jmvcore::Analysis -> ClinicoPath::summarydataBase -> summarydataClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydataClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Summary of Continuous Variables with Distribution Diagnostics — summarydataClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::summarydataBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydataClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Summary of Continuous Variables with Distribution Diagnostics — summarydataClass",
        "text": "summarydataClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydataClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Summary of Continuous Variables with Distribution Diagnostics — summarydataClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydataClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Summary of Continuous Variables with Distribution Diagnostics — summarydataClass",
        "text": "",
        "code": "summarydataClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/summarydataClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Summary of Continuous Variables with Distribution Diagnostics — summarydataClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survival.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Survival Analysis — survival",
        "title": "Survival Analysis — survival",
        "text": "Function Generating Summaries Survival Analysis.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survival.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Survival Analysis — survival",
        "text": "",
        "code": "survival(   data,   elapsedtime,   tint = FALSE,   dxdate,   fudate,   explanatory,   outcome,   outcomeLevel,   dod,   dooc,   awd,   awod,   analysistype = \"overall\",   cutp = \"12, 36, 60\",   timetypedata = \"ymd\",   timetypeoutput = \"months\",   uselandmark = FALSE,   landmark = 3,   pw = FALSE,   padjustmethod = \"holm\",   ph_cox = FALSE,   sc = FALSE,   kmunicate = FALSE,   ce = FALSE,   ch = FALSE,   endplot = 60,   ybegin_plot = 0,   yend_plot = 1,   byplot = 12,   multievent = FALSE,   ci95 = FALSE,   risktable = FALSE,   censored = FALSE,   pplot = TRUE,   medianline = \"none\",   person_time = FALSE,   time_intervals = \"12, 36, 60\",   rate_multiplier = 100 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survival.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Survival Analysis — survival",
        "text": "data data data frame. elapsedtime time elapsed start study event censoring. tint time date format, select option calculate survival time. time calculated difference event date diagnosis date. follow-date available, time  calculated difference event date follow-date. dxdate date diagnosis. time date format, time calculated difference event date diagnosis date. fudate date follow-. time date format, time calculated difference event date follow-date. explanatory explanatory variable used compare survival times different groups. outcome outcome variable used compare survival times different groups. outcomeLevel level outcome variable used event level. dod . dooc . awd . awod . analysistype . cutp . timetypedata select time type data timetypeoutput select time type output uselandmark . landmark . pw . padjustmethod . ph_cox . sc . kmunicate . ce . ch . endplot . ybegin_plot . yend_plot . byplot . multievent . ci95 . risktable . censored . pplot . medianline true, displays line indicating median survival time survival plot. person_time Enable option calculate display person-time metrics, including total follow-time incidence rates. metrics help quantify rate events per unit time study population. time_intervals Specify time intervals stratified person-time analysis. Enter  comma-separated list time points create intervals. example,  \"12, 36, 60\" create intervals 0-12, 12-36, 36-60, 60+. rate_multiplier Specify multiplier incidence rates (e.g., 100 rates per 100 person-years, 1000 rates per 1000 person-years).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survival.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Survival Analysis — survival",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$medianTable$asDF .data.frame(results$medianTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survival.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Survival Analysis — survival",
        "text": "",
        "code": "# example will be added"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Survival Analysis — survivalClass",
        "title": "Survival Analysis — survivalClass",
        "text": "Survival Analysis Survival Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Survival Analysis — survivalClass",
        "text": "jmvcore::Analysis -> ClinicoPath::survivalBase -> survivalClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Survival Analysis — survivalClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::survivalBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Survival Analysis — survivalClass",
        "text": "survivalClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Survival Analysis — survivalClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Survival Analysis — survivalClass",
        "text": "",
        "code": "survivalClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Survival Analysis — survivalClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcont.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Survival Analysis for Continuous Variable — survivalcont",
        "title": "Survival Analysis for Continuous Variable — survivalcont",
        "text": "Survival Analysis Continuous Variable",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcont.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Survival Analysis for Continuous Variable — survivalcont",
        "text": "",
        "code": "survivalcont(   data,   elapsedtime,   tint = FALSE,   dxdate,   fudate,   contexpl,   outcome,   outcomeLevel,   dod,   dooc,   awd,   awod,   analysistype = \"overall\",   cutp = \"12, 36, 60\",   timetypedata = \"ymd\",   timetypeoutput = \"months\",   uselandmark = FALSE,   landmark = 3,   sc = FALSE,   kmunicate = FALSE,   ce = FALSE,   ch = FALSE,   endplot = 60,   ybegin_plot = 0,   yend_plot = 1,   byplot = 12,   findcut = FALSE,   multievent = FALSE,   ci95 = FALSE,   risktable = FALSE,   censored = FALSE,   medianline = \"none\",   person_time = FALSE,   time_intervals = \"12, 36, 60\",   rate_multiplier = 100 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcont.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Survival Analysis for Continuous Variable — survivalcont",
        "text": "data data data frame. elapsedtime time--event follow-duration patient. numeric continuous, measured consistent units (e.g., months years). Can calculated automatically dates using date options . tint Enable option want calculate survival time dates data. useful separate columns diagnosis date follow-date want calculate time elapsed . dxdate date diagnosis study entry patient. consistent date format (e.g., YYYY-MM-DD). fudate date last follow-event patient. consistent date format (e.g., YYYY-MM-DD). contexpl continuous explanatory variable used analysis. outcome outcome variable used analysis. outcomeLevel level outcome variable represents event interest. dod . dooc . awd . awod Select levels outcome variable correspond different event types data. example, might separate levels \"Dead Disease\" \"Alive w Disease\" survival analysis cancer patients. analysistype Select type survival analysis perform. \"Overall\" survival analysis considers events equivalent, \"Cause Specific\" analysis distinguishes different event types. \"Competing Risk\" analysis accounts competing risks may prevent event interest occurring. cutp Specify cutpoints divide continuous explanatory variable groups survival analysis. Separate multiple cutpoints commas (e.g., \"12, 36, 60\"). timetypedata select time type data timetypeoutput select time type output uselandmark Enable option perform landmark survival analysis specified time point. landmark Specify landmark time evaluate survival probabilities landmark analysis. option available enable \"Use Landmark Time\" option. sc Enable option create Kaplan-Meier survival plot continuous explanatory variable. kmunicate Enable option create KMunicate-style survival plot continuous explanatory variable. ce Enable option create plot cumulative events time continuous explanatory variable. ch Enable option create plot cumulative hazard time continuous explanatory variable. endplot Specify end time survival plots. option determines maximum time point include plots. ybegin_plot Specify starting value y-axis survival plots. option allows customize range y-axis. yend_plot Specify ending value y-axis survival plots. option allows customize range y-axis. byplot Specify time interval survival plots. option determines spacing tick marks x-axis. findcut Enable option automatically find optimal cut-point continuous explanatory variable using maximally selected rank statistic. option available enable \"Survival Plot\" option. optimal cut-point displayed survival plot vertical dashed line. multievent Enable option data includes multiple event levels (e.g., different types events outcomes). option required cause-specific competing risk survival analyses. ci95 Enable option display 95\\ survival estimates plots. risktable Enable option display table risk estimates group survival analysis. censored Enable option display censored observations survival plots. medianline true, displays line indicating median survival time survival plot. person_time Enable option calculate display person-time metrics, including total follow-time incidence rates. metrics help quantify rate events per unit time study population. time_intervals Specify time intervals stratified person-time analysis. Enter  comma-separated list time points create intervals. example,  \"12, 36, 60\" create intervals 0-12, 12-36, 36-60, 60+. rate_multiplier Specify multiplier incidence rates (e.g., 100 rates per 100 person-years, 1000 rates per 1000 person-years).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcont.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Survival Analysis for Continuous Variable — survivalcont",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$coxTable$asDF .data.frame(results$coxTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcontClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Survival Analysis for Continuous Explanatory Variable — survivalcontClass",
        "title": "Survival Analysis for Continuous Explanatory Variable — survivalcontClass",
        "text": "Survival Analysis Continuous Explanatory Variable Survival Analysis Continuous Explanatory Variable",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcontClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Survival Analysis for Continuous Explanatory Variable — survivalcontClass",
        "text": "jmvcore::Analysis -> ClinicoPath::survivalcontBase -> survivalcontClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcontClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Survival Analysis for Continuous Explanatory Variable — survivalcontClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::survivalcontBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcontClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Survival Analysis for Continuous Explanatory Variable — survivalcontClass",
        "text": "survivalcontClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcontClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Survival Analysis for Continuous Explanatory Variable — survivalcontClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcontClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Survival Analysis for Continuous Explanatory Variable — survivalcontClass",
        "text": "",
        "code": "survivalcontClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/survivalcontClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Survival Analysis for Continuous Explanatory Variable — survivalcontClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Swimmer Plot — swimmerplot",
        "title": "Swimmer Plot — swimmerplot",
        "text": "Creates swimmer plot visualize individual patient timelines clinical events.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Swimmer Plot — swimmerplot",
        "text": "",
        "code": "swimmerplot(   data,   patientID,   start,   end,   event,   timetype = \"raw\",   timetypedata = \"ymd\",   timetypeoutput = \"months\",   startType = \"relative\",   sortVariable,   barHeight = 3,   referenceLines = \"none\",   customReferenceTime = 12,   useggswim = FALSE,   markerSize = 5,   milestone1Name = \"Surgery\",   milestone1Date,   milestone2Name = \"Treatment\",   milestone2Date,   milestone3Name = \"Recurrence\",   milestone3Date,   milestone4Name = \"Remission\",   milestone4Date,   milestone5Name = \"Death\",   milestone5Date )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Swimmer Plot — swimmerplot",
        "text": "data data data frame. patientID Variable containing patient identifiers. start Time/date observation/treatment started. end Time/date observation/treatment ended. event Optional variable event types (e.g., CR, PR, PD). timetype Select whether time values raw numbers dates timetypedata Select time format data timetypeoutput Select time unit display startType Choose whether align start times 0 use absolute start times sortVariable Variable sort patient timelines. barHeight Thickness timeline bars referenceLines Add reference time lines plot customReferenceTime Custom time point mark reference line useggswim . markerSize Size event markers plot milestone1Name Name first milestone event (e.g., Surgery) milestone1Date Date/time milestone 1 occurred milestone2Name Name second milestone event (e.g., Treatment) milestone2Date Date/time milestone 2 occurred milestone3Name Name third milestone event (e.g., Recurrence) milestone3Date Date/time milestone 3 occurred milestone4Name Name fourth milestone event (e.g., Remission) milestone4Date Date/time milestone 4 occurred milestone5Name Name fifth milestone event (e.g., Death) milestone5Date Date/time milestone 5 occurred",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Swimmer Plot — swimmerplot",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summary$asDF .data.frame(results$summary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Swimmer Plot — swimmerplot",
        "text": "",
        "code": "# \\donttest{ # Example will show patient timelines data <- data.frame(     PatientID = paste0(\"PT\", 1:10),     StartTime = c(0, 0, 0, 0, 0, 0, 0, 0, 0, 0),     EndTime = c(12, 8, 15, 6, 9, 11, 7, 14, 10, 5),     Event = c(\"CR\", \"PD\", \"PR\", \"SD\", \"CR\", \"PD\", \"PR\", \"SD\", \"CR\", \"PD\"),     Surgery = c(1, 2, 3, 1, 2, 3, 1, 2, 3, 1) ) swimmerplot(     data = data,     patientID = \"PatientID\",     start = \"StartTime\",     end = \"EndTime\",     event = \"Event\",     milestone1Name = \"Surgery\",     milestone1Date = \"Surgery\" ) #> Error in swimmerplot(data = data, patientID = \"PatientID\", start = \"StartTime\",     end = \"EndTime\", event = \"Event\", milestone1Name = \"Surgery\",     milestone1Date = \"Surgery\"): argument \"sortVariable\" is missing, with no default # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Swimmer Plot 2 — swimmerplot2",
        "title": "Swimmer Plot 2 — swimmerplot2",
        "text": "Creates swimmer plot visualize subject response data time.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Swimmer Plot 2 — swimmerplot2",
        "text": "",
        "code": "swimmerplot2(   data,   patientID,   startTime,   endTime,   status,   markerData = FALSE,   markerVar,   markerTime,   showArrows = FALSE,   arrowFilter,   sortSubjects = \"id\",   laneWidth = 2,   markerSize = 5,   useDarkTheme = FALSE,   customTitle = \"Swimmer Plot\",   xLabel = \"Time\",   yLabel = \"Subject ID\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Swimmer Plot 2 — swimmerplot2",
        "text": "data data data frame long format row represents time segment. patientID Variable containing subject/patient identifiers. startTime Start time variable lane segment (also used marker position default). endTime End time variable lane segment. status Response status variable color lanes. markerData Whether include event markers start time segment. markerVar Variable indicating type event displayed markers. markerTime Optional separate time variable marker positions. specified, start time used. showArrows Show arrows end lanes indicate ongoing status. arrowFilter Boolean variable indicating subjects arrows (TRUE = show arrow). sortSubjects sort subjects plot. laneWidth . markerSize . useDarkTheme . customTitle . xLabel . yLabel .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Swimmer Plot 2 — swimmerplot2",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summary$asDF .data.frame(results$summary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Swimmer Plot 2 — swimmerplot2",
        "text": "",
        "code": "# \\donttest{ data <- data.frame(     patient_id = c(\"PT001\", \"PT001\", \"PT002\", \"PT002\"),     start_time = c(0, 3, 0, 4),     end_time = c(3, 7, 4, 8),     event_type = c(\"Treatment Start\", \"Dose Modification\", \"Treatment Start\", \"Follow-up\"),     response_status = c(\"PR\", \"CR\", \"SD\", \"PR\"),     on_study = c(FALSE, TRUE, FALSE, TRUE) ) swimmerplot2(     data = data,     patientID = \"patient_id\",     startTime = \"start_time\",     endTime = \"end_time\",     status = \"response_status\",     markerData = TRUE,     markerVar = \"event_type\" ) #> Error in swimmerplot2(data = data, patientID = \"patient_id\", startTime = \"start_time\",     endTime = \"end_time\", status = \"response_status\", markerData = TRUE,     markerVar = \"event_type\"): argument \"arrowFilter\" is missing, with no default # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2Class.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Swimmer Plot 2 — swimmerplot2Class",
        "title": "Swimmer Plot 2 — swimmerplot2Class",
        "text": "Swimmer Plot 2 Swimmer Plot 2",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2Class.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Swimmer Plot 2 — swimmerplot2Class",
        "text": "jmvcore::Analysis -> ClinicoPath::swimmerplot2Base -> swimmerplot2Class",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2Class.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Swimmer Plot 2 — swimmerplot2Class",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::swimmerplot2Base$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2Class.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Swimmer Plot 2 — swimmerplot2Class",
        "text": "swimmerplot2Class$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2Class.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Swimmer Plot 2 — swimmerplot2Class",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2Class.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Swimmer Plot 2 — swimmerplot2Class",
        "text": "",
        "code": "swimmerplot2Class$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplot2Class.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Swimmer Plot 2 — swimmerplot2Class",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplotClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Swimmer Plot — swimmerplotClass",
        "title": "Swimmer Plot — swimmerplotClass",
        "text": "Creates swimmer plots visualizing patient timelines, treatments, clinical events",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplotClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Swimmer Plot — swimmerplotClass",
        "text": "jmvcore::Analysis -> ClinicoPath::swimmerplotBase -> swimmerplotClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplotClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Swimmer Plot — swimmerplotClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::swimmerplotBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplotClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Swimmer Plot — swimmerplotClass",
        "text": "swimmerplotClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplotClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Swimmer Plot — swimmerplotClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplotClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Swimmer Plot — swimmerplotClass",
        "text": "",
        "code": "swimmerplotClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/swimmerplotClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Swimmer Plot — swimmerplotClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableone.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Table One — tableone",
        "title": "Table One — tableone",
        "text": "function generates \"Table One\", descriptive summary table frequently used  clinicopathological research manuscripts. supports multiple output styles flexible formatting.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableone.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Table One — tableone",
        "text": "",
        "code": "tableone(data, vars, sty = \"t1\", excl = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableone.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Table One — tableone",
        "text": "data input data data frame. vars set variable names data include Table One. Supports numeric, ordinal, categorical variables. sty Specify output style table. option uses different package formatting. excl Boolean option exclude missing values (NA) analysis. Note: Exclusion may remove entire cases.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableone.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Table One — tableone",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableone.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Table One — tableone",
        "text": "",
        "code": "# \\donttest{ # Example usage: # data('histopathology') # dat <- as.data.frame(histopathology) # ClinicoPath::tableone( #   data = dat, #   vars = vars(Sex, PreinvasiveComponent, LVI, PNI, Grade, Age), #   sty = \"t3\", #   excl = TRUE) # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableoneClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Table One — tableoneClass",
        "title": "Table One — tableoneClass",
        "text": "function creates “Table One” – descriptive summary table commonly used clinicopathological research. offers several output styles using different packages (tableone, gtsummary, arsenal, janitor).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableoneClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Table One — tableoneClass",
        "text": "formatted table according chosen style.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableoneClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Table One — tableoneClass",
        "text": "jmvcore::Analysis -> ClinicoPath::tableoneBase -> tableoneClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableoneClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Table One — tableoneClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::tableoneBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableoneClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Table One — tableoneClass",
        "text": "tableoneClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableoneClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Table One — tableoneClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableoneClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Table One — tableoneClass",
        "text": "",
        "code": "tableoneClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tableoneClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Table One — tableoneClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplots.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Tidy Plots — tidyplots",
        "title": "Tidy Plots — tidyplots",
        "text": "Tidy Plots",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplots.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Tidy Plots — tidyplots",
        "text": "",
        "code": "tidyplots(   data,   xvar,   yvar,   color,   plotType = \"points\",   pointType = \"basic\",   showMean = FALSE,   showSEM = FALSE,   showCI = FALSE,   colorScheme = \"friendly\",   plotTitle = \"\",   xLabel = \"\",   yLabel = \"\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplots.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Tidy Plots — tidyplots",
        "text": "data data data frame. xvar . yvar . color . plotType . pointType . showMean . showSEM . showCI . colorScheme . plotTitle . xLabel . yLabel .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplots.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Tidy Plots — tidyplots",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplotsClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Tidy Plots — tidyplotsClass",
        "title": "Tidy Plots — tidyplotsClass",
        "text": "Tidy Plots Tidy Plots",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplotsClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Tidy Plots — tidyplotsClass",
        "text": "jmvcore::Analysis -> ClinicoPath::tidyplotsBase -> tidyplotsClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplotsClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Tidy Plots — tidyplotsClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::tidyplotsBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplotsClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Tidy Plots — tidyplotsClass",
        "text": "tidyplotsClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplotsClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Tidy Plots — tidyplotsClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplotsClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Tidy Plots — tidyplotsClass",
        "text": "",
        "code": "tidyplotsClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tidyplotsClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Tidy Plots — tidyplotsClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeinterval.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Time Interval Calculator — timeinterval",
        "title": "Time Interval Calculator — timeinterval",
        "text": "Time Interval Calculator",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeinterval.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Time Interval Calculator — timeinterval",
        "text": "",
        "code": "timeinterval(   data,   dx_date,   fu_date,   time_format = \"ymd\",   output_unit = \"months\",   use_landmark = FALSE,   landmark_time = 3,   add_times = TRUE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeinterval.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Time Interval Calculator — timeinterval",
        "text": "data data data frame. dx_date Column containing start dates fu_date Column containing end dates time_format . output_unit . use_landmark . landmark_time . add_times .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeinterval.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Time Interval Calculator — timeinterval",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeintervalClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Time Interval Calculator — timeintervalClass",
        "title": "Time Interval Calculator — timeintervalClass",
        "text": "Time Interval Calculator Time Interval Calculator",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeintervalClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Time Interval Calculator — timeintervalClass",
        "text": "jmvcore::Analysis -> ClinicoPath::timeintervalBase -> timeintervalClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeintervalClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Time Interval Calculator — timeintervalClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::timeintervalBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeintervalClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Time Interval Calculator — timeintervalClass",
        "text": "timeintervalClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeintervalClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Time Interval Calculator — timeintervalClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeintervalClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Time Interval Calculator — timeintervalClass",
        "text": "",
        "code": "timeintervalClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeintervalClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Time Interval Calculator — timeintervalClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeroc.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Time-Dependent ROC Analysis — timeroc",
        "title": "Time-Dependent ROC Analysis — timeroc",
        "text": "Time-Dependent ROC Analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeroc.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Time-Dependent ROC Analysis — timeroc",
        "text": "",
        "code": "timeroc(   data,   elapsedtime,   outcome,   outcomeLevel,   marker,   timepoints = \"12, 36, 60\",   method = \"incident\",   bootstrapCI = FALSE,   nboot = 100,   plotROC = TRUE,   plotAUC = TRUE,   timetypeoutput = \"months\",   showOptimalCutoff = TRUE,   showMarkerStats = TRUE,   compareBaseline = FALSE,   smoothAUC = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeroc.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Time-Dependent ROC Analysis — timeroc",
        "text": "data . elapsedtime . outcome . outcomeLevel . marker . timepoints . method . bootstrapCI . nboot . plotROC . plotAUC . timetypeoutput Time units display plots results. showOptimalCutoff Calculate display optimal cutoff points maximize Youden index. showMarkerStats Display descriptive statistics marker variable. compareBaseline Compare marker performance baseline model (AUC = 0.5). smoothAUC Apply smoothing AUC time plot better visualization.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/timeroc.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Time-Dependent ROC Analysis — timeroc",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$aucTable$asDF .data.frame(results$aucTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummary.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Tools for data summary — toolssummary",
        "title": "Tools for data summary — toolssummary",
        "text": "Tools data summary",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummary.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Tools for data summary — toolssummary",
        "text": "",
        "code": "toolssummary(data, vars, excludeNA = FALSE, showFreq = TRUE, showStats = TRUE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummary.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Tools for data summary — toolssummary",
        "text": "data data data frame. vars Variables summarize excludeNA . showFreq . showStats .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummary.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Tools for data summary — toolssummary",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summary$asDF .data.frame(results$summary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummaryClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Tools for data summary — toolssummaryClass",
        "title": "Tools for data summary — toolssummaryClass",
        "text": "Tools data summary Tools data summary",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummaryClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Tools for data summary — toolssummaryClass",
        "text": "Table",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummaryClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Tools for data summary — toolssummaryClass",
        "text": "jmvcore::Analysis -> ClinicoPath::toolssummaryBase -> toolssummaryClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummaryClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Tools for data summary — toolssummaryClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::toolssummaryBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummaryClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Tools for data summary — toolssummaryClass",
        "text": "toolssummaryClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummaryClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Tools for data summary — toolssummaryClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummaryClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Tools for data summary — toolssummaryClass",
        "text": "",
        "code": "toolssummaryClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toolssummaryClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Tools for data summary — toolssummaryClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofile.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Treatment Toxicity Profile — toxicityprofile",
        "title": "Treatment Toxicity Profile — toxicityprofile",
        "text": "Treatment Toxicity Profile",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofile.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Treatment Toxicity Profile — toxicityprofile",
        "text": "",
        "code": "toxicityprofile(   data,   patientID,   adverseEvent,   grade,   treatment,   systemOrganClass,   timeToEvent,   plotType = \"stacked_bar\",   sortBy = \"frequency\",   showHighGradeOnly = FALSE,   minIncidence = 5,   gradeColors = \"ctcae\",   showPercentages = TRUE,   showConfidenceIntervals = FALSE,   groupComparison = FALSE,   cumulativeIncidence = FALSE,   confidenceLevel = \"0.95\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofile.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Treatment Toxicity Profile — toxicityprofile",
        "text": "data data data frame. patientID Variable containing patient identifiers. adverseEvent Variable containing adverse event names categories. grade CTCAE grade severity level (1-5 equivalent scale). treatment Treatment study arm comparison (optional). systemOrganClass System organ class (SOC) grouping adverse events. timeToEvent Time treatment start adverse event occurrence. plotType Primary visualization method toxicity profile. sortBy Method ordering adverse events plot. showHighGradeOnly Display grade 3+ adverse events. minIncidence Minimum incidence percentage events displayed. gradeColors Color scheme toxicity grades. showPercentages Display percentages plot. showConfidenceIntervals Display confidence intervals incidence rates. groupComparison Perform statistical comparison treatment groups. cumulativeIncidence Display cumulative incidence time (requires time variable). confidenceLevel Confidence level intervals tests.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofile.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Treatment Toxicity Profile — toxicityprofile",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summary$asDF .data.frame(results$summary)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofileClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Treatment Toxicity Profile — toxicityprofileClass",
        "title": "Treatment Toxicity Profile — toxicityprofileClass",
        "text": "Creates comprehensive visualizations adverse event profiles",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofileClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Treatment Toxicity Profile — toxicityprofileClass",
        "text": "jmvcore::Analysis -> ClinicoPath::toxicityprofileBase -> toxicityprofileClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofileClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Treatment Toxicity Profile — toxicityprofileClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::toxicityprofileBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofileClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Treatment Toxicity Profile — toxicityprofileClass",
        "text": "toxicityprofileClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofileClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Treatment Toxicity Profile — toxicityprofileClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofileClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Treatment Toxicity Profile — toxicityprofileClass",
        "text": "",
        "code": "toxicityprofileClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/toxicityprofileClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Treatment Toxicity Profile — toxicityprofileClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treatmentResponse.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Tumor Treatment Response Data — treatmentResponse",
        "title": "Tumor Treatment Response Data — treatmentResponse",
        "text": "simulated dataset representing patient responses cancer treatment. includes patient identifiers numeric value indicating treatment response, likely percentage change tumor size similar metric. data object loaded named 'treatmentResponse'.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treatmentResponse.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Tumor Treatment Response Data — treatmentResponse",
        "text": "",
        "code": "data(treatmentResponse)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treatmentResponse.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Tumor Treatment Response Data — treatmentResponse",
        "text": "data frame 250 rows 2 variables: PatientID Character. Unique patient identifier (e.g., \"PT0001\"). ResponseValue Numeric. numeric value representing treatment response. percentage change baseline, negative values typically indicate tumor shrinkage positive values indicate tumor growth.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treatmentResponse.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Tumor Treatment Response Data — treatmentResponse",
        "text": "",
        "code": "data(treatmentResponse) str(treatmentResponse) #> 'data.frame':\t250 obs. of  2 variables: #>  $ PatientID    : chr  \"PT0001\" \"PT0002\" \"PT0003\" \"PT0004\" ... #>  $ ResponseValue: num  63.5 -100 -20.5 55.1 -60.5 ... head(treatmentResponse) #>   PatientID ResponseValue #> 1    PT0001          63.5 #> 2    PT0002        -100.0 #> 3    PT0003         -20.5 #> 4    PT0004          55.1 #> 5    PT0005         -60.5 #> 6    PT0006         -93.6 summary(treatmentResponse$ResponseValue) #>     Min.  1st Qu.   Median     Mean  3rd Qu.     Max.     NA's  #> -100.000  -49.675  -13.300   -6.616   18.900  141.000       12  hist(treatmentResponse$ResponseValue, main=\"Histogram of Treatment Response\")"
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tree.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Medical Decision Tree — tree",
        "text": "",
        "code": "tree(   data,   vars,   facs,   target,   targetLevel,   train,   trainLevel,   imputeMissing = FALSE,   balanceClasses = FALSE,   scaleFeatures = FALSE,   clinicalMetrics = FALSE,   featureImportance = FALSE,   showInterpretation = FALSE,   showPlot = FALSE,   minCases = 10,   maxDepth = 4,   confidenceInterval = FALSE,   riskStratification = FALSE,   exportPredictions = FALSE,   clinicalContext = \"diagnosis\",   costRatio = 1,   prevalenceAdjustment = FALSE,   expectedPrevalence = 10 )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tree.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Medical Decision Tree — tree",
        "text": "data data data frame containing clinical variables, biomarkers,  patient outcomes. vars Continuous variables biomarker levels, age,  laboratory values, quantitative pathological measurements. facs Categorical variables tumor grade, stage,  histological type, patient demographics. target Primary outcome variable: disease status, treatment response, survival status, diagnostic category. targetLevel Level representing disease presence, positive outcome, event interest. train Variable indicating training vs validation cohorts.  provided, data split automatically. trainLevel Level indicating training/discovery cohort. imputeMissing Impute missing values using medically appropriate methods  (median within disease groups continuous, mode categorical). balanceClasses Balance classes handle rare diseases imbalanced outcomes.  Recommended disease prevalence <20\\ scaleFeaturesStandardize continuous variables (useful combining  biomarkers different scales/units). clinicalMetricsDisplay sensitivity, specificity, predictive values, likelihood ratios, clinical metrics. featureImportanceIdentify important clinical variables biomarkers  decision tree. showInterpretationProvide clinical interpretation results including  diagnostic utility clinical recommendations. showPlotDisplay visual representation decision tree. minCasesMinimum number cases required terminal node (higher values prevent overfitting). maxDepthMaximum depth decision tree (deeper trees may overfit). confidenceIntervalDisplay confidence intervals performance metrics. riskStratificationAnalyze risk stratification performance create  risk categories based tree predictions. exportPredictionsAdd predicted classifications probabilities dataset. clinicalContextClinical context affects interpretation thresholds  recommendations (e.g., screening requires high sensitivity). costRatioRelative cost missing case vs false alarm.  Higher values favor sensitivity specificity. prevalenceAdjustmentAdjust predictive values expected disease prevalence  target population (different study sample). expectedPrevalenceExpected disease prevalence target population  adjusted predictive value calculations. results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treeClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Medical Decision Tree — treeClass",
        "title": "Medical Decision Tree — treeClass",
        "text": "Enhanced decision tree analysis medical research, pathology oncology",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treeClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Medical Decision Tree — treeClass",
        "text": "jmvcore::Analysis -> ClinicoPath::treeBase -> treeClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treeClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Medical Decision Tree — treeClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::treeBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treeClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Medical Decision Tree — treeClass",
        "text": "treeClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treeClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Medical Decision Tree — treeClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treeClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Medical Decision Tree — treeClass",
        "text": "",
        "code": "treeClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/treeClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Medical Decision Tree — treeClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tumor_response_examples.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Example Tumor Response Datasets — tumor_response_examples",
        "title": "Example Tumor Response Datasets — tumor_response_examples",
        "text": "Example datasets demonstrating different scenarios tumor response analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tumor_response_examples.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Example Tumor Response Datasets — tumor_response_examples",
        "text": "",
        "code": "tumor_response_examples"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tumor_response_examples.html",
        "id": "format",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Format",
        "title": "Example Tumor Response Datasets — tumor_response_examples",
        "text": "list containing 3 data frames: raw_with_time Raw tumor measurements time points (20 obs. 3 variables) percent_with_time Pre-calculated response percentages time (20 obs. 3 variables) percent_no_time Pre-calculated response percentages without time (10 obs. 2 variables)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tumor_response_examples.html",
        "id": "details",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Details",
        "title": "Example Tumor Response Datasets — tumor_response_examples",
        "text": "dataset represents different scenario: raw_with_time: Longitudinal raw measurements percent_with_time: Longitudinal percentage changes percent_no_time: Single timepoint percentage changes",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/tumor_response_examples.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Example Tumor Response Datasets — tumor_response_examples",
        "text": "",
        "code": "data(tumor_response_examples) head(tumor_response_examples$raw_with_time) #>   PatientID Time Measurement #> 1       PT1    0          50 #> 2       PT1    2          30 #> 3       PT1    4          20 #> 4       PT1    6          10 #> 5       PT2    0          40 #> 6       PT2    2          30 head(tumor_response_examples$percent_no_time) #>   PatientID Response #> 1       PT1      -80 #> 2       PT2      -30 #> 3       PT3       15 #> 4       PT4       35 #> 5       PT5     -100 #> 6       PT6      -45"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/validateROCInputs.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Validate inputs for ROC analysis — validateROCInputs",
        "title": "Validate inputs for ROC analysis — validateROCInputs",
        "text": "Validate inputs ROC analysis",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/validateROCInputs.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Validate inputs for ROC analysis — validateROCInputs",
        "text": "",
        "code": "validateROCInputs(x, class_var, pos_class = NULL)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/validateROCInputs.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Validate inputs for ROC analysis — validateROCInputs",
        "text": "x Test values class_var Classification labels pos_class Positive class label",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/validateROCInputs.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Validate inputs for ROC analysis — validateROCInputs",
        "text": "List validation results cleaned data",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartree.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Variable Tree — vartree",
        "title": "Variable Tree — vartree",
        "text": "Function Generating Tree Summaries Variables.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartree.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Variable Tree — vartree",
        "text": "",
        "code": "vartree(   data,   vars,   percvar,   percvarLevel,   summaryvar,   prunebelow,   pruneLevel1,   pruneLevel2,   follow,   followLevel1,   followLevel2,   excl = FALSE,   vp = TRUE,   horizontal = FALSE,   sline = TRUE,   varnames = FALSE,   nodelabel = TRUE,   pct = FALSE,   showcount = TRUE,   legend = FALSE,   pattern = FALSE,   sequence = FALSE,   ptable = FALSE,   mytitle = \"\",   useprunesmaller = FALSE,   prunesmaller = 5,   summarylocation = \"leafonly\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartree.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Variable Tree — vartree",
        "text": "data data data frame. vars . percvar . percvarLevel . summaryvar . prunebelow . pruneLevel1 . pruneLevel2 . follow . followLevel1 . followLevel2 . excl . vp . horizontal . sline . varnames . nodelabel . pct . showcount . legend . pattern . sequence . ptable . mytitle . useprunesmaller . prunesmaller . summarylocation .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartree.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Variable Tree — vartree",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartree.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Variable Tree — vartree",
        "text": "",
        "code": "# \\donttest{ # example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartreeClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Variable Tree — vartreeClass",
        "title": "Variable Tree — vartreeClass",
        "text": "Variable Tree Variable Tree",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartreeClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Variable Tree — vartreeClass",
        "text": "jmvcore::Analysis -> ClinicoPath::vartreeBase -> vartreeClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartreeClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Variable Tree — vartreeClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::vartreeBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartreeClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Variable Tree — vartreeClass",
        "text": "vartreeClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartreeClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Variable Tree — vartreeClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartreeClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Variable Tree — vartreeClass",
        "text": "",
        "code": "vartreeClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vartreeClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Variable Tree — vartreeClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/venn.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Venn Diagram — venn",
        "title": "Venn Diagram — venn",
        "text": "Venn Diagram",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/venn.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Venn Diagram — venn",
        "text": "",
        "code": "venn(data, var1, var1true, var2, var2true, var3, var3true, var4, var4true)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/venn.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Venn Diagram — venn",
        "text": "data dataset data frame containing variables analysis. var1 string naming primary variable data diagram. var1true level var1 represents positive condition. var2 string naming secondary variable data used diagram. var2true level var2 represents positive condition. var3 optional variable data include diagram. var3true level var3 represents positive condition. var4 optional variable data additional overlap analysis. var4true level var4 represents positive condition.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/venn.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Venn Diagram — venn",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vennClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Venn Diagram — vennClass",
        "title": "Venn Diagram — vennClass",
        "text": "Generates Venn Diagram Upset diagram selected categorical variables. function converts specified variables logical values based chosen \"true\" level. Two visual outputs produced: Venn diagram (via ggvenn) Upset plot (via UpSetR). Additionally, summary table \"true\" counts variable provided.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vennClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Venn Diagram — vennClass",
        "text": "function produces Venn diagram Upset diagram.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vennClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Venn Diagram — vennClass",
        "text": "jmvcore::Analysis -> ClinicoPath::vennBase -> vennClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vennClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Venn Diagram — vennClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::vennBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vennClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Venn Diagram — vennClass",
        "text": "vennClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vennClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Venn Diagram — vennClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vennClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Venn Diagram — vennClass",
        "text": "",
        "code": "vennClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vennClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Venn Diagram — vennClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vennClass.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Venn Diagram — vennClass",
        "text": "",
        "code": "# Load the data data(\"iris\")"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Variable Tree V3 — vtree3",
        "title": "Variable Tree V3 — vtree3",
        "text": "Function Generating Enhanced Tree Summaries Variables",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Variable Tree V3 — vtree3",
        "text": "",
        "code": "vtree3(   data,   vars,   percvar,   percvarLevel,   summaryvar,   prunebelow,   pruneLevel1,   pruneLevel2,   follow,   followLevel1,   followLevel2,   excl = FALSE,   vp = TRUE,   horizontal = FALSE,   sline = TRUE,   varnames = FALSE,   nodelabel = TRUE,   pct = FALSE,   showcount = TRUE,   legend = FALSE,   pattern = FALSE,   sequence = FALSE,   ptable = FALSE,   mytitle = \"\",   useprunesmaller = FALSE,   prunesmaller = 5,   summarylocation = \"leafonly\",   style = \"default\",   showInterpretation = TRUE,   survival = FALSE,   labs = FALSE,   response = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Variable Tree V3 — vtree3",
        "text": "data data data frame. vars . percvar . percvarLevel . summaryvar . prunebelow . pruneLevel1 . pruneLevel2 . follow . followLevel1 . followLevel2 . excl . vp . horizontal . sline . varnames . nodelabel . pct . showcount . legend . pattern . sequence . ptable . mytitle . useprunesmaller . prunesmaller . summarylocation . style . showInterpretation . survival . labs . response .",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Variable Tree V3 — vtree3",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Variable Tree V3 — vtree3",
        "text": "",
        "code": "# \\donttest{ # Example will be added # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3Class.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Variable Tree V3 — vtree3Class",
        "title": "Variable Tree V3 — vtree3Class",
        "text": "Variable Tree V3 Variable Tree V3",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3Class.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Variable Tree V3 — vtree3Class",
        "text": "jmvcore::Analysis -> ClinicoPath::vtree3Base -> vtree3Class",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3Class.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Variable Tree V3 — vtree3Class",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::vtree3Base$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3Class.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Variable Tree V3 — vtree3Class",
        "text": "vtree3Class$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3Class.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Variable Tree V3 — vtree3Class",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3Class.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Variable Tree V3 — vtree3Class",
        "text": "",
        "code": "vtree3Class$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/vtree3Class.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Variable Tree V3 — vtree3Class",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffle.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Waffle Charts — waffle",
        "title": "Waffle Charts — waffle",
        "text": "'Creates waffle charts visualize distributions proportions'",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffle.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Waffle Charts — waffle",
        "text": "",
        "code": "waffle(   data,   counts,   groups,   facet,   rows = 5,   flip = FALSE,   color_palette = \"default\",   show_legend = TRUE,   mytitle = \"\",   legendtitle = \"\" )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffle.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Waffle Charts — waffle",
        "text": "data data data frame. counts Optional numeric values represented waffle chart. provided, use number cases. groups grouping variable waffle squares facet Optional variable create faceted waffle charts rows Number rows waffle chart flip Whether flip orientation waffle chart color_palette Color scheme waffle squares show_legend Whether display legend mytitle Custom title plot legendtitle Custom title legend",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffle.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Waffle Charts — waffle",
        "text": "results object containing:",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffleClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Waffle Charts — waffleClass",
        "title": "Waffle Charts — waffleClass",
        "text": "Create Waffle Charts visualize distributions.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffleClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Waffle Charts — waffleClass",
        "text": "function produces waffle chart.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffleClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Waffle Charts — waffleClass",
        "text": "jmvcore::Analysis -> ClinicoPath::waffleBase -> waffleClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffleClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Waffle Charts — waffleClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::waffleBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffleClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Waffle Charts — waffleClass",
        "text": "waffleClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffleClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Waffle Charts — waffleClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffleClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Waffle Charts — waffleClass",
        "text": "",
        "code": "waffleClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waffleClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Waffle Charts — waffleClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfall.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Treatment Response Analysis — waterfall",
        "title": "Treatment Response Analysis — waterfall",
        "text": "Creates waterfall plot analyzes tumor response data following RECIST criteria.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfall.html",
        "id": "ref-usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Treatment Response Analysis — waterfall",
        "text": "",
        "code": "waterfall(   data,   patientID,   responseVar,   timeVar,   inputType = \"percentage\",   sortBy = \"response\",   showThresholds = FALSE,   labelOutliers = FALSE,   showMedian = FALSE,   showCI = FALSE,   minResponseForLabel = 50,   colorScheme = \"jamovi\",   barAlpha = 1,   barWidth = 0.7,   showWaterfallPlot = FALSE,   showSpiderPlot = FALSE )"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfall.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Treatment Response Analysis — waterfall",
        "text": "data data data frame. patientID Variable containing patient identifiers. responseVar Percentage change tumor size. timeVar Time point measurement spider plot (e.g., months baseline) inputType Specify data format: 'raw' actual measurements (calculate percent change) 'percentage' pre-calculated percentage changes sortBy Sort waterfall plot best response patient ID. showThresholds Show +20 percent -30 percent RECIST thresholds. labelOutliers Label responses exceeding specified threshold. showMedian Show median response horizontal line. showCI Show confidence interval around median response. minResponseForLabel Minimum response value labels displayed. colorScheme Color scheme waterfall plot. barAlpha Transparency bars waterfall plot. barWidth Width bars waterfall plot. showWaterfallPlot Display waterfall plot showing best response patient. showSpiderPlot Display spider plot showing response trajectories time (requires time variable).",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfall.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Treatment Response Analysis — waterfall",
        "text": "results object containing: Tables can converted data frames asDF .data.frame. example: results$summaryTable$asDF .data.frame(results$summaryTable)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfall.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Treatment Response Analysis — waterfall",
        "text": "",
        "code": "# \\donttest{ data <- data.frame(     PatientID = paste0(\"PT\", 1:10),     Response = c(-100, -45, -30, -20, -10, 0, 10, 20, 30, 40),     Time = c(0, 2, 4, 6, 8, 10, 12, 14, 16, 18) ) waterfall(     data = data,     patientID = \"PatientID\",     responseVar = \"Response\",     timeVar = \"Time\" ) #>  #>  TREATMENT RESPONSE ANALYSIS #>  #>  Response Categories Based on RECIST v1.1 Criteria  #>  ─────────────────────────────────────────────────  #>    Category    Number of Patients    Percentage    #>  ─────────────────────────────────────────────────  #>  ─────────────────────────────────────────────────  #>  #>  #>  Person-Time Analysis                                                                                                    #>  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>    Response Category    Patients    % Patients    Person-Time    % Time    Median Time to Response    Median Duration    #>  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>  #>  #>  Clinical Response Metrics  #>  ─────────────────────────  #>    Metric    Value    #>  ─────────────────────────  #>  ─────────────────────────  #>  # }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfallClass.html",
        "id": null,
        "dir": "Reference",
        "previous_headings": "",
        "what": "Treatment Response Analysis — waterfallClass",
        "title": "Treatment Response Analysis — waterfallClass",
        "text": "Creates waterfall spider plots visualize tumor response data following RECIST criteria",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfallClass.html",
        "id": "value",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Value",
        "title": "Treatment Response Analysis — waterfallClass",
        "text": "list containing plot object summary statistics",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfallClass.html",
        "id": "super-classes",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Super classes",
        "title": "Treatment Response Analysis — waterfallClass",
        "text": "jmvcore::Analysis -> ClinicoPath::waterfallBase -> waterfallClass",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfallClass.html",
        "id": "methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Methods",
        "title": "Treatment Response Analysis — waterfallClass",
        "text": "jmvcore::Analysis$.createImage() jmvcore::Analysis$.createImages() jmvcore::Analysis$.createPlotObject() jmvcore::Analysis$.load() jmvcore::Analysis$.render() jmvcore::Analysis$.save() jmvcore::Analysis$.savePart() jmvcore::Analysis$.setCheckpoint() jmvcore::Analysis$.setParent() jmvcore::Analysis$.setReadDatasetHeaderSource() jmvcore::Analysis$.setReadDatasetSource() jmvcore::Analysis$.setResourcesPathSource() jmvcore::Analysis$.setStatePathSource() jmvcore::Analysis$addAddon() jmvcore::Analysis$asProtoBuf() jmvcore::Analysis$asSource() jmvcore::Analysis$check() jmvcore::Analysis$init() jmvcore::Analysis$optionsChangedHandler() jmvcore::Analysis$postInit() jmvcore::Analysis$print() jmvcore::Analysis$readDataset() jmvcore::Analysis$run() jmvcore::Analysis$serialize() jmvcore::Analysis$setError() jmvcore::Analysis$setStatus() jmvcore::Analysis$translate() ClinicoPath::waterfallBase$initialize()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfallClass.html",
        "id": "public-methods",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Public methods",
        "title": "Treatment Response Analysis — waterfallClass",
        "text": "waterfallClass$clone()",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfallClass.html",
        "id": "method-clone-",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Method clone()",
        "title": "Treatment Response Analysis — waterfallClass",
        "text": "objects class cloneable method.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfallClass.html",
        "id": "usage",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Usage",
        "title": "Treatment Response Analysis — waterfallClass",
        "text": "",
        "code": "waterfallClass$clone(deep = FALSE)"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfallClass.html",
        "id": "arguments",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Arguments",
        "title": "Treatment Response Analysis — waterfallClass",
        "text": "deep Whether make deep clone.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/reference/waterfallClass.html",
        "id": "ref-examples",
        "dir": "Reference",
        "previous_headings": "",
        "what": "Examples",
        "title": "Treatment Response Analysis — waterfallClass",
        "text": "",
        "code": "data <- data.frame(   PatientID = paste0(\"PT\", 1:10),   Response = c(-100, -45, -30, -20, -10, 0, 10, 20, 30, 40),   Time = c(1,2,3,4,5,6,7,8,9,10) ) waterfall(data, \"PatientID\", \"Response\", \"Time\") #>  #>  TREATMENT RESPONSE ANALYSIS #>  #>  Response Categories Based on RECIST v1.1 Criteria  #>  ─────────────────────────────────────────────────  #>    Category    Number of Patients    Percentage    #>  ─────────────────────────────────────────────────  #>  ─────────────────────────────────────────────────  #>  #>  #>  Person-Time Analysis                                                                                                    #>  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>    Response Category    Patients    % Patients    Person-Time    % Time    Median Time to Response    Median Duration    #>  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>  ──────────────────────────────────────────────────────────────────────────────────────────────────────────────────────  #>  #>  #>  Clinical Response Metrics  #>  ─────────────────────────  #>    Metric    Value    #>  ─────────────────────────  #>  ─────────────────────────  #>"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020072",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0072",
        "title": "ClinicoPath 0.0.2.0072",
        "text": "calculated cut-groups continuous survival can added data",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020069",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0069",
        "title": "ClinicoPath 0.0.2.0069",
        "text": "optional padjustement pairwise survival fixes: https://github.com/sbalci/ClinicoPathJamoviModule/issues/38 saving calculated variables Data",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020064",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0064",
        "title": "ClinicoPath 0.0.2.0064",
        "text": "added ggvenn function fixed https://github.com/yanlinlin82/ggvenn/issues/16 deleted functions, add updated",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020048",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0048",
        "title": "ClinicoPath 0.0.2.0048",
        "text": "started adding arguments ggstatsplot fixed: https://github.com/sbalci/jjstatsplot/issues/3",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020046",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0046",
        "title": "ClinicoPath 0.0.2.0046",
        "text": "use x y instead main condition arguments ggpiestats ggbarstats partially fixed: https://github.com/sbalci/jjstatsplot/issues/1 add point.path argument grouped_ggwithinstats partially fixed: https://github.com/sbalci/jjstatsplot/issues/2 waiting update jamovi mran version. current ggstatsplot dependencies date jamovi’s library",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020044",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0044",
        "title": "ClinicoPath 0.0.2.0044",
        "text": "fixed multivariate survival work without continuous explanatory",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020043",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0043",
        "title": "ClinicoPath 0.0.2.0043",
        "text": "added jsurvival linux added functions descriptives linux",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020041",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0041",
        "title": "ClinicoPath 0.0.2.0041",
        "text": "updated jsurvival added controls collapse boxes advanced outcome: users can select one outcome level depending analysis (event free overall survival). Competing risk survival also added future. advanced survival: users can use dates calculate survival time. date type defined. many variations date types given. Cumulative events, cumulative survival KMunicate style Kaplan-Meier curves added. separate function continuous explanatory variable added. optimal cut-based survival outcome defined cut-definition univariate survival analysis performed. multivariate analysis users can now generate Kaplan-Meier curves upto two explanatory variables. adjusted survival curve also added, though requires management.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020040",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0040",
        "title": "ClinicoPath 0.0.2.0040",
        "text": "separating univariate continuous survival categorical",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020039",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0039",
        "title": "ClinicoPath 0.0.2.0039",
        "text": "added options vartree fixes: https://github.com/sbalci/ClinicoPathJamoviModule/issues/28",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020038",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0038",
        "title": "ClinicoPath 0.0.2.0038",
        "text": "fixes https://github.com/sbalci/ClinicoPathJamoviModule/issues/20",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020037",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0037",
        "title": "ClinicoPath 0.0.2.0037",
        "text": "added Survival Analysis Continuous Explanatory added vtree package functions vartree function fixes https://github.com/sbalci/ClinicoPathJamoviModule/issues/9",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020036",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0036",
        "title": "ClinicoPath 0.0.2.0036",
        "text": "added Benford Analysis added interactive size jjbarstats",
        "code": ".init = function() {             deplen <- length(self$options$dep)             self$results$plot$setSize(400, deplen*300)         }"
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020035",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0035",
        "title": "ClinicoPath 0.0.2.0035",
        "text": "meddecide added jamovi library https://github.com/sbalci/meddecide/ https://github.com/sbalci/meddecide/releases/ https://library.jamovi.org/win64/R3.6.3/meddecide-0.0.1.0005.jmo https://library.jamovi.org/linux/R3.6.3/meddecide-0.0.1.0005.jmo https://library.jamovi.org/macos/R3.6.3/meddecide-0.0.1.0005.jmo",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020034",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0034",
        "title": "ClinicoPath 0.0.2.0034",
        "text": "added metrics survival functions updating survival options (continuous explanatory, cut-, two categorical explanatory, multiple outcome options, elapsed time calculation dates) added KMunicate type survival curve added Fagan’s nomogram",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020027",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0027",
        "title": "ClinicoPath 0.0.2.0027",
        "text": "temporarily added many functions various packages update functions arguments",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020026",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0026",
        "title": "ClinicoPath 0.0.2.0026",
        "text": "jsurvival added jamovi library https://github.com/sbalci/jsurvival https://github.com/sbalci/jsurvival/releases/ https://library.jamovi.org/macos/R3.6.3/jsurvival-0.0.2.0026.jmo https://library.jamovi.org/win64/R3.6.3/jsurvival-0.0.2.0026.jmo",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020025",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0025",
        "title": "ClinicoPath 0.0.2.0025",
        "text": "ClinicoPath combined module taken jamovi library. Users adviced install submodules. ClinicoPathDescriptives, jsurvival, meddecide tables updated look jamovian :)",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020024",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0024",
        "title": "ClinicoPath 0.0.2.0024",
        "text": "ClinicoPathDescriptives functions separately added jamovi library Exploration menu ClinicoPathDescriptives module can downloaded inside jamovi (click Modules jamovi library) https://library.jamovi.org/win64/R3.6.3/ClinicoPathDescriptives-0.0.2.0019.jmo https://library.jamovi.org/linux/R3.6.3/ClinicoPathDescriptives-0.0.2.0019.jmo https://library.jamovi.org/macos/R3.6.3/ClinicoPathDescriptives-0.0.2.0019.jmo",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020023",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0023",
        "title": "ClinicoPath 0.0.2.0023",
        "text": "added Age Pyramid survival status can selected levels WIP decisioncalculator",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020022",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0022",
        "title": "ClinicoPath 0.0.2.0022",
        "text": "GGStatsPlot functions separately added jamovi library jjstatsplot menu JJStastPlot module can downloaded inside jamovi (click Modules jamovi library) https://library.jamovi.org/macos/R3.6.3/jjstatsplot-0.0.1.0001.jmo https://library.jamovi.org/win64/R3.6.3/jjstatsplot-0.0.1.0001.jmo https://library.jamovi.org/linux/R3.6.3/jjstatsplot-0.0.1.0001.jmo",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020021",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0021",
        "title": "ClinicoPath 0.0.2.0021",
        "text": "updating jjstatsplot release",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020020",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0020",
        "title": "ClinicoPath 0.0.2.0020",
        "text": "made submodules: ClinicoPathDescriptives https://github.com/sbalci/ClinicoPathDescriptives/ https://github.com/sbalci/ClinicoPathDescriptives/releases/ JJStatsPlot: https://github.com/sbalci/jjstatsplot https://github.com/sbalci/jjstatsplot/releases/ jsurvival: https://github.com/sbalci/jsurvival https://github.com/sbalci/jsurvival/releases/ meddecide https://github.com/sbalci/meddecide/ https://github.com/sbalci/meddecide/releases/",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020019",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0019",
        "title": "ClinicoPath 0.0.2.0019",
        "text": "rewrote summary categorical values decrease dependencies",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020018",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0018",
        "title": "ClinicoPath 0.0.2.0018",
        "text": "added cumulative events cumulative hazard plots survival https://rpkgs.datanovia.com/survminer/survminer_cheatsheet.pdf added cox adjusted survival multivariate survival",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020017",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0017",
        "title": "ClinicoPath 0.0.2.0017",
        "text": "added alluvial diagrams using easyalluvial package Descriptives (Explore menu)https://github.com/sbalci/ClinicoPathJamoviModule/issues/19https://github.com/erblast/easyalluvial/issues/19 added easyalluvial option Graphs Plots (JJStatsPlot menu) repeated categorical measurements.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020016",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0016",
        "title": "ClinicoPath 0.0.2.0016",
        "text": "See: https://github.com/sbalci/jjstatsplot/releases/ See: https://github.com/sbalci/ClinicoPath/releases/ crosstable function partially resolves https://github.com/jamovi/jamovi/issues/443 survival function resolves https://github.com/jonathon-love/deathwatch/issues/2 added export html crosstables bypass https://github.com/jamovi/jamovi/issues/892",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020015",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0015",
        "title": "ClinicoPath 0.0.2.0015",
        "text": "Added tangram statistical results Added options finalfit crosstables fixes: https://github.com/sbalci/ClinicoPathJamoviModule/issues/24 Partially fixes: https://github.com/jamovi/jamovi/issues/901 fixes: https://github.com/ewenharrison/finalfit/issues/52 Added experimental biblometrics functions includes experimental changes",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020014",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0014",
        "title": "ClinicoPath 0.0.2.0014",
        "text": "Added footnote arsenal crosstable",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020012",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0012",
        "title": "ClinicoPath 0.0.2.0012",
        "text": "jjstatsplot wrapper functions using ggstatsplot jamovi. thought might nice separate module . prepared ask opinions. Use attached .jmofiles install via side load jamovi. Requires latest jamovi >=1.2.22 https://www.jamovi.org/download.html tangram error fixed, reveal statistical test results. arsenal’s footnote visible Html output",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020004",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0004",
        "title": "ClinicoPath 0.0.2.0004",
        "text": "Using spgarbet/tangram@0.3.2 bug fixed.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0020003",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2.0003",
        "title": "ClinicoPath 0.0.2.0003",
        "text": "Added arsenal, finalfit, gtsummary crosstable function. gtsummary gives different results, due nonparametric tests. add options documentation. tangram still functioning.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-002",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.2",
        "title": "ClinicoPath 0.0.2",
        "text": "version 0.0.2 released works jamovi latest release (>=1.2.18) https://www.jamovi.org/download.html  new version #ClinicoPath [@jamovistats] module jamovi library. Requires #jamovi 1.2.18 #rstats #biostatistics #pathology #pathologists https://twitter.com/serdarbalci/status/1261256107919642629 #ClinicoPath #jamovi module comes example datasets #jamovi modules. Use example prepare data. https://twitter.com/serdarbalci/status/1261639212664840192 can easily make ‘Table One’ reports/manuscripts via #ClinicoPath [@jamovistats] module. Uses #tableone, #arsenal, #gtsummary, #janitor packages. #rstats #biostatistics #pathology #pathologists https://twitter.com/serdarbalci/status/1262083972328230912 #jamovi nice tables. Sometimes prefer read tables automatically via #ClinicoPath [@jamovistats] module. Using #easystats #report package. #naturallanguage #data #summary #rstats #biostatistics #pathology #pathologists https://twitter.com/serdarbalci/status/1262354990787694599 #ClinicoPath [@jamovistats] module easy make crosstables. uses #tangram package #rstats #biostatistics #pathology #pathologists https://twitter.com/serdarbalci/status/1262691784574017536 can make different plots based variable type via #jamovi #ClinicoPath module. Using #rstats [@jamovistats] #ggstatsplot #ggalluvial #easyalluvial packages #pathology #pathologists #datavisualisation https://www.youtube.com/watch?v=m3uInetiC8w https://twitter.com/serdarbalci/status/1263191858454413312 examples survival analysis via [@jamovistats] #ClinicoPath module. Using #rstats #finalfit [@ewenharrison] #survival #survminer #ggstatsplot #jamovi #biostatistics #pathology #pathologists https://www.youtube.com/watch?v=gIPf4xIKAOU https://www.linkedin.com/pulse/survival-analysis-via-jamovi-clinicopath-module-serdar-balc%25C4%25B1 #datavisualisation #datascience #patoloji #analysis #datascientist #data #clinicaltrials #clinicalstudies #clinicaltrial #clinicalresearch https://twitter.com/serdarbalci/status/1264153665386004480 generating natural language summaries make easy read tables: “Median Survival: LVI Absent, median survival 26 [20.1 - 32.3,”95% CI] months. LVI Present, median survival 9.3 [8.8 - 10.6, 95% CI] months.” https://twitter.com/serdarbalci/status/1264153686508478465 “Hazard: LVI Present, 2.55 (1.85-3.51, p<0.001) times risk LVI Absent.” https://twitter.com/serdarbalci/status/1264153695715053568 “1, 3, 5-yr Survival: LVI Absent, 12 month survival 70.9% [63.36%-79.3%, 95% CI]. LVI Absent, 24 month survival 54.2% [45.85%-64.1%, LVI Present, 12 month survival 28.4% [20.03%-40.3%, 95% CI]. LVI Present, 24 month survival 14.4% …” https://twitter.com/serdarbalci/status/1264153698764312577 “pairwise comparison Grade: comparison Grade 2 Grade 1 p-value 0.87.” Note : wording better. https://twitter.com/serdarbalci/status/1264153700114862080 can multivariate survival analysis https://twitter.com/serdarbalci/status/1264153711087140864 also make Odds Ratio Tables Plots. change order variables jamovi data, analysis also changes. https://twitter.com/serdarbalci/status/1264153752015122432 https://github.com/sbalci/ClinicoPathJamoviModule",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0010001",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.1.0001",
        "title": "ClinicoPath 0.0.1.0001",
        "text": "Added multivariate survival, comparison plots.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-v001",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath v0.0.1",
        "title": "ClinicoPath v0.0.1",
        "text": "jamovi module contains main analysis used clinicopathological research. ClinicoPath help researchers generate natural language summaries dataset, generate cross tables statistical tests, survival analysis survival tables, survival curves, natural language summaries. may install using side load: windows: https://library.jamovi.org/win64/R3.6.1/ClinicoPath-0.0.1.jmo macOS: https://library.jamovi.org/macos/R3.6.1/ClinicoPath-0.0.1.jmo https://github.com/sbalci/ClinicoPathJamoviModule https://github.com/sbalci/ClinicoPathJamoviModule/releases/tag/v0.0.1",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-0011001",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.1.1001",
        "title": "ClinicoPath 0.0.1.1001",
        "text": "removed ‘frequencies’ Documentations added. CI added. Badges, README updated.",
        "code": ""
    },
    {
        "path": []
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "functions-work-as-defaults-0-0-1-1000",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "Functions work as defaults",
        "title": "ClinicoPath 0.0.1.1000",
        "text": "Divided module 2 windows: ClinicoPath1 ClinicoPath2 Removed unnecessary outputs. Added ToDo section warning still development Updated Readme file Currently functions working. defaults.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "for-descriptive-analysis-0-0-1-1000",
        "dir": "Changelog",
        "previous_headings": "Functions work as defaults",
        "what": "For descriptive analysis:",
        "title": "ClinicoPath 0.0.1.1000",
        "text": "TableOne WriteSummary Report General Features Frequencies",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "for-comparing-variables-0-0-1-1000",
        "dir": "Changelog",
        "previous_headings": "Functions work as defaults",
        "what": "For comparing variables:",
        "title": "ClinicoPath 0.0.1.1000",
        "text": "CrossTable GGStatsPlot2",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "for-survival-analysis-0-0-1-1000",
        "dir": "Changelog",
        "previous_headings": "Functions work as defaults",
        "what": "For survival analysis",
        "title": "ClinicoPath 0.0.1.1000",
        "text": "FinalFit FinalFit Multivariate Survival",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "for-medical-decision-tests-0-0-1-1000",
        "dir": "Changelog",
        "previous_headings": "Functions work as defaults",
        "what": "For medical decision tests:",
        "title": "ClinicoPath 0.0.1.1000",
        "text": "Medical Decision Decision Calculator",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "for-correlation-analysis-0-0-1-1000",
        "dir": "Changelog",
        "previous_headings": "Functions work as defaults",
        "what": "For correlation analysis:",
        "title": "ClinicoPath 0.0.1.1000",
        "text": "Correlation",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "for-inter-and-intra-observer-agreement-0-0-1-1000",
        "dir": "Changelog",
        "previous_headings": "Functions work as defaults",
        "what": "For inter and intra observer agreement",
        "title": "ClinicoPath 0.0.1.1000",
        "text": "Interrater Intrarater Reliability",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "decision-tree-and-cluster-analysis-sections-0-0-1-1000",
        "dir": "Changelog",
        "previous_headings": "Functions work as defaults",
        "what": "Decision tree and cluster analysis sections.",
        "title": "ClinicoPath 0.0.1.1000",
        "text": "active yet.",
        "code": ""
    },
    {
        "path": "https://www.serdarbalci.com/ClinicoPathJamoviModule/news/index.html",
        "id": "clinicopath-001-beta",
        "dir": "Changelog",
        "previous_headings": "",
        "what": "ClinicoPath 0.0.1-beta",
        "title": "ClinicoPath 0.0.1-beta",
        "text": "First Pre-release https://github.com/sbalci/ClinicoPathJamoviModule/releases/tag/0.0.1-beta",
        "code": ""
    }
]