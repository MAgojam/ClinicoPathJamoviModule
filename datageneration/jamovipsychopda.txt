Directory structure:
└── clinicopath-jamovipsychopda/
    ├── README.md
    ├── blah.csv
    ├── build.zip
    ├── DESCRIPTION
    ├── jamoviPsychoPDA.Rproj
    ├── NAMESPACE
    ├── .Rbuildignore
    ├── .RData
    ├── data/
    │   ├── dataverbal.csv
    │   ├── testROC.csv
    │   └── .DS_Store
    ├── jamovi/
    │   ├── 0000.yaml
    │   ├── 00refs.yaml
    │   ├── glmdif.a.yaml
    │   ├── glmdif.r.yaml
    │   ├── glmdif.u.yaml
    │   ├── nonparametricirt.a.yaml
    │   ├── nonparametricirt.r.yaml
    │   ├── nonparametricirt.u.yaml
    │   ├── ordinaldif.a.yaml
    │   ├── ordinaldif.r.yaml
    │   ├── ordinaldif.u.yaml
    │   ├── ordinalreliability.a.yaml
    │   ├── ordinalreliability.r.yaml
    │   ├── ordinalreliability.u.yaml
    │   ├── rdttest.a.yaml
    │   ├── rdttest.r.yaml
    │   ├── rdttest.u.yaml
    │   ├── testroc.a.yaml
    │   ├── testroc.r.yaml
    │   ├── testroc.u.yaml
    │   ├── ttestcor.a.yaml
    │   ├── ttestcor.r.yaml
    │   ├── ttestcor.u.yaml
    │   ├── .DS_Store
    │   └── js/
    │       ├── glmdif.events.js
    │       └── .DS_Store
    └── R/
        ├── 00jmv.R
        ├── designAnalysis_utilities.R
        ├── DIF_bootFunctions.R
        ├── DIF_designAnalysisFunctions.R
        ├── DIF_retroDesignFunctions.R
        ├── DIF_utilities_binary.R
        ├── DIF_utilities_ordinal.R
        ├── glmdif.b.R
        ├── glmdif.h.R
        ├── IRT_utilities_nonParametric.R
        ├── nonparametricirt.b.R
        ├── nonparametricirt.h.R
        ├── ordinaldif.b.R
        ├── ordinaldif.h.R
        ├── ordinalreliability.b.R
        ├── ordinalreliability.h.R
        ├── rdttest.b.R
        ├── rdttest.h.R
        ├── testroc.b.R
        ├── testroc.h.R
        ├── testroc_utilities.R
        ├── ttestcor.b.R
        ├── ttestcor.h.R
        ├── .DS_Store
        └── .Rhistory


Files Content:

(Files content cropped to 300k characters, download full ingest to see more)
================================================
FILE: README.md
================================================
# Psychometrics & Post-Data Analysis for Jamovi

DEVELOPMENT IS CURRENTLY ON HOLD. CONTACT THE CREATOR FOR DETAILS OR INTEREST IN RENEWING THE PROJECT.

This module is a tool for performing various Psychometric & Post-Data Analyses.

The current tools available are:

- *BinaryLogR* (Binary Logistic Regression for Differential Item Functioning): 

   Assessing DIF on dichotomously scored items using a generalized linear model framework (GLIM). By incorporating the GLIM family of methods for detecting DIF in a user-friendly interface, the technical barrier to assessing DIF has been greatly reduced. The development of techniques for assessing of Type-M error rates (Gelman & Carlin, 2014) on DIF-classification thresholds represents a revolution in the interpretability of DIF-flagging, particularly in the context of low-powered research settings. The goal developing this module is to encourage the use of the the GLIM framework in the broader psychosocial measure validation praxis.

- *Test ROC* (Measure Diagnostics)
    The TestROC module provides an interface to the cutpointR R-package. This module enables researchers in psychosocial validation work to assess the optimal cutpoints of measures. _Additional info to come_

In testing/development:
- Ordinal logistic regression for DIF

- Design analysis for:
	- T-Test for Mean differences
	- T-Test for Correlations

- Reliability analysis for ordinal measures

<img src="docs/i1.png" class="img-responsive" alt="">


# Installation

You will first need to download [jamovi](https://www.jamovi.org/download.html). 

Select the jamovi modules library and install PPDA from there

## From source

You will first need to download [jamovi](https://www.jamovi.org/download.html). 

Next, clone this repository and compile the module within R with `jmvtools`.

```
install.packages('jmvtools', repos=c('https://repo.jamovi.org', 'https://cran.r-project.org'))

setwd(directory/of/cloned/repo)

jmvtools::install()

```

# Troubleshooting

## While using the module

See https://lucasjfriesen.github.io/jamoviPsychoPDA_docs/


## Installation

N/A yet



================================================
FILE: blah.csv
================================================
4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4
1,4,2,4,2,2,1,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,3,1,2,3,2,1,3,2,4,4,3,3,2,1,1,3,3,4,1,2,4,3,2,4,3,2,1,3,3,4,4,1,2,2,2,3,2,3,2,1,1,2,3,4,2,4,4,3,1,4,1,4,2,3,1,2,4,1,4,3,2
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,1,2,3,4,2,2,2,4,2,1,4,1,1,4,3,1,1,4,2,1,3,3,4,4,3,2,2,3,2,1,3,2,4,4,4,3,2,4,1,3,3,1,1,3,4,3,4,4,3,2,2,3,2,1,3,1,2,1,2,3,1,1,2,1,2,3,3,4,2,4,4,3,1,4,4,4,2,1,1,2,4,1,4,3,2
1,4,2,1,4,2,4,2,4,3,3,4,1,1,2,3,1,3,4,1,2,2,4,2,3,4,1,3,4,3,1,1,2,4,1,1,3,2,3,4,1,2,3,3,4,3,1,3,4,3,2,2,3,4,1,2,1,1,2,4,2,4,4,2,2,1,3,4,4,4,4,2,3,2,3,1,2,1,1,2,4,2,4,2,1,1,3,4,4,4,4,2,1,1,4,2,3,4,3,2
1,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,3,3,1,4,3,1,2,3,4,1,3,2,4,4,3,2,2,3,1,3,3,1,1,3,4,3,2,4,3,2,1,3,3,4,4,1,2,2,2,3,2,3,2,1,4,3,3,4,2,4,4,3,1,4,1,4,2,3,1,2,2,1,4,2,2
1,2,2,4,4,2,4,3,1,3,3,4,1,1,2,3,2,3,4,2,4,4,1,2,3,1,1,3,4,4,1,1,4,1,1,1,3,1,4,1,1,2,3,2,1,3,2,4,4,3,3,2,1,4,1,3,1,3,2,4,3,3,4,3,2,1,3,3,2,4,1,1,2,1,3,2,3,2,1,4,3,3,4,1,4,4,3,1,4,2,4,2,1,1,4,4,1,4,3,2
1,4,3,2,4,2,2,1,4,2,2,2,1,1,3,3,1,3,4,3,1,2,1,2,1,2,3,1,4,4,1,1,4,1,2,3,3,4,4,1,1,2,3,3,1,4,1,3,4,3,2,2,4,1,3,3,1,1,1,4,3,4,4,4,2,4,3,3,2,4,1,2,1,2,3,2,1,3,1,2,3,4,4,2,4,4,3,1,1,3,3,2,1,1,4,4,1,4,3,4
1,4,2,4,2,2,2,1,4,3,3,2,4,4,3,2,2,3,4,1,2,2,4,2,3,1,1,3,1,3,1,4,3,2,4,2,3,2,3,3,1,2,3,2,1,2,1,4,4,2,1,2,4,1,3,3,4,3,2,4,4,4,4,2,2,1,3,4,1,4,1,2,3,2,2,4,1,2,1,4,2,3,4,1,4,4,1,2,4,4,2,3,3,1,4,4,2,4,3,4
1,4,1,2,4,2,4,2,1,3,3,4,2,1,2,3,1,3,4,2,2,2,1,2,3,1,3,3,1,3,1,2,4,3,2,3,3,4,4,4,1,3,3,1,1,3,1,4,4,3,3,2,3,4,1,2,1,1,2,4,3,2,4,3,1,NA,1,3,2,2,4,1,2,2,2,3,2,3,2,1,4,3,3,4,2,4,4,3,1,4,1,1,2,3,1,2,4,4,4,3
1,4,2,4,4,2,4,2,1,1,3,2,1,2,3,4,2,4,4,2,2,2,1,2,3,4,1,3,2,3,1,1,4,2,2,3,3,2,4,3,1,2,3,3,1,3,1,4,4,3,3,2,1,1,3,2,4,3,2,4,3,3,4,3,2,1,3,3,4,4,1,2,2,2,3,2,3,2,1,4,2,3,3,2,4,4,3,1,4,1,4,1,3,1,2,3,3,4,3,1
2,4,2,4,3,3,3,2,2,3,3,4,2,1,2,3,2,4,4,3,2,2,4,2,1,3,2,3,1,4,1,1,3,2,3,4,3,4,3,3,1,2,3,3,1,4,1,1,4,4,3,2,3,4,3,3,4,1,1,4,3,4,4,2,2,4,4,3,3,4,1,4,1,1,3,2,3,2,4,4,3,3,4,2,3,4,3,1,4,3,4,2,4,3,4,4,2,4,2,4
1,4,2,2,2,1,2,3,4,4,3,4,4,2,3,4,2,3,4,2,3,2,3,2,3,4,4,3,2,4,3,4,2,2,2,3,4,1,3,4,2,2,2,2,4,3,2,3,4,4,3,2,3,4,1,2,4,2,2,4,3,4,4,2,2,2,3,3,4,4,2,4,1,2,4,2,1,1,2,4,3,4,4,3,4,4,3,2,4,4,4,2,1,4,4,4,2,3,2,4
1,4,2,1,2,2,2,2,4,3,2,4,4,1,1,3,1,3,2,2,2,2,1,2,1,4,1,1,1,3,1,1,4,2,2,4,3,1,3,4,2,2,3,3,1,3,1,4,4,3,2,2,1,1,1,3,1,3,2,4,3,3,4,3,2,1,3,2,3,4,1,4,3,2,3,2,3,2,1,1,3,2,4,2,2,2,2,1,3,2,4,2,1,1,2,4,1,4,2,2
1,4,2,1,2,3,4,2,4,3,3,2,2,1,2,3,2,3,4,1,1,2,2,2,1,1,1,2,4,4,1,1,2,2,1,4,3,4,4,1,2,1,3,2,1,3,1,1,4,3,3,3,3,4,3,1,4,1,3,4,3,1,4,2,2,1,3,3,3,4,2,4,1,2,3,1,2,1,1,4,3,2,4,1,4,4,3,4,4,4,3,2,1,1,2,4,2,4,2,2
4,4,3,3,4,2,2,2,1,2,3,2,4,1,2,4,2,4,3,2,2,2,4,2,1,4,1,3,4,4,2,4,3,2,4,3,3,4,3,1,1,2,3,4,1,3,1,3,2,3,3,4,3,3,3,4,2,3,3,4,4,4,4,3,3,1,3,1,2,4,3,3,1,1,2,3,4,1,3,1,3,3,3,3,4,4,3,3,3,3,4,2,4,1,2,2,2,4,3,2
3,4,2,3,4,2,2,1,1,2,3,4,1,1,2,3,1,4,4,1,2,2,1,2,3,1,1,3,1,4,1,1,2,3,2,4,3,4,4,3,2,2,3,4,1,3,2,4,1,1,3,2,1,4,1,3,2,3,1,4,3,1,4,4,3,2,3,2,4,3,2,2,3,2,3,1,3,1,1,2,3,3,4,2,4,1,3,1,4,4,4,2,3,1,2,4,1,4,4,4
1,4,2,4,4,2,3,2,4,2,3,2,1,1,2,3,1,3,4,3,2,2,1,2,3,2,1,3,1,4,1,1,4,2,2,3,3,4,3,4,1,2,3,4,1,3,2,4,4,1,2,2,4,1,3,3,4,1,2,4,3,2,4,4,2,2,3,2,4,4,1,2,1,2,3,2,3,2,1,2,3,3,4,1,4,1,3,1,4,3,4,2,1,1,2,4,4,4,4,2
1,4,2,4,4,2,3,2,4,1,3,4,1,1,2,3,1,3,4,2,1,4,1,2,3,4,1,2,3,4,1,4,2,2,2,2,3,4,3,3,2,2,3,2,1,1,3,3,4,3,3,2,3,1,3,3,4,1,2,4,4,1,4,3,2,4,3,3,4,4,2,4,3,2,3,1,3,2,3,4,3,4,4,3,2,3,3,3,4,4,4,2,1,1,4,4,2,4,3,3
2,1,2,4,4,2,4,2,4,3,3,4,1,1,3,3,1,2,4,2,2,2,1,2,1,4,1,3,1,3,1,1,2,2,2,4,3,1,3,1,1,2,3,2,1,3,1,4,4,3,3,1,1,1,3,2,1,3,2,4,3,1,4,3,2,1,3,3,4,4,1,2,3,2,3,2,3,2,1,2,3,3,4,2,4,1,3,3,4,3,4,2,1,1,2,4,1,4,4,4
4,4,2,1,3,2,3,3,1,3,3,4,2,1,2,3,1,3,4,2,2,2,1,2,1,2,1,3,1,1,1,1,4,2,2,2,3,4,3,1,1,2,3,2,1,3,2,4,4,3,2,2,1,1,3,2,4,1,2,4,3,3,4,2,3,1,3,4,4,3,1,2,3,2,3,1,3,2,1,4,3,4,4,2,4,4,3,1,4,4,4,2,1,1,4,4,3,4,3,4
2,4,2,2,3,1,1,3,4,2,3,4,4,1,2,3,1,3,4,2,2,2,1,2,4,4,1,2,1,3,1,2,4,3,2,3,3,1,3,4,1,2,3,3,1,3,2,3,4,1,2,4,1,2,3,3,4,1,2,4,3,2,4,3,3,3,3,4,1,4,1,1,3,2,3,3,4,2,3,2,3,2,4,2,4,4,3,1,4,2,4,2,1,1,2,2,2,4,2,2
2,4,3,4,4,3,3,2,1,3,3,4,1,4,1,3,NA,2,4,2,3,2,1,2,NA,1,1,NA,1,3,4,NA,3,3,1,3,1,2,3,4,1,2,1,3,1,3,1,4,3,4,4,3,1,4,3,4,1,4,1,4,1,4,4,2,2,4,2,3,2,2,1,4,3,3,2,3,1,1,2,4,4,3,4,1,4,2,4,4,3,3,3,1,1,4,1,4,4,1,3,4
1,4,2,2,4,2,4,2,4,1,2,4,4,1,2,3,1,2,4,2,4,2,1,1,3,4,2,1,1,3,2,1,4,2,1,2,4,1,1,4,2,2,1,2,1,2,4,3,4,1,3,2,1,4,3,3,4,1,2,4,3,2,4,4,1,1,3,3,4,4,4,4,1,1,3,2,1,2,3,4,3,4,4,1,4,4,4,1,4,1,2,2,1,1,4,4,2,4,1,4
1,4,2,4,2,2,3,2,4,3,3,2,4,1,2,3,1,3,4,2,2,2,1,2,3,4,1,3,2,4,1,1,3,2,2,3,3,4,4,4,1,2,3,2,1,3,1,4,4,1,2,4,1,4,1,4,3,1,2,4,3,4,4,2,2,4,3,3,2,4,2,2,1,2,3,2,3,2,1,4,3,3,4,2,2,4,3,3,4,4,4,2,4,4,2,2,2,1,3,2
1,4,2,4,4,2,3,4,4,3,3,4,2,1,2,3,2,3,4,2,2,2,1,2,1,4,1,1,1,3,4,1,4,2,3,4,3,4,3,1,1,2,3,2,1,3,1,4,4,3,3,2,3,4,3,3,4,3,2,4,3,1,4,1,3,2,3,4,4,4,2,2,3,2,3,2,3,2,1,2,3,3,4,1,1,4,3,2,4,4,4,2,3,1,2,4,2,2,2,3
1,4,2,4,4,2,4,2,4,4,3,4,2,1,2,1,1,3,4,3,2,2,1,2,1,4,1,3,4,3,1,1,4,1,4,3,3,4,3,4,1,3,3,3,1,3,1,4,4,3,2,1,1,4,1,3,4,1,1,4,1,4,4,3,2,3,3,3,4,4,3,2,2,3,3,2,3,2,1,4,2,3,4,2,1,4,3,1,4,3,4,2,1,1,2,4,2,4,4,2
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,1,2,1,2,3,4,1,3,1,3,1,1,4,3,2,4,3,4,3,1,2,2,3,1,1,3,2,3,4,3,2,2,3,1,3,3,4,1,2,4,3,1,4,1,2,1,3,3,1,4,1,2,2,2,3,2,3,1,1,4,3,4,4,2,4,4,3,1,1,4,4,2,3,1,2,2,1,4,3,2
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,2,4,1,2,2,1,2,3,2,1,1,4,3,1,1,4,2,2,3,3,4,3,1,2,2,3,4,4,3,1,4,4,3,2,2,1,4,3,3,1,3,2,4,3,1,4,2,2,1,3,4,3,4,1,2,4,2,3,2,3,2,1,1,2,4,4,4,4,4,3,1,4,4,4,2,3,1,2,4,2,4,3,2
1,4,2,4,2,2,2,2,1,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,2,2,2,4,3,4,3,4,1,3,3,2,1,3,1,4,4,1,3,1,1,1,1,3,4,1,1,4,4,2,4,3,2,1,3,2,4,4,4,2,1,2,3,2,2,1,1,4,2,3,4,3,4,4,3,2,4,2,4,2,1,1,2,4,1,4,3,2
1,4,2,4,2,2,3,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,4,4,1,4,2,2,3,3,1,4,3,2,2,3,2,1,3,1,3,4,3,2,2,1,2,3,3,3,3,2,4,2,2,4,3,2,1,3,3,4,4,3,2,2,2,3,2,3,2,2,2,3,3,3,2,4,4,3,2,4,3,4,2,2,1,2,4,2,4,3,4
1,4,2,4,2,3,2,2,4,3,3,4,4,4,2,3,2,3,4,2,3,2,1,2,3,4,1,2,1,2,1,1,4,2,1,2,3,1,3,3,1,2,3,2,1,3,1,3,4,3,2,2,2,4,3,3,2,1,2,4,3,4,4,2,3,1,3,3,1,4,1,4,2,2,3,2,1,1,1,3,3,3,4,2,4,4,3,1,4,3,1,2,4,1,4,4,2,1,3,1
1,4,2,4,4,2,2,3,4,3,3,4,1,3,2,3,1,2,4,2,2,2,1,2,2,4,3,3,1,4,1,2,3,2,4,4,3,1,3,1,2,2,3,2,1,3,1,4,4,3,3,2,3,4,3,4,4,1,2,4,4,2,1,2,2,4,3,2,3,4,3,4,1,2,4,2,4,1,1,4,4,3,2,4,4,2,3,4,4,3,1,2,4,3,4,3,2,4,2,4
3,4,2,1,2,3,2,2,4,3,3,4,1,1,2,3,1,3,2,2,1,2,1,1,4,2,1,1,2,4,1,4,3,2,2,4,4,1,4,3,2,2,2,4,1,3,1,4,1,2,2,1,3,1,1,2,4,1,2,4,3,1,4,3,2,2,3,1,4,4,1,4,1,2,3,2,1,1,2,2,3,4,4,1,4,4,3,1,3,4,2,3,1,1,3,1,3,2,4,2
1,4,2,4,2,2,2,2,4,3,3,2,1,1,2,3,1,4,4,2,2,2,1,2,1,2,1,3,1,4,1,1,4,2,1,4,3,4,4,4,1,2,3,2,1,3,1,3,4,3,2,2,1,1,2,3,4,3,2,4,3,1,4,3,3,2,1,3,4,4,1,4,1,2,3,2,2,1,1,2,3,3,4,4,4,2,3,1,4,2,4,2,1,1,2,2,2,4,3,2
1,4,2,4,4,2,3,2,1,3,3,4,4,1,2,3,1,4,3,3,2,2,1,2,1,4,1,1,1,3,3,1,4,1,4,4,3,1,4,4,4,3,3,4,1,3,1,3,4,3,3,2,1,1,3,2,4,3,2,4,3,3,4,2,2,1,3,3,2,4,1,2,2,2,1,2,3,2,1,4,3,4,4,3,4,1,3,1,1,3,4,2,3,1,4,4,2,4,1,4
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,4,3,1,2,2,3,2,1,3,1,4,4,1,3,2,1,1,3,3,4,3,2,4,3,1,4,1,2,1,3,3,2,4,1,2,2,2,3,2,3,2,1,2,3,3,4,2,4,4,3,2,4,1,4,2,1,1,1,3,2,4,1,4
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,4,2,3,4,2,2,2,1,2,1,2,3,3,1,4,1,1,2,2,2,3,3,1,4,3,1,2,3,4,1,3,1,4,4,4,3,2,1,1,3,3,4,1,2,4,3,1,4,1,2,1,3,2,2,4,1,1,1,2,3,3,2,1,1,3,3,3,4,1,4,4,3,1,4,4,4,2,3,4,1,4,1,4,4,2
1,4,2,4,2,3,3,1,1,4,3,4,1,1,2,4,1,2,4,2,4,2,2,2,1,1,1,1,4,1,3,2,4,1,4,1,3,4,3,2,1,2,2,3,1,1,1,4,4,3,3,2,1,4,3,3,1,3,1,4,3,4,4,1,2,3,3,3,2,4,4,1,3,2,1,2,1,1,1,3,3,1,4,2,1,4,1,1,4,1,2,2,3,1,3,4,2,1,2,3
1,4,2,4,4,2,3,2,1,1,3,2,1,1,2,3,2,3,4,2,1,4,3,2,3,4,1,3,1,4,1,1,2,2,2,4,3,1,3,3,1,1,3,1,1,3,1,3,4,3,2,2,3,1,3,3,4,1,2,4,3,3,4,2,2,1,3,2,4,4,1,2,1,2,3,2,3,2,1,2,4,3,4,2,4,4,3,1,4,3,4,2,1,4,2,2,1,4,2,4
2,4,2,2,2,3,2,4,1,4,3,4,2,3,2,4,2,4,4,3,2,2,1,2,3,2,1,2,3,4,1,1,3,1,2,4,1,3,4,2,1,2,3,2,3,4,1,4,1,3,4,3,3,4,1,3,1,1,2,4,3,4,4,2,2,2,3,1,2,4,4,1,3,2,3,2,1,2,4,3,4,1,4,1,2,4,3,2,2,2,3,2,3,2,4,4,1,4,2,4
2,4,2,1,1,2,2,1,4,3,3,4,1,1,2,4,1,3,1,2,2,2,1,2,4,1,1,3,1,3,1,2,2,1,2,2,2,4,3,4,1,3,3,2,1,3,1,4,4,4,3,2,4,1,3,3,4,1,1,4,3,2,4,4,2,2,4,3,3,4,1,4,3,2,3,2,2,4,1,2,3,2,4,2,1,2,4,4,4,3,4,2,3,1,2,4,3,4,4,2
1,4,2,4,2,2,1,2,4,3,3,4,1,1,2,3,2,4,4,2,3,2,1,2,1,1,1,3,1,4,1,4,2,2,1,2,3,1,3,4,1,2,3,2,1,3,1,4,4,1,3,2,1,4,1,4,4,3,2,4,2,4,4,3,2,1,3,4,1,4,4,4,4,2,3,1,1,1,1,4,4,2,4,1,4,4,3,1,1,1,4,2,2,1,4,4,1,1,4,4
4,4,2,4,2,2,4,2,4,4,1,4,2,1,2,3,2,3,4,2,2,2,1,2,1,4,1,4,1,3,1,1,4,4,2,2,3,4,4,1,1,2,3,2,1,4,1,4,4,3,3,2,1,1,3,3,4,1,2,4,3,1,4,2,2,1,3,3,4,4,1,4,1,2,3,2,3,2,1,4,3,4,4,4,4,4,3,2,4,3,4,2,1,1,4,4,1,4,3,2
1,4,2,4,2,2,4,2,1,3,3,1,4,1,3,3,1,4,4,3,2,2,1,2,1,4,1,3,2,4,1,2,2,2,2,4,1,4,3,4,2,3,3,2,1,4,1,3,4,4,3,1,3,1,3,2,4,3,2,4,3,1,4,3,2,2,3,2,2,4,1,1,1,2,3,2,2,2,1,2,3,3,4,2,4,1,3,1,4,3,3,2,1,1,2,4,1,4,3,4
1,4,2,4,2,3,1,2,1,2,3,2,1,1,2,1,1,3,4,3,1,2,1,2,1,4,3,3,4,3,1,1,3,2,2,4,3,4,3,1,2,1,3,1,1,1,2,3,4,1,2,1,4,1,3,2,4,1,3,4,3,2,4,1,2,2,3,4,4,4,1,2,1,2,3,2,2,2,1,4,3,3,4,2,1,4,3,4,4,3,4,2,1,1,2,2,2,4,3,2
4,4,2,4,4,2,1,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,4,2,2,2,4,3,4,4,1,1,2,3,2,1,3,1,3,4,3,2,1,1,1,3,3,4,1,2,4,3,4,4,3,3,3,3,2,1,4,1,2,3,2,3,2,3,2,1,2,3,3,3,2,4,1,3,1,1,4,4,2,4,3,4,4,1,4,3,2
3,4,2,4,4,2,4,2,4,3,3,4,1,1,3,3,2,4,4,2,1,2,1,2,3,1,1,3,2,4,1,1,1,1,4,3,3,4,4,3,1,1,3,4,1,1,2,4,4,3,2,1,4,1,3,3,4,3,2,4,3,4,4,3,2,1,3,3,1,4,1,2,2,2,3,2,1,2,1,4,3,3,4,2,4,2,3,1,4,3,4,2,1,1,4,2,1,4,3,2
1,4,2,2,3,2,4,1,1,4,3,4,4,1,2,3,2,4,4,2,4,2,3,2,4,4,3,2,4,3,3,2,4,2,2,4,3,4,3,4,2,2,2,2,1,3,1,4,4,3,3,3,1,4,3,2,4,1,1,4,3,3,4,1,2,2,3,2,4,4,1,4,1,3,3,2,3,2,2,4,1,3,4,1,2,1,2,2,4,4,3,2,4,2,3,4,1,2,3,2
2,4,2,4,3,2,4,2,4,3,3,4,1,1,2,3,1,3,4,3,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,3,4,1,4,3,1,2,3,2,1,3,1,4,4,3,3,2,1,1,3,3,1,3,2,4,3,1,4,4,2,1,3,3,4,4,2,2,1,2,3,2,3,2,1,4,3,4,4,2,4,2,3,1,4,1,4,2,4,3,2,2,1,4,2,2
1,4,2,4,4,2,4,2,4,2,3,2,2,4,2,2,1,4,4,2,1,2,1,2,1,4,1,3,1,4,1,4,4,3,2,2,3,4,4,1,2,2,1,3,1,4,4,3,4,3,3,2,3,4,3,2,4,1,2,4,3,1,4,4,2,1,3,4,1,4,3,1,3,2,3,2,2,2,3,2,3,3,4,2,2,1,3,1,4,4,4,2,3,4,2,2,1,4,4,2
2,4,2,4,2,3,1,2,4,1,3,4,1,1,2,4,1,3,4,2,2,2,3,2,4,2,1,2,1,3,1,1,4,2,1,3,3,2,3,2,1,2,3,2,1,3,2,3,4,3,3,1,3,4,3,3,1,1,2,4,3,4,4,1,2,1,3,4,1,4,1,2,3,2,3,3,2,2,1,2,3,3,4,1,4,2,3,1,2,1,4,2,1,1,2,4,1,4,2,2
1,4,2,4,2,2,4,2,2,3,2,4,1,1,2,3,1,1,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,3,1,1,2,3,2,1,3,1,3,4,3,2,2,1,1,3,3,4,3,2,4,3,1,4,1,2,1,3,3,4,4,1,2,2,2,3,2,3,2,1,2,2,3,4,2,4,4,3,1,4,3,4,2,3,1,2,2,1,4,3,4
1,4,2,4,2,2,3,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,3,3,1,2,3,2,1,3,3,3,4,3,3,2,4,1,3,2,3,1,2,4,3,2,4,3,2,1,3,3,4,4,1,2,2,2,3,2,3,2,1,4,3,3,4,2,2,3,3,1,4,2,4,2,3,1,2,2,1,4,4,2
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,3,1,3,1,4,1,2,4,3,2,3,3,4,4,3,1,2,3,2,1,3,1,4,4,3,3,2,1,1,1,3,1,3,2,2,3,1,1,2,2,2,3,3,4,4,4,4,1,2,3,3,3,2,1,4,3,3,4,2,4,4,3,1,4,4,1,2,1,4,3,4,1,4,2,2
1,4,2,1,3,2,2,1,4,2,3,1,4,3,4,4,1,2,4,2,1,2,4,3,3,1,1,3,4,4,3,2,3,1,2,1,3,1,4,2,3,1,3,1,1,3,4,1,4,3,3,2,2,2,3,1,4,1,1,4,1,1,4,3,2,3,3,2,3,4,3,1,3,4,3,2,1,2,4,4,3,3,4,2,1,4,3,2,2,4,4,2,1,1,4,4,2,1,3,4
1,4,2,1,4,2,1,3,1,3,3,4,2,1,2,3,1,1,4,2,1,2,1,2,3,4,1,3,1,3,1,1,2,2,2,2,3,4,3,1,1,2,3,2,1,1,1,3,4,3,3,2,3,4,3,2,4,1,2,4,3,4,4,4,3,1,3,3,4,4,2,2,1,3,3,2,2,1,1,4,3,3,4,2,4,4,3,1,2,4,4,2,1,1,2,4,1,4,2,4
1,4,2,4,2,3,4,2,1,3,3,4,1,1,2,3,1,2,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,3,4,4,3,1,4,3,1,2,3,2,1,3,1,4,4,3,3,2,1,1,3,3,4,3,2,4,3,3,4,3,2,1,3,3,4,4,1,2,2,2,3,2,3,2,1,2,2,3,4,2,4,2,4,1,1,1,4,2,3,1,2,4,1,4,2,4
1,4,2,4,2,1,4,2,4,2,3,4,2,1,2,3,2,3,4,2,2,2,1,2,2,2,1,3,1,3,3,4,2,2,2,1,3,1,4,4,2,2,3,4,1,3,1,3,4,2,2,2,1,4,1,3,4,3,2,4,3,4,4,2,2,2,3,3,1,4,4,4,2,2,3,2,3,2,1,2,3,3,4,2,4,1,3,1,4,2,3,2,3,1,4,4,2,4,2,2
1,4,2,1,2,3,3,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,2,1,1,1,3,1,1,4,2,2,4,3,1,4,3,1,2,3,2,1,3,1,4,4,2,3,2,4,4,1,3,4,3,2,4,4,2,4,4,2,3,3,3,4,4,2,3,3,3,3,2,4,1,2,1,2,3,2,3,2,2,3,2,3,2,4,2,4,3,2,2,2,4,2,2
1,4,3,1,4,1,4,2,4,3,3,4,1,3,2,3,2,3,4,2,2,2,1,2,1,1,1,2,1,3,1,1,4,2,2,3,3,4,4,1,1,2,3,1,1,4,1,4,4,1,3,2,4,1,3,3,4,1,2,4,3,4,4,3,2,1,3,3,1,4,2,2,4,2,3,2,3,1,1,1,3,1,4,2,4,4,4,1,4,1,1,2,1,1,3,4,1,4,3,4
1,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,1,4,3,2,2,1,2,1,1,1,1,2,3,1,1,4,2,2,3,3,1,4,1,1,2,3,1,1,3,1,4,4,1,3,2,2,1,3,3,4,1,2,4,3,1,1,1,1,1,3,3,3,3,1,2,2,2,3,1,3,2,3,1,3,1,2,3,4,4,1,1,4,1,4,2,1,1,1,4,1,4,3,4
1,4,2,4,2,3,1,1,4,1,3,4,1,1,2,4,2,3,4,4,2,2,1,2,1,2,3,1,1,4,1,1,4,2,1,4,2,4,4,1,2,1,3,2,1,4,1,4,4,2,2,4,1,4,3,3,1,3,2,4,3,1,4,3,2,1,3,2,4,4,4,2,3,2,3,2,3,2,1,2,2,3,4,2,4,1,3,1,4,2,3,2,3,1,4,4,1,4,3,2
3,4,2,4,2,2,1,2,1,2,3,2,1,1,2,3,1,4,4,2,2,2,1,1,3,2,4,3,1,3,2,3,1,2,2,4,3,4,3,4,1,2,1,4,1,3,2,4,4,3,2,2,1,4,3,4,3,1,2,4,2,3,2,4,2,1,2,4,1,4,4,1,2,2,3,2,2,2,1,4,3,3,4,1,3,3,3,2,4,3,3,2,1,1,4,4,1,3,1,4
1,4,2,4,3,3,2,1,1,3,3,4,1,3,2,3,1,3,4,2,2,2,1,2,3,4,1,1,4,3,1,1,4,1,2,3,3,1,3,3,1,2,3,2,1,2,1,3,4,2,3,4,1,4,3,3,4,3,1,4,3,1,4,1,1,2,4,3,3,4,1,3,4,2,3,4,4,2,1,4,3,4,4,1,4,1,4,2,4,1,4,2,1,4,4,4,2,4,2,2
4,2,2,4,2,2,4,2,4,3,3,4,1,4,2,3,1,3,4,2,1,2,2,2,3,1,1,2,1,4,1,1,2,2,4,4,3,4,3,4,2,2,4,1,1,3,1,4,4,1,3,2,3,4,3,3,4,1,2,4,2,4,4,1,4,1,3,2,4,4,1,4,3,2,3,2,3,2,1,4,3,3,4,1,1,4,4,2,4,4,3,2,1,1,4,4,1,1,3,4
4,2,2,1,2,3,2,2,4,3,3,4,2,1,2,3,1,3,4,2,1,2,1,2,1,4,3,3,1,3,1,2,4,2,2,3,3,4,3,1,1,2,3,1,1,4,2,3,4,3,2,2,3,1,4,4,4,3,2,4,3,2,4,2,2,1,3,3,3,4,3,2,1,2,3,3,2,2,2,4,3,4,1,1,4,3,1,2,1,2,4,2,1,1,4,4,3,3,4,2
1,4,2,4,2,2,4,2,4,3,2,4,1,1,2,3,1,3,3,2,2,2,1,2,1,4,1,1,1,3,1,1,4,3,2,1,3,4,4,3,1,2,3,2,1,3,4,3,4,3,2,2,2,1,3,3,4,1,2,4,3,1,4,4,3,1,3,3,1,4,1,2,4,2,3,2,1,1,1,4,3,3,4,2,4,4,3,1,4,3,2,2,1,1,2,4,1,4,3,2
1,4,2,2,2,2,2,2,4,3,3,4,4,1,2,4,1,3,4,3,3,2,3,2,4,4,1,1,1,1,1,4,3,3,1,4,3,4,4,4,2,2,3,3,1,3,2,3,4,1,2,2,4,4,1,2,1,1,1,4,3,3,4,1,2,1,3,2,4,4,2,2,4,4,3,2,3,2,1,4,3,4,4,1,4,2,3,1,4,3,3,2,4,3,4,1,1,4,3,4
2,4,2,4,2,2,2,2,4,3,3,2,1,1,2,3,1,3,4,2,2,2,1,2,1,3,1,3,1,3,1,1,4,2,2,4,3,1,3,1,1,2,3,2,1,3,1,3,4,3,2,2,4,1,3,2,4,1,2,4,2,2,4,3,1,1,3,2,4,4,1,2,4,2,3,2,2,2,1,2,2,3,4,2,4,4,3,1,1,4,4,2,1,1,4,4,2,4,3,2
4,4,2,4,3,2,4,3,2,2,3,4,1,1,2,4,2,3,4,3,2,4,3,2,3,1,3,3,1,4,1,4,4,1,4,2,3,4,3,1,2,2,3,2,2,3,1,3,4,1,4,2,3,2,3,3,3,3,1,4,3,1,4,3,1,1,1,4,1,4,1,4,1,2,3,2,3,2,1,4,1,3,4,2,2,3,1,1,NA,4,4,2,1,1,4,4,2,4,NA,1
1,4,2,4,2,2,2,2,1,3,3,4,4,3,2,3,3,4,4,2,3,2,1,2,1,4,1,3,2,3,1,1,4,2,1,1,3,3,3,3,2,3,3,3,1,3,2,4,4,4,3,3,1,1,4,2,4,3,2,4,1,1,4,4,2,1,3,3,1,4,3,2,3,2,2,3,2,2,1,4,2,4,4,4,1,1,4,4,4,3,4,2,4,4,4,4,1,4,3,2
2,4,2,3,2,1,2,2,4,3,3,4,2,1,2,4,1,4,4,2,2,2,1,2,4,2,1,2,2,4,1,1,2,1,3,4,2,2,3,4,1,2,3,2,1,3,1,4,4,1,4,4,1,2,1,4,4,1,2,4,3,2,4,3,2,1,3,4,2,4,4,1,1,2,3,2,3,2,1,4,3,3,4,4,3,1,3,2,1,2,1,3,2,1,2,4,1,4,4,1
1,4,2,1,4,2,4,2,4,3,3,4,1,3,2,4,1,3,4,2,1,2,3,2,2,2,1,1,4,4,1,1,4,2,1,3,3,4,4,3,2,2,3,1,1,4,1,4,4,1,2,1,3,4,1,4,4,3,2,4,2,3,4,1,2,2,3,3,4,3,2,4,4,2,3,2,2,2,1,2,3,1,4,2,4,4,4,1,4,2,3,2,3,1,4,4,3,1,3,4
1,4,2,4,4,2,4,2,4,3,3,2,1,1,2,3,1,3,4,2,2,2,1,1,1,4,1,1,1,3,1,1,2,3,1,4,3,1,4,3,2,2,3,2,1,3,1,4,4,3,2,1,1,1,3,3,1,3,2,4,3,4,4,4,2,1,3,3,1,4,2,2,3,2,3,2,3,2,1,2,3,3,4,2,NA,4,3,4,4,1,4,2,1,1,2,2,1,4,4,2
1,4,2,4,4,2,4,2,4,3,3,4,1,1,2,3,2,3,4,2,1,2,1,4,1,4,1,3,2,3,1,4,3,2,2,4,3,4,3,4,2,2,3,3,1,3,4,4,4,3,3,1,1,4,3,3,2,1,2,2,3,2,4,3,2,1,3,3,2,4,3,2,1,2,3,1,2,2,1,2,3,3,4,2,1,4,3,1,4,3,4,2,1,1,2,4,2,1,4,4
1,4,2,4,2,2,2,2,4,3,3,4,2,3,2,3,2,3,2,2,2,2,1,2,1,1,1,3,1,3,1,1,4,3,2,3,3,1,3,1,1,2,1,4,1,3,2,4,4,4,3,2,3,1,3,4,4,1,3,4,3,3,4,4,2,2,3,2,4,4,3,2,1,2,3,3,2,2,1,4,3,4,4,3,2,4,3,1,4,4,2,2,1,1,4,4,2,4,3,4
1,4,2,4,4,2,2,3,4,2,3,4,1,3,3,3,3,3,1,2,2,2,1,2,1,4,1,3,4,3,1,1,4,3,2,4,3,1,3,3,1,2,3,4,1,3,4,3,4,3,3,4,1,2,1,4,1,1,2,4,3,NA,4,3,4,2,3,3,1,4,1,2,1,2,3,2,3,2,1,1,3,3,2,1,2,4,3,1,4,4,4,2,1,4,4,4,2,4,3,2
1,4,2,1,2,1,1,3,4,1,3,4,1,1,2,3,2,3,4,3,1,2,1,2,1,4,4,2,4,3,3,1,4,2,4,4,3,4,4,1,2,2,3,3,1,4,1,4,1,1,3,2,1,1,3,4,3,4,1,4,2,2,4,1,2,2,3,2,3,4,1,2,3,2,3,2,3,2,1,2,2,1,4,2,1,4,3,1,4,2,4,2,1,1,4,2,1,4,4,2
1,4,2,3,2,2,2,2,4,3,3,4,2,1,2,3,1,4,4,2,2,2,1,2,3,4,1,3,1,3,1,1,4,2,1,4,3,1,3,3,1,2,3,1,1,3,4,3,1,1,4,2,3,1,3,4,1,3,2,4,3,2,4,2,2,2,3,3,3,3,1,2,3,2,3,3,4,2,2,2,3,3,4,2,1,2,3,1,4,1,4,2,1,4,4,4,2,4,3,4
1,4,2,4,2,3,2,2,4,3,3,4,1,1,2,4,1,3,4,2,3,4,1,2,1,4,1,3,1,3,1,1,4,3,1,4,3,2,1,2,1,3,3,1,1,3,1,4,4,3,2,2,3,1,3,3,4,3,2,4,3,3,4,1,4,1,3,3,4,4,2,3,1,3,3,2,1,2,3,2,3,1,4,1,2,2,4,1,4,4,4,2,3,3,2,4,3,1,3,2
2,4,2,4,4,2,2,2,4,4,3,4,1,2,2,1,1,3,4,2,2,2,1,2,1,2,1,2,4,3,4,1,2,3,2,4,3,1,3,3,2,2,3,2,3,3,1,4,4,3,3,4,3,4,1,4,4,3,2,4,3,4,4,4,2,2,1,3,4,4,4,4,3,2,3,1,2,1,1,2,2,3,4,2,1,2,3,1,3,4,4,2,1,1,4,4,2,4,3,2
2,1,2,2,3,2,2,3,4,3,3,4,1,1,2,3,1,3,2,2,3,4,1,2,2,4,1,3,1,3,1,2,2,2,1,4,3,2,3,4,4,2,3,1,1,3,2,1,4,3,2,3,3,2,3,3,4,3,1,4,3,4,4,1,3,2,3,2,4,4,1,4,4,2,3,2,1,2,1,2,2,3,4,2,1,4,4,1,4,3,1,2,4,4,2,2,2,1,4,2
1,4,2,4,2,2,1,2,4,3,3,4,1,1,2,3,1,3,4,3,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,4,3,3,1,2,3,1,1,3,4,4,4,3,3,2,1,1,3,3,4,3,2,4,3,2,4,4,2,1,3,3,4,4,1,2,3,2,3,2,1,2,1,2,3,3,4,2,4,4,3,1,4,1,4,2,3,1,2,2,1,4,4,4
1,4,2,4,4,2,2,3,1,3,3,4,2,1,2,4,2,3,4,1,1,2,1,2,1,4,4,3,3,3,1,4,2,2,2,3,1,4,3,1,2,2,3,4,1,1,1,3,4,3,4,4,1,1,3,3,4,1,2,4,3,4,4,4,2,1,3,2,4,4,2,2,1,2,3,2,1,2,1,2,3,3,4,3,4,4,4,1,4,1,4,2,1,4,2,4,1,4,2,2
2,4,2,4,3,3,4,2,1,3,3,2,1,1,2,4,1,1,4,2,2,2,1,2,1,4,1,3,1,1,1,1,4,2,2,4,3,1,3,1,1,3,3,1,1,3,1,4,4,3,3,2,1,1,3,3,4,3,2,2,3,4,4,2,2,3,3,3,4,4,4,2,3,2,3,1,2,2,1,2,2,4,4,2,4,4,3,1,4,3,4,2,1,1,2,4,1,4,3,2
4,4,2,4,4,2,3,2,4,4,3,4,1,1,2,3,1,3,4,2,3,2,1,1,1,1,3,3,2,4,1,1,4,1,2,2,3,1,4,3,2,2,3,1,1,3,2,3,4,1,3,2,4,4,3,3,1,1,2,4,3,3,4,4,2,1,3,3,1,4,2,2,2,2,3,2,2,1,1,4,2,4,3,4,4,4,3,1,4,3,3,2,1,1,4,2,1,4,3,1
1,4,2,4,3,2,4,2,4,3,3,4,1,1,2,3,2,3,4,4,1,2,1,2,1,1,1,3,4,4,1,2,2,1,1,2,1,4,3,1,2,1,3,2,1,1,2,3,4,3,3,2,4,4,3,2,1,1,2,4,3,2,4,3,2,1,3,4,4,4,2,2,2,2,3,2,1,1,4,4,3,3,4,1,4,4,3,1,4,3,4,2,2,3,3,4,2,4,4,4
1,4,2,2,4,2,4,2,4,3,3,2,1,1,2,3,1,3,4,2,2,2,1,2,3,4,3,3,1,3,1,1,4,2,1,1,3,4,4,4,1,2,3,1,1,3,1,3,4,3,2,2,1,1,3,2,1,1,2,4,3,3,4,3,2,1,3,3,4,4,1,4,3,2,3,3,3,2,1,2,2,4,4,2,4,4,3,1,4,1,1,2,1,1,2,4,1,4,4,4
1,4,2,4,4,2,3,1,4,3,3,4,1,1,2,3,1,3,4,1,2,2,1,2,1,4,1,3,1,3,1,4,4,2,2,1,3,3,3,3,1,2,3,2,1,3,1,3,4,3,2,2,4,1,3,2,4,1,2,4,3,2,4,3,2,1,3,2,3,4,1,4,3,2,3,2,3,2,1,2,2,3,4,2,4,4,3,2,4,4,4,2,1,1,2,4,2,4,3,4
2,4,2,2,4,3,1,2,4,3,3,2,4,4,2,4,2,4,4,1,2,2,1,2,1,1,3,3,3,4,1,4,2,3,2,1,3,1,1,3,2,2,3,1,1,3,1,1,4,1,1,1,2,4,3,3,4,3,4,4,4,4,4,2,2,1,3,1,4,4,2,4,4,2,3,2,2,2,1,4,2,3,4,1,4,2,4,1,4,4,4,2,1,1,4,2,2,4,2,2
1,4,2,4,2,2,4,1,4,2,3,4,4,1,2,3,1,4,4,2,1,2,1,2,3,1,1,3,1,4,1,1,4,1,2,1,3,1,4,1,1,2,3,1,1,3,2,3,4,3,2,1,2,4,1,3,1,3,2,4,3,2,4,3,2,1,3,3,3,4,3,1,4,2,3,2,1,2,2,4,3,2,4,2,2,4,3,1,4,4,1,2,3,1,2,4,1,4,4,4
1,4,2,4,2,2,1,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,3,1,3,1,1,1,1,1,2,2,4,3,1,3,1,1,2,3,2,1,3,1,3,4,3,2,2,1,1,3,3,1,3,2,4,3,4,4,3,2,1,3,2,4,4,1,2,2,2,3,2,2,2,1,1,2,3,4,2,4,4,3,1,4,3,4,2,1,1,2,4,1,4,3,4
1,4,2,4,4,2,1,1,4,3,1,4,1,1,2,3,2,3,4,2,1,2,1,2,3,2,1,3,2,4,1,1,4,3,2,4,3,4,4,4,1,2,3,3,1,3,2,3,4,3,2,1,4,1,3,4,4,3,2,4,3,1,4,4,2,1,3,3,2,4,2,4,2,2,1,2,3,1,1,4,3,3,4,3,4,1,3,1,4,4,3,2,1,1,4,3,3,3,4,4
1,4,2,3,1,1,4,2,1,3,3,4,2,1,2,3,2,3,2,2,2,2,1,2,3,2,1,3,4,4,1,1,2,1,2,3,3,4,3,1,2,2,3,4,1,4,1,4,4,3,4,2,1,4,3,4,4,1,1,1,3,1,4,2,2,3,3,2,1,4,1,4,1,2,3,2,3,2,1,2,2,3,4,2,4,2,3,1,4,3,4,2,2,1,2,2,2,4,3,1
3,4,2,2,4,2,4,2,4,3,3,3,4,4,3,2,2,3,4,4,2,2,1,2,3,4,1,2,3,3,1,1,4,1,2,4,3,4,4,4,1,1,3,3,3,3,1,4,4,3,3,3,4,2,3,1,2,4,1,4,3,2,3,2,2,4,3,4,4,3,3,2,1,2,3,1,4,1,1,3,3,3,4,2,1,4,4,2,3,3,4,2,1,1,2,4,2,1,2,3
1,4,2,4,2,2,4,1,1,1,3,4,4,4,3,3,1,3,3,2,2,2,1,2,1,4,1,3,1,3,1,1,4,1,1,1,3,4,2,1,2,2,3,2,1,1,1,3,4,3,3,2,4,1,3,3,1,1,2,4,3,4,4,1,3,2,3,3,4,3,1,4,1,2,3,1,3,2,1,1,3,1,4,1,4,2,3,3,4,1,4,2,3,1,2,4,2,4,4,2
1,4,2,4,3,4,3,2,1,1,3,4,1,3,2,3,1,3,4,2,2,2,3,2,1,2,1,3,1,1,1,1,4,1,2,4,3,4,3,1,1,2,3,4,1,3,2,4,4,4,4,2,4,NA,3,2,1,1,2,4,3,4,4,3,2,2,3,4,2,1,1,1,1,2,3,2,3,1,1,2,3,4,4,3,4,1,3,4,4,1,4,4,1,1,4,4,1,4,2,3
1,4,2,2,4,2,4,3,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,1,4,1,1,1,2,3,2,2,3,1,3,4,1,2,3,4,1,3,1,4,4,3,3,2,1,2,3,3,4,3,2,4,2,2,4,1,3,1,3,3,3,4,1,1,3,2,3,2,3,2,1,2,3,3,4,1,1,4,3,1,4,1,3,2,4,3,2,2,1,4,3,4
1,4,2,4,4,2,2,2,4,3,3,4,2,3,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,4,1,1,2,3,2,3,3,2,4,3,1,2,3,2,1,3,1,3,4,3,4,2,3,1,1,3,1,2,2,4,3,4,4,1,2,3,3,2,2,4,4,2,2,2,3,2,3,2,1,2,3,2,3,4,4,2,3,1,4,4,4,2,3,1,2,4,1,4,3,2
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,1,2,1,2,3,4,1,3,1,3,1,4,4,2,1,4,3,4,4,3,2,2,3,2,1,3,1,3,4,3,3,2,3,1,3,3,4,1,2,4,3,2,4,4,3,1,3,2,3,4,1,2,1,3,3,2,1,1,1,4,3,3,4,1,4,4,3,1,4,3,4,2,3,1,1,4,2,4,1,2
1,4,2,1,4,3,4,2,1,3,3,4,1,4,2,4,2,3,4,1,3,2,3,4,4,1,1,2,3,1,1,3,3,2,2,3,4,3,1,1,2,3,1,1,1,3,4,4,4,4,3,2,1,4,3,3,1,1,1,2,3,1,4,3,2,2,3,3,4,4,3,1,1,2,3,1,2,2,1,4,4,3,4,1,1,2,3,1,1,4,1,2,1,1,2,4,2,4,3,4
1,4,2,4,2,1,2,3,4,3,3,4,2,1,2,3,1,1,4,2,1,4,3,2,1,4,1,3,1,3,1,1,4,3,2,4,3,4,4,1,1,2,3,2,1,3,1,4,4,3,3,2,1,1,3,3,4,3,2,4,3,1,4,4,2,1,3,3,1,4,4,2,1,2,3,2,1,1,1,4,2,3,4,1,2,4,3,1,4,4,1,2,1,1,4,3,4,4,3,4
1,4,2,4,4,3,3,1,2,3,3,2,1,1,4,1,3,3,4,3,1,2,4,3,3,1,4,2,2,4,3,1,3,4,4,3,2,1,3,2,2,4,2,3,4,3,4,4,1,2,2,4,2,4,2,3,3,1,4,4,1,4,4,3,3,4,2,3,4,4,4,4,1,1,3,2,1,3,4,2,3,3,4,1,2,4,3,1,1,3,2,2,3,3,4,4,1,4,4,2
1,4,2,4,4,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,4,1,2,2,1,2,3,3,1,4,3,1,2,3,2,1,3,1,4,4,3,2,3,1,4,3,4,4,1,3,4,3,3,4,3,2,1,3,2,4,4,1,2,3,2,3,2,3,2,1,4,3,1,4,2,4,3,3,4,4,4,4,2,1,1,2,4,2,4,4,1
1,4,2,4,2,2,2,2,4,2,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,1,1,3,1,1,4,2,2,4,3,4,4,3,1,2,3,2,1,3,1,4,4,3,2,2,1,1,3,3,4,3,2,4,3,2,4,3,2,2,3,3,2,4,1,4,4,2,3,2,3,1,1,2,3,3,4,2,4,4,3,1,4,1,1,4,1,1,2,4,1,4,3,2
2,4,2,2,4,3,4,1,4,3,3,4,1,1,3,4,1,4,4,2,1,2,1,2,3,4,1,2,3,4,1,2,2,2,2,2,1,3,3,1,1,2,3,4,1,3,1,4,4,3,4,2,1,4,3,3,4,1,2,4,3,1,4,3,2,1,4,2,4,4,2,1,4,2,3,1,2,1,1,4,3,4,4,1,4,4,4,3,4,4,3,2,1,1,4,4,2,4,1,3
1,4,2,4,4,3,4,1,1,4,3,2,4,3,2,3,1,4,4,3,2,2,3,2,3,4,1,2,4,1,1,4,3,3,2,4,4,4,4,3,2,2,3,2,1,3,4,3,1,3,4,3,3,4,1,2,1,3,1,4,3,4,4,1,2,4,3,4,3,4,2,4,2,3,3,3,4,2,1,4,2,3,4,1,4,2,3,1,4,1,4,2,3,1,4,4,3,4,3,2
1,4,2,4,2,2,3,2,4,3,3,4,1,1,2,3,1,2,2,2,2,2,1,2,1,3,1,1,1,3,1,1,2,2,2,4,3,4,4,3,1,2,3,2,1,3,3,3,4,1,3,2,3,1,3,3,4,1,2,4,3,2,4,3,2,1,3,4,4,4,1,2,2,2,3,2,3,2,1,2,2,3,4,2,4,4,3,1,4,2,4,2,3,1,2,2,1,4,2,2
2,4,2,4,4,2,2,2,4,3,3,4,1,1,2,2,1,4,4,2,2,2,1,2,4,1,1,3,4,3,1,1,4,1,2,3,3,1,3,4,1,2,3,2,1,3,4,4,4,3,2,2,1,1,3,2,3,1,2,4,3,3,4,3,2,1,3,3,1,4,2,1,3,3,3,3,3,2,1,2,2,3,4,1,4,4,1,1,4,3,4,3,1,1,2,4,2,4,4,2
1,4,2,2,4,3,2,2,2,3,3,2,4,3,2,3,1,3,4,2,3,2,4,2,2,1,1,1,3,4,1,4,3,2,4,4,4,4,3,4,1,3,2,4,2,3,4,4,4,4,2,2,4,4,3,3,4,3,3,4,4,2,4,1,2,1,3,2,4,4,1,4,3,2,3,2,1,1,4,2,4,4,4,1,3,4,4,3,4,4,4,2,3,1,2,4,2,4,3,4
1,4,2,4,2,1,4,2,4,3,3,4,2,1,2,3,1,2,4,3,2,2,1,2,1,3,1,1,2,4,1,1,4,3,4,2,3,2,NA,4,2,2,3,3,1,3,1,4,4,3,2,2,4,3,3,2,4,2,4,4,3,3,4,3,2,1,3,2,3,4,2,2,3,3,3,2,1,2,1,4,3,3,4,2,1,4,3,1,4,1,4,2,1,1,2,4,1,4,3,2
1,4,2,4,4,2,2,2,4,4,3,4,1,1,2,2,1,4,4,2,2,2,1,2,4,3,1,3,1,4,1,1,4,1,2,4,3,2,3,4,2,2,3,1,1,4,1,3,4,3,3,2,4,1,1,3,4,1,2,4,3,3,4,3,2,1,3,2,3,4,2,2,4,2,3,2,4,2,1,2,4,3,4,3,4,4,3,1,1,2,1,2,4,3,4,4,2,4,3,4
4,4,2,3,4,2,4,2,4,3,3,4,1,3,3,3,1,4,4,3,3,2,1,2,3,4,1,3,2,3,3,1,3,4,2,3,3,4,3,3,4,2,3,1,1,3,2,4,1,3,3,3,1,4,3,2,3,4,4,4,3,1,4,3,2,2,3,3,4,4,4,3,2,2,3,2,1,2,3,1,4,3,4,2,2,3,3,2,4,3,2,2,2,1,4,4,2,4,3,4
1,4,2,4,2,2,4,2,4,3,3,4,4,1,2,3,1,3,4,3,2,2,3,2,1,3,1,1,1,3,1,1,4,2,2,3,3,2,3,3,1,2,1,3,1,3,1,4,4,3,3,2,1,4,1,2,1,3,1,4,3,3,4,3,2,1,3,4,2,4,1,1,1,2,3,2,1,2,1,2,3,4,4,1,4,4,1,1,4,3,4,2,1,1,2,2,1,4,3,2
2,4,2,4,2,2,4,2,4,3,3,2,1,1,2,3,1,3,4,2,1,2,1,2,4,4,1,3,1,4,1,2,4,2,1,4,3,1,4,4,2,1,3,4,2,3,2,3,4,2,1,3,3,4,3,4,4,1,2,4,3,3,4,4,2,1,3,2,4,4,1,2,3,2,3,2,3,2,1,4,4,3,4,2,4,1,3,1,4,4,4,2,1,2,4,2,2,4,3,2
1,4,2,3,4,1,3,3,1,2,3,2,4,1,2,2,4,3,1,2,2,2,1,2,2,1,1,2,4,3,1,1,4,1,1,2,3,4,4,4,2,3,1,4,1,4,1,4,2,3,1,2,4,3,3,3,4,1,4,4,4,1,4,2,3,4,3,2,4,2,3,4,3,4,3,4,4,2,2,4,3,4,4,3,4,3,4,1,4,4,4,3,3,1,2,2,2,1,3,4
1,4,2,4,4,2,4,2,4,2,3,4,2,1,3,3,2,3,4,2,1,4,1,2,4,1,1,1,2,4,1,1,2,2,1,2,1,2,4,3,1,2,3,2,1,3,2,4,4,3,3,2,1,4,3,4,1,3,2,4,3,3,4,4,3,2,3,3,4,4,1,1,2,2,3,3,3,2,1,2,3,4,4,2,1,4,3,2,4,3,3,2,1,1,2,4,2,4,2,4
1,4,2,4,4,2,2,3,2,2,3,4,3,3,2,3,1,4,4,2,4,2,1,2,1,1,1,3,3,4,1,1,4,3,2,3,3,1,3,4,1,3,3,4,1,4,4,3,4,3,4,2,4,4,1,4,4,1,1,4,3,3,4,3,3,1,3,2,2,4,4,3,2,2,3,1,2,1,2,4,3,4,4,2,4,1,3,4,2,4,4,2,2,3,2,1,4,4,3,4
2,4,2,4,4,2,4,1,4,2,3,4,2,4,2,3,1,3,4,4,3,2,2,2,3,1,1,1,1,4,1,1,1,1,2,3,3,1,3,3,2,1,3,2,2,3,2,1,4,1,4,1,3,4,1,4,4,3,1,4,3,1,4,1,2,4,3,3,2,2,1,4,3,2,3,3,2,1,2,4,3,1,4,1,1,4,3,1,4,3,4,2,1,2,4,4,3,1,2,4
1,4,2,4,4,3,4,3,4,3,3,4,1,1,2,3,1,3,4,2,3,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,4,4,3,1,2,3,2,1,3,2,3,4,3,3,2,1,1,3,3,3,3,2,2,3,4,4,3,2,1,3,3,4,4,2,2,1,2,3,2,1,2,1,2,2,2,4,3,1,4,3,4,1,4,4,2,1,1,2,4,2,4,4,2
1,4,2,4,2,2,1,2,4,3,3,4,1,1,2,3,1,2,4,2,2,2,1,2,1,4,1,3,1,4,1,1,2,2,2,3,3,2,3,4,4,3,3,1,1,3,1,4,4,3,3,1,3,1,3,3,4,3,2,4,3,3,4,4,2,1,3,2,4,4,1,2,3,4,3,2,3,2,1,2,4,3,4,2,4,4,3,1,4,4,4,2,1,1,4,4,1,4,3,2
1,4,2,1,1,3,3,3,1,3,3,4,3,1,2,4,1,3,4,2,1,2,1,1,1,3,1,1,4,3,3,2,4,2,1,2,1,4,1,4,2,2,3,2,1,3,2,4,4,3,3,2,3,4,4,3,4,2,4,4,3,3,4,3,2,2,3,3,2,3,3,2,4,2,3,2,1,2,3,2,4,2,4,3,4,4,4,1,4,3,4,2,1,1,4,4,1,4,3,2
1,4,2,4,2,2,4,2,4,1,3,2,1,1,2,3,2,3,4,2,3,2,1,2,2,4,1,3,1,3,1,1,2,2,2,4,3,1,4,4,1,2,3,2,1,3,1,3,4,3,3,2,4,1,3,2,4,3,2,1,3,2,4,4,2,1,1,2,4,4,2,4,3,2,3,3,3,2,1,2,4,2,4,2,1,4,3,1,4,3,4,2,3,1,2,1,1,4,4,4
2,4,2,4,4,2,2,2,4,3,3,4,1,1,2,3,1,4,4,2,3,1,1,2,3,1,1,1,4,3,1,2,2,3,4,4,3,4,4,4,2,2,3,2,1,4,2,4,4,3,2,2,1,4,1,3,3,2,1,4,1,3,1,3,2,1,3,1,1,4,3,4,1,2,3,2,3,1,1,1,3,3,4,4,4,4,4,1,3,3,4,2,1,1,2,4,2,1,3,3
4,1,2,4,4,4,4,1,1,3,3,4,4,4,2,4,4,1,4,2,1,2,1,4,4,1,1,3,4,1,1,3,2,3,2,4,3,3,1,4,2,2,3,4,1,3,1,4,4,1,3,3,3,4,3,4,4,4,4,4,1,1,1,1,2,3,3,2,3,4,3,1,4,4,3,4,1,2,1,4,3,2,4,1,4,2,4,1,4,4,3,4,1,1,2,4,2,4,4,3
2,4,2,1,4,3,3,2,2,3,3,4,2,1,2,3,4,3,4,2,1,2,4,2,1,1,3,3,3,4,1,4,3,3,4,3,3,1,3,3,2,1,1,4,2,3,2,3,1,3,2,2,2,4,4,1,1,1,3,4,3,4,4,4,2,2,3,3,1,4,1,2,1,3,3,1,2,2,1,2,3,2,4,1,4,4,3,4,4,3,2,2,1,1,4,4,2,2,2,3
1,4,2,4,4,4,2,1,4,2,3,2,1,1,2,4,3,3,3,3,2,2,3,1,3,2,1,1,2,3,1,1,3,1,2,3,3,3,3,4,1,2,3,2,1,3,4,4,4,3,4,2,3,4,3,3,4,3,3,4,1,3,4,1,1,2,3,3,1,1,2,2,3,2,3,3,2,2,1,1,4,2,4,2,4,4,3,4,4,2,4,2,2,1,2,1,1,4,3,3
2,3,2,4,4,2,3,2,4,3,3,4,1,1,2,3,2,3,4,2,4,2,1,2,3,4,1,3,4,3,1,1,4,2,1,4,3,4,3,4,2,2,3,1,1,3,1,4,4,3,3,2,1,1,3,3,4,3,2,4,3,3,4,2,2,1,3,3,2,4,1,2,4,2,3,2,4,1,1,2,1,3,4,2,1,4,3,1,4,1,2,2,3,2,2,2,1,4,3,4
1,4,2,4,4,2,2,2,4,3,3,4,1,1,2,3,1,3,2,2,2,2,1,2,1,4,1,3,1,3,1,1,3,1,1,4,3,4,4,4,2,2,3,1,1,3,1,3,4,3,3,2,4,1,3,2,4,1,2,4,3,2,4,3,2,1,3,2,2,4,1,2,3,2,3,2,3,2,2,2,4,3,4,2,1,2,3,4,4,2,4,2,1,1,2,2,2,4,4,4
2,4,2,2,4,3,4,1,4,2,3,4,1,3,2,3,1,3,4,2,3,2,1,2,4,3,1,1,1,3,1,3,2,4,2,3,3,3,3,2,2,2,3,3,1,1,2,1,4,2,4,2,3,4,3,2,1,1,2,4,4,4,4,2,2,1,4,2,3,4,4,2,3,2,3,3,1,2,4,2,3,2,4,1,2,2,3,4,4,4,2,2,4,1,1,4,2,2,3,2
1,4,2,2,4,3,2,2,4,3,3,4,1,1,2,3,1,3,4,3,1,2,4,1,4,4,1,3,1,3,1,4,4,3,3,1,3,4,4,3,1,2,3,2,1,3,1,4,4,3,3,2,1,4,3,2,4,1,4,4,3,2,4,2,2,2,3,3,4,4,1,4,1,3,3,1,2,2,1,1,4,4,4,2,4,4,3,1,1,2,4,2,2,1,2,4,1,4,3,2
1,4,2,3,2,1,2,1,2,2,3,4,1,2,2,3,1,3,1,1,4,2,4,4,3,3,4,1,3,2,1,2,3,4,1,3,3,4,3,1,2,1,3,2,1,3,4,3,4,4,2,1,3,1,4,3,1,3,1,2,4,2,1,1,1,4,3,1,1,1,3,4,4,2,3,4,3,1,3,1,3,1,4,2,1,1,3,1,4,3,4,3,3,1,2,4,1,1,2,3
4,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,2,4,2,2,2,1,2,1,4,1,3,1,4,1,1,4,2,2,4,3,1,4,3,2,3,3,1,1,3,2,4,4,3,3,2,4,1,3,2,4,1,2,4,3,3,4,3,3,2,3,2,4,4,1,2,1,2,3,2,3,2,1,4,3,3,4,2,4,4,3,4,4,3,4,2,1,1,4,4,1,4,2,2
1,4,2,4,2,2,4,2,4,3,3,4,1,1,3,4,1,3,4,1,2,2,4,1,3,1,1,3,1,4,1,2,4,3,2,4,3,4,3,1,2,3,3,4,1,3,2,3,4,1,2,3,4,4,4,3,4,1,2,4,3,2,4,2,2,1,3,3,4,4,1,3,4,2,3,2,2,2,1,2,2,2,4,2,3,2,3,1,4,1,4,2,3,1,2,4,1,4,3,2
4,1,2,1,4,2,1,2,4,4,2,2,4,2,1,3,2,3,4,1,3,4,1,2,3,4,1,3,2,4,3,1,4,2,3,1,1,4,3,4,2,3,1,2,2,3,1,4,4,1,2,3,4,4,3,4,4,1,3,4,4,4,2,4,4,1,3,2,4,3,4,2,3,2,3,2,4,2,1,4,4,2,4,4,4,3,4,4,3,4,4,2,1,4,2,4,2,1,3,4
1,4,3,2,2,3,3,2,4,2,3,4,3,2,2,4,2,3,4,3,2,2,1,2,4,2,2,3,3,4,1,2,3,2,1,1,1,4,3,1,2,2,1,2,1,3,4,3,1,3,1,3,2,4,2,4,4,2,1,4,3,4,4,2,3,4,3,3,3,4,3,3,1,3,3,1,3,1,2,2,2,2,4,1,4,2,3,4,3,3,3,2,4,3,3,4,3,2,3,4
1,4,2,4,4,2,2,2,4,3,3,4,2,1,2,3,3,3,4,2,2,2,1,2,1,4,1,3,1,3,2,1,4,1,2,4,3,4,4,3,1,2,3,2,1,3,1,4,4,3,3,2,1,1,3,3,1,1,2,4,4,1,4,3,2,3,3,2,4,4,3,2,4,2,3,2,2,2,1,4,3,3,4,1,2,2,4,1,4,4,4,2,1,1,2,4,2,4,3,4
1,4,2,1,3,2,2,2,4,3,3,4,4,1,3,4,2,1,4,1,2,2,3,3,3,1,1,2,1,3,1,1,2,1,1,1,3,4,4,4,2,2,1,4,2,4,2,3,4,4,3,2,1,4,1,2,4,3,3,4,3,3,4,1,3,4,3,3,2,4,4,2,1,3,3,3,4,1,3,4,4,2,3,2,2,1,3,2,1,4,1,2,1,1,1,2,3,4,4,3
2,4,2,1,2,3,3,1,2,4,2,4,2,1,2,3,4,3,3,3,1,4,2,1,3,3,1,1,3,4,3,1,3,2,2,3,4,3,1,4,1,2,3,1,1,3,1,3,4,1,2,2,4,1,1,2,4,3,2,1,1,2,4,2,2,1,3,4,4,4,1,1,1,1,3,3,2,2,3,1,1,1,3,1,2,1,3,1,4,4,3,2,1,1,4,3,3,4,3,2
1,4,2,4,2,2,2,2,4,3,2,4,1,1,2,3,1,3,4,2,2,2,3,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,3,1,2,3,2,1,3,2,4,4,3,3,2,1,1,3,3,4,1,2,4,3,3,4,3,2,1,3,2,4,4,1,4,2,2,3,2,3,2,1,2,2,4,4,2,4,4,3,1,4,1,4,2,1,1,2,2,1,4,4,2
1,4,2,4,2,2,1,2,4,3,3,4,3,1,2,3,1,2,4,2,1,2,1,2,3,4,1,3,1,2,1,1,2,2,2,4,3,4,4,1,1,2,3,2,1,3,2,4,4,3,2,2,3,1,3,3,2,1,2,4,3,1,4,4,2,1,4,3,2,4,3,2,3,2,3,2,3,2,1,2,4,4,4,2,4,4,3,1,4,4,4,2,3,1,2,2,2,4,4,4
4,4,2,4,4,2,4,1,2,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,3,4,1,2,1,4,3,1,4,4,3,4,3,1,3,4,2,2,3,3,2,4,1,4,4,3,3,1,4,1,1,3,1,3,2,4,4,3,4,2,2,1,1,3,2,1,2,2,3,2,3,2,4,2,1,2,3,4,4,3,4,4,3,4,4,3,3,2,1,1,2,4,3,4,3,4
2,4,4,2,1,3,3,1,1,2,3,4,4,1,4,3,4,3,4,2,1,2,4,2,3,4,1,2,3,4,1,2,4,1,4,1,4,3,3,4,1,1,3,3,4,3,4,3,4,1,3,3,3,4,2,2,1,1,2,4,3,4,4,3,2,1,3,3,1,3,2,4,1,3,2,1,1,2,1,3,2,4,4,1,4,4,4,4,4,3,3,2,1,1,4,4,2,2,3,2
2,4,1,2,2,3,1,3,2,1,2,1,1,3,1,4,1,1,2,3,2,2,2,4,3,1,2,2,3,1,4,4,3,4,2,4,4,1,2,4,1,3,1,4,4,2,3,3,4,2,1,1,2,2,2,4,3,1,3,2,2,4,1,1,4,2,4,4,1,4,3,3,2,1,2,3,3,1,3,2,2,1,3,1,4,3,1,1,4,1,3,2,2,2,2,2,4,1,3,3
1,4,2,4,2,2,4,2,4,2,3,4,1,2,2,3,2,3,1,2,1,2,3,2,3,4,1,2,4,3,1,1,4,3,2,4,3,1,4,4,1,2,3,4,1,4,1,3,4,1,2,1,2,4,3,3,4,3,2,4,3,1,4,1,2,4,3,2,3,1,2,4,1,4,3,2,4,2,1,4,4,4,4,3,4,1,3,1,4,2,4,2,3,1,4,2,2,4,3,2
2,4,2,2,4,2,3,3,1,3,2,1,1,2,2,3,1,4,4,3,4,2,1,4,3,4,2,2,2,3,2,1,4,4,4,1,4,4,2,1,2,3,3,3,4,3,3,3,4,1,2,2,2,4,3,3,4,1,1,2,4,1,4,1,2,2,3,2,1,4,3,4,3,4,4,2,1,1,1,4,3,4,4,2,2,1,3,4,3,4,4,2,3,1,3,4,4,3,3,2
1,4,2,1,2,2,4,2,4,4,3,4,4,1,2,3,1,4,4,1,2,2,1,2,3,4,2,1,4,4,1,2,4,4,1,4,3,4,3,1,1,3,3,3,1,3,2,3,1,1,1,3,2,4,1,2,4,3,3,4,2,1,4,1,2,2,3,4,2,4,4,4,3,2,2,2,4,1,1,3,3,3,4,2,2,1,3,4,4,3,4,3,3,2,4,2,2,4,1,3
1,4,2,4,2,2,2,3,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,3,4,1,3,1,3,4,2,4,2,1,3,3,1,4,1,1,2,3,4,1,2,4,4,4,3,4,2,4,1,3,3,4,3,2,4,3,3,4,1,1,3,3,4,2,4,1,2,3,2,3,2,3,2,1,2,3,3,4,4,4,4,3,1,4,3,4,2,1,1,2,4,1,4,4,1
1,NA,2,4,2,2,2,2,4,3,3,2,2,3,2,3,1,3,4,3,3,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,3,1,2,3,3,1,3,2,4,4,1,3,2,4,1,3,3,4,3,2,4,3,1,4,1,2,1,3,3,3,4,1,3,3,2,3,2,3,2,1,1,3,3,2,4,4,3,3,4,4,1,1,2,1,1,2,3,2,1,3,1
4,4,2,2,2,2,2,2,4,1,3,4,4,1,1,3,1,2,4,2,1,4,1,2,3,2,1,3,4,4,1,1,3,2,2,4,3,4,2,3,1,2,3,3,1,3,1,1,4,1,4,1,2,4,3,3,2,3,3,4,3,2,4,4,2,2,3,2,4,4,1,2,4,1,3,2,4,2,1,2,3,3,4,1,4,4,3,1,4,1,3,2,2,3,4,4,1,4,3,4
1,1,2,4,4,2,2,2,4,2,3,2,2,1,2,4,1,4,4,2,3,2,3,2,3,1,1,3,4,3,1,1,2,2,3,2,3,1,4,3,1,2,3,4,1,4,1,1,4,1,2,1,3,1,1,2,4,3,1,4,3,4,4,1,2,2,3,4,3,4,2,2,4,2,3,2,4,2,1,2,2,3,4,2,1,4,3,1,4,4,4,2,1,1,2,2,2,4,4,2
1,4,2,4,2,2,2,3,4,3,3,4,1,3,2,3,1,3,4,2,4,2,2,2,3,2,1,3,1,4,1,2,3,2,2,1,3,2,1,4,1,2,3,3,1,3,1,3,4,3,2,1,1,4,1,2,1,2,3,4,4,4,4,3,3,1,3,3,4,4,1,4,4,2,3,4,4,2,1,2,4,3,4,2,4,4,3,1,4,1,4,2,4,3,2,4,1,4,3,4
1,4,2,4,4,2,2,2,1,2,3,4,1,3,2,4,1,4,4,2,2,2,1,2,3,1,2,3,1,4,1,1,3,2,2,4,2,4,3,1,1,2,3,2,1,3,1,3,4,3,4,2,3,4,3,3,4,3,1,4,4,3,4,2,2,1,3,2,2,4,4,2,1,2,3,2,1,1,1,4,3,2,4,2,2,2,3,1,4,3,4,2,1,1,4,4,3,4,3,1
1,4,2,4,3,2,3,2,4,3,3,4,2,1,2,3,2,3,4,2,2,2,1,2,1,4,1,3,1,1,1,1,4,2,4,4,3,4,4,2,1,2,3,2,2,3,1,4,4,3,2,2,3,1,3,3,4,3,2,4,3,3,4,3,2,1,1,2,3,4,1,2,4,2,3,2,3,2,1,2,3,3,4,2,4,1,4,1,1,4,4,2,3,1,2,4,1,4,2,4
1,4,2,3,2,2,2,2,4,3,3,4,2,1,2,3,1,2,4,2,2,2,3,2,3,4,1,2,4,4,1,1,4,3,4,3,3,NA,2,4,1,1,3,2,1,1,2,3,4,2,4,2,3,1,3,4,1,3,2,4,3,1,4,4,2,2,4,2,2,4,3,2,3,2,3,1,1,2,1,2,3,3,4,2,1,1,3,4,4,2,4,4,1,1,4,4,2,4,2,3
1,4,2,1,2,2,2,3,4,2,3,2,1,4,2,4,2,3,4,1,1,2,3,3,3,4,1,2,2,1,3,2,3,2,1,4,1,4,1,3,1,3,4,4,1,3,4,1,4,3,1,3,3,4,3,3,4,1,3,4,1,2,4,2,2,1,3,3,4,4,4,2,1,3,3,1,1,2,2,4,3,4,4,4,1,3,3,1,4,2,2,2,4,2,1,4,1,4,4,4
1,4,2,4,4,1,4,2,4,3,3,2,1,1,2,3,1,3,4,1,2,2,1,2,1,1,1,2,1,2,1,1,3,1,2,4,3,4,4,3,2,2,3,1,1,4,1,1,4,2,2,2,4,4,3,2,1,3,2,4,3,1,4,4,2,1,3,4,3,4,2,4,1,2,3,2,3,2,1,4,3,3,4,3,4,4,3,1,4,4,4,2,4,4,4,4,1,4,4,4
1,4,2,1,4,2,4,2,4,3,3,4,2,3,3,3,2,4,4,2,2,2,1,2,3,4,1,1,1,4,1,1,4,3,4,4,2,4,3,4,1,3,3,1,1,3,1,3,4,1,2,2,1,4,3,3,3,1,1,4,3,3,1,3,2,2,3,2,1,3,3,3,4,2,3,2,3,2,1,1,3,1,4,2,4,4,3,1,4,3,4,2,4,1,4,4,1,4,3,3
1,4,2,4,4,2,4,2,4,3,3,4,1,2,2,3,2,3,4,2,4,2,3,2,3,4,1,2,1,3,1,2,3,3,1,1,2,2,3,3,2,3,3,2,1,3,4,4,4,3,3,3,4,1,3,3,4,3,2,4,3,1,4,3,2,2,3,3,2,4,1,3,3,2,3,2,3,2,1,4,3,3,4,2,1,2,3,1,4,1,4,2,4,4,2,4,1,4,3,4
1,4,1,4,4,2,2,3,4,4,2,3,2,3,3,3,1,3,1,2,1,2,1,2,1,1,1,2,4,4,1,1,4,1,2,3,4,1,3,4,2,3,1,1,1,3,2,3,4,1,3,2,1,3,1,3,1,1,1,1,3,3,4,1,3,2,3,1,2,2,1,2,1,2,2,3,1,2,2,2,2,4,3,1,1,2,2,1,4,4,4,2,3,2,2,2,1,4,4,1
4,4,2,4,2,2,2,1,4,3,2,4,1,1,2,3,2,3,4,2,1,4,2,2,1,4,4,3,4,2,2,1,4,2,2,3,3,2,3,1,1,2,3,2,1,3,2,4,4,3,3,2,3,4,4,3,1,1,3,4,3,1,4,3,2,2,3,2,2,4,2,2,3,3,4,2,4,2,1,1,3,4,2,2,1,1,4,3,4,4,4,2,1,1,4,1,2,3,3,2
1,4,2,4,4,3,4,1,4,3,3,4,1,3,2,3,1,3,4,2,1,2,2,2,1,4,1,3,4,4,4,2,3,1,2,3,1,4,4,2,2,4,1,4,1,1,1,4,1,3,2,3,4,4,1,4,4,3,1,4,2,4,4,4,3,2,3,3,4,4,3,2,2,2,3,3,4,2,3,4,3,4,4,1,1,2,1,2,4,3,4,2,1,1,4,4,2,1,2,3
1,4,2,4,2,2,4,2,4,3,3,4,2,3,2,3,1,3,4,4,2,2,1,2,1,4,1,1,3,4,1,2,3,1,2,3,2,3,2,1,1,3,3,3,1,3,1,3,4,4,3,2,1,4,3,1,1,3,1,4,3,2,4,2,2,3,3,2,4,4,1,2,2,2,3,2,2,2,1,2,3,4,4,2,4,4,3,1,4,2,4,2,2,1,2,4,1,4,3,4
1,4,2,4,2,2,1,3,4,3,3,4,4,1,2,3,2,3,4,2,2,2,1,2,3,1,1,1,1,3,1,2,4,2,2,4,3,1,3,3,1,2,3,4,1,3,1,4,4,1,3,2,1,1,3,3,4,1,2,4,3,1,4,3,2,1,3,3,4,4,1,2,2,2,3,2,2,1,1,1,2,3,4,4,4,4,3,1,4,2,4,2,2,1,4,4,2,4,4,3
1,4,2,4,3,3,3,1,2,2,2,4,4,4,3,4,1,4,4,2,1,2,1,2,3,1,1,1,4,4,1,2,2,1,2,4,3,3,2,3,2,3,1,3,1,4,1,3,4,3,3,2,2,4,3,1,2,3,3,4,4,2,4,4,2,1,3,2,1,4,1,2,3,3,1,2,3,2,1,1,4,4,4,1,2,1,4,1,3,4,4,2,1,3,4,4,2,4,3,4
1,4,2,1,4,3,1,1,4,4,3,2,4,3,3,2,2,2,4,2,1,4,1,2,3,1,1,2,3,1,1,4,3,3,2,4,2,3,1,4,1,1,4,3,1,3,4,2,4,3,4,4,2,4,3,4,4,1,1,4,4,2,2,3,2,3,4,1,4,4,1,4,2,3,3,2,1,2,1,2,3,3,4,2,4,1,2,2,1,3,4,2,2,1,4,4,1,4,3,4
1,4,4,2,2,3,1,3,4,3,3,4,1,1,2,4,1,4,4,2,2,2,3,2,1,4,1,3,2,3,1,1,4,4,1,3,2,4,2,1,1,2,3,1,1,3,3,4,4,1,3,2,2,3,1,3,1,3,1,4,2,4,4,1,2,2,3,2,1,4,2,4,3,2,2,1,3,1,1,4,3,4,4,1,4,1,4,2,3,4,2,3,1,2,3,4,1,1,4,4
1,4,2,3,2,2,4,2,4,3,3,4,1,1,2,1,2,3,3,2,2,1,1,2,3,4,1,3,2,3,3,2,4,1,4,2,3,2,4,3,2,2,3,1,1,3,2,1,4,3,3,1,3,3,3,3,4,3,1,4,3,3,4,4,1,1,3,3,1,1,2,2,1,2,2,3,3,2,1,4,3,3,4,1,4,4,4,4,4,4,2,2,3,4,2,4,2,4,3,2
1,2,2,4,3,1,3,2,4,1,3,4,1,4,3,3,2,4,4,1,2,1,1,2,3,4,1,2,1,1,1,1,1,2,1,4,3,1,3,4,2,2,3,1,1,3,2,1,4,1,2,2,1,4,3,4,4,3,2,1,3,1,4,1,2,1,3,1,1,4,1,4,1,2,3,2,4,2,1,1,3,4,4,1,1,4,3,1,4,3,1,2,1,1,4,1,1,4,3,4
1,4,2,4,2,2,1,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,1,1,3,1,1,4,2,1,3,3,1,3,1,4,2,3,1,1,1,1,3,1,3,3,2,2,1,3,3,4,1,2,4,3,2,1,1,1,1,3,3,3,3,2,2,3,2,3,1,3,2,1,2,2,3,4,2,1,4,3,1,1,1,4,2,1,1,2,4,2,4,2,2
1,3,2,4,4,2,3,2,4,4,3,2,1,1,2,3,2,3,4,1,2,2,1,1,1,4,1,1,1,3,4,2,4,2,4,4,3,4,4,1,1,2,3,4,1,3,4,3,4,3,2,2,2,1,1,2,2,1,1,4,3,1,4,3,2,1,3,2,1,4,2,4,4,2,3,2,2,1,1,4,2,2,4,2,1,4,3,1,4,1,1,2,1,1,2,4,1,4,1,4
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,4,1,1,4,2,2,4,3,1,4,3,1,2,3,2,1,3,2,4,4,3,3,2,1,1,3,3,4,3,2,4,3,2,4,3,2,1,3,4,4,4,1,2,4,2,3,2,1,2,1,2,2,4,4,2,4,4,4,1,4,2,4,2,1,1,2,4,1,4,4,4
1,4,2,4,4,2,4,2,4,2,3,4,1,1,2,3,1,3,4,2,1,2,2,2,1,4,1,3,1,3,1,4,2,2,1,4,3,1,4,3,1,2,3,1,1,3,1,3,4,3,3,2,3,1,3,3,4,1,3,4,3,1,4,4,2,1,3,3,2,4,2,2,2,3,3,2,1,2,1,2,3,3,4,2,4,4,3,3,4,2,4,2,1,1,4,2,2,4,3,1
1,4,2,4,3,2,2,2,4,3,3,4,1,1,2,1,1,3,2,2,2,2,1,2,3,1,1,3,1,3,3,1,3,2,2,3,3,2,3,3,2,1,3,2,1,4,1,3,4,3,2,1,1,1,3,4,1,1,4,1,4,1,2,1,2,4,3,4,2,4,4,4,1,2,3,2,3,1,3,2,2,4,4,1,3,4,3,1,4,3,4,2,1,1,1,4,3,2,4,3
1,4,2,4,4,2,2,2,4,3,3,4,1,1,2,4,1,3,4,2,1,2,1,2,1,4,1,3,1,1,1,1,3,2,1,4,3,4,4,3,1,2,3,2,1,3,1,4,4,3,3,1,4,4,1,2,1,1,2,4,3,1,4,4,2,1,3,4,4,4,4,3,2,2,3,2,1,1,1,2,3,4,4,3,4,2,3,1,4,4,4,2,2,1,4,4,1,4,2,1
1,4,2,2,4,3,2,2,2,3,3,4,3,3,2,3,1,4,4,2,1,2,4,2,3,1,2,3,2,4,1,1,3,3,2,4,3,1,4,1,2,2,3,3,1,3,4,3,4,2,1,2,4,4,3,3,1,3,1,4,3,4,4,3,2,2,3,3,2,4,3,4,3,2,3,3,4,2,1,2,3,3,4,3,4,2,3,1,1,2,4,3,1,1,4,2,2,4,3,3
1,4,1,1,3,3,1,3,4,1,2,2,4,1,2,3,2,4,4,2,2,3,1,4,3,4,1,2,3,4,1,2,2,2,1,4,4,3,4,1,2,2,3,3,1,4,4,4,3,1,3,2,1,3,3,2,1,4,1,4,2,1,4,4,1,1,3,3,2,4,2,4,3,2,3,2,3,2,1,4,3,4,4,1,1,3,4,1,4,4,3,2,3,3,4,4,1,4,3,2
1,4,2,1,4,1,1,3,2,3,3,4,4,3,1,2,2,4,4,2,1,2,4,2,1,4,3,3,2,1,1,2,4,1,2,4,4,4,4,1,2,2,3,2,4,3,2,4,4,3,2,2,3,4,3,3,1,1,2,4,3,1,4,3,2,4,3,2,4,4,4,2,3,3,3,2,2,2,1,4,4,2,4,1,4,4,3,1,1,4,4,2,1,1,4,4,1,1,4,4
1,4,2,4,4,3,4,2,4,3,3,4,1,1,2,3,2,3,1,2,2,2,4,2,1,4,1,3,1,3,1,1,1,2,1,4,3,1,4,3,1,2,3,2,1,2,3,3,4,1,3,4,1,1,3,4,4,1,2,4,4,4,4,3,2,1,3,4,4,4,3,3,1,2,3,2,3,2,1,1,3,1,4,2,1,1,3,4,4,2,4,2,3,1,2,4,2,4,3,4
1,4,2,4,4,2,4,2,4,3,3,2,1,1,2,3,1,3,2,2,1,2,1,2,2,4,1,3,1,3,1,4,1,2,2,4,3,4,4,3,2,2,3,3,1,3,1,4,4,3,4,4,3,1,3,3,3,3,2,4,3,2,4,4,2,1,3,3,4,3,1,2,1,1,3,1,3,1,1,1,2,4,4,2,4,4,3,1,4,1,4,2,3,1,2,3,1,4,3,4
1,4,2,3,4,1,2,3,4,3,3,1,2,1,1,3,2,3,4,3,2,2,4,2,2,4,1,2,1,4,4,3,3,1,4,2,3,4,3,4,2,2,3,4,1,3,2,4,4,3,2,1,3,4,3,2,1,1,2,4,4,1,4,3,1,4,3,3,2,4,2,2,4,4,3,2,3,2,1,4,4,3,4,3,4,1,3,2,1,4,4,4,2,4,2,4,2,1,4,4
1,3,2,2,4,3,4,2,4,1,3,4,4,3,3,3,1,1,1,2,1,4,1,2,1,1,1,2,4,3,2,1,3,3,2,4,3,1,3,4,3,4,3,1,1,3,1,1,4,3,3,2,1,4,3,3,4,3,2,4,3,3,4,4,2,2,3,2,3,4,1,3,1,4,3,2,1,2,3,2,3,1,4,1,4,1,4,1,4,4,3,4,1,1,4,3,1,3,3,4
4,4,2,4,4,3,2,2,4,2,2,4,2,1,2,3,2,3,1,2,2,4,4,2,3,4,1,3,1,3,3,1,4,1,3,1,3,4,1,1,2,2,1,2,1,3,2,4,4,3,3,2,4,1,3,3,4,3,4,2,4,4,4,4,2,2,3,3,4,4,1,2,3,2,3,2,1,2,1,4,3,3,2,4,2,2,4,1,4,3,3,2,1,4,2,4,1,4,1,1
2,4,2,4,2,2,4,2,4,3,3,4,2,1,2,3,1,3,4,2,2,4,1,2,1,3,1,3,1,2,1,1,4,2,1,4,2,4,3,3,1,2,3,2,1,3,1,3,4,3,3,2,1,4,1,3,1,1,2,4,3,4,4,4,2,1,3,3,4,3,1,2,1,2,3,1,3,2,1,2,4,2,4,2,4,4,3,1,4,3,4,2,1,1,4,4,1,3,3,4
2,4,2,4,4,1,3,4,4,1,3,4,4,1,3,3,2,3,4,3,1,2,4,2,3,1,1,2,4,4,4,2,4,3,4,1,3,4,3,3,3,2,2,3,1,3,4,3,3,3,3,2,2,4,2,3,2,2,1,4,1,3,4,4,3,2,3,2,4,1,3,3,3,4,3,2,2,2,1,NA,3,2,4,1,4,2,4,2,4,4,3,2,3,2,2,4,2,3,3,2
1,4,2,4,2,2,4,2,4,3,3,4,4,1,2,3,1,4,4,3,2,2,1,2,1,4,1,3,1,4,1,1,4,1,1,4,3,4,4,4,1,2,3,2,1,2,4,4,4,3,2,2,1,4,3,3,1,3,2,4,3,4,4,3,1,3,3,2,4,4,2,2,2,3,3,2,2,2,1,4,3,3,4,2,4,4,3,1,1,3,4,2,3,1,2,3,1,4,3,4
1,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,2,2,4,2,1,2,1,2,4,4,1,3,1,4,1,1,4,3,1,4,3,1,4,4,1,2,3,2,1,3,2,4,4,3,3,2,3,1,3,2,3,1,2,4,3,1,4,2,3,2,3,2,4,4,3,4,3,3,3,2,1,2,1,2,2,2,4,2,4,4,3,3,4,1,4,2,3,1,4,2,1,4,3,2
1,4,2,4,4,2,1,2,4,3,3,2,1,1,2,3,1,3,4,2,3,2,1,2,3,4,1,3,1,3,1,1,4,4,1,1,3,1,3,1,1,2,3,2,1,3,2,4,4,3,3,2,1,1,3,3,4,1,2,4,3,4,4,3,2,1,3,3,4,4,2,2,1,2,3,3,3,2,1,2,3,3,4,2,4,4,3,1,4,1,4,2,2,1,4,3,1,4,2,2
4,4,2,3,4,1,3,1,4,3,3,2,1,3,2,4,2,3,4,2,2,2,2,2,1,4,1,1,4,4,1,2,4,2,2,4,3,1,4,1,1,2,3,2,1,3,1,4,4,3,3,2,3,4,3,4,1,3,2,4,4,3,4,3,2,2,3,2,1,4,1,1,1,4,3,1,1,2,1,4,2,3,2,3,1,2,3,1,4,2,4,2,3,1,4,4,1,4,2,2
1,4,3,4,2,2,2,1,4,3,3,4,1,2,2,3,2,4,4,2,2,2,1,2,1,4,1,3,1,3,1,2,4,2,2,3,3,1,3,4,1,2,3,2,1,3,2,4,4,3,3,2,1,1,3,3,4,1,2,4,1,4,3,2,2,1,3,3,4,4,1,2,2,2,3,2,2,2,1,2,3,4,4,1,4,4,2,1,4,2,1,2,1,1,2,2,1,4,3,4
2,4,2,1,4,1,4,1,1,4,3,4,1,1,2,3,1,4,4,2,1,2,4,2,3,1,3,3,3,4,1,1,4,4,2,4,3,3,4,3,2,2,1,2,1,2,4,4,4,2,3,2,3,4,3,4,1,3,3,4,4,3,4,4,1,4,3,3,4,4,1,2,4,3,3,3,2,2,1,4,3,4,4,4,1,1,4,4,4,3,4,1,3,3,2,4,1,4,3,2
4,4,2,4,4,2,4,2,1,2,3,4,1,1,2,2,1,1,4,2,3,2,1,2,3,1,1,3,1,1,1,1,4,1,2,1,3,2,3,1,2,2,3,3,1,3,1,3,4,3,3,2,4,4,3,2,1,3,2,4,3,2,4,2,2,1,3,3,3,4,1,2,3,2,3,2,3,1,1,2,3,3,3,4,4,4,3,1,4,1,4,2,1,1,4,4,1,4,2,4
1,4,2,4,2,2,2,3,NA,3,3,2,1,1,2,3,1,3,4,4,1,2,1,1,3,4,1,3,1,4,1,1,4,2,2,3,3,4,3,3,2,2,3,2,1,3,1,3,4,1,2,1,1,1,3,4,4,3,2,4,2,4,4,2,2,4,3,1,3,4,1,3,3,2,3,3,2,1,1,2,3,3,4,1,4,4,3,1,4,4,4,2,2,1,4,4,1,4,2,4
1,4,2,4,2,2,2,3,4,3,3,4,1,1,2,3,1,3,2,2,2,2,1,2,3,1,1,1,1,3,1,1,4,2,2,1,3,4,4,3,1,2,3,2,1,3,1,3,4,3,3,2,3,1,3,3,4,1,2,4,3,2,4,3,2,1,3,3,4,4,1,2,2,2,3,2,2,2,4,4,2,3,4,4,4,4,3,1,4,4,4,2,3,1,2,1,3,4,3,2
1,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,4,3,3,1,4,3,1,2,3,2,1,3,1,4,4,1,2,2,1,1,3,2,4,3,2,4,3,3,4,3,1,1,3,4,4,4,1,4,1,2,3,2,3,2,1,2,3,3,4,2,4,4,3,1,4,4,4,2,1,1,4,4,1,4,2,4
1,4,2,2,2,3,3,2,4,3,3,2,1,1,2,2,3,3,4,2,2,2,2,2,1,4,1,1,4,3,1,4,4,2,4,3,3,4,4,3,1,2,3,2,1,3,2,4,4,3,3,2,4,4,3,2,3,1,2,4,3,3,4,3,2,2,3,3,2,4,1,2,2,2,3,2,3,2,1,2,2,3,4,1,4,4,3,1,4,4,4,2,3,4,2,4,1,4,3,2
1,4,2,4,2,2,4,3,4,3,3,4,1,1,2,3,1,3,4,1,1,2,1,2,1,4,1,3,1,3,1,1,4,3,2,1,3,1,3,1,1,2,3,4,1,1,1,4,4,3,3,2,1,1,3,3,4,3,2,4,3,4,4,1,2,1,3,3,3,4,1,2,2,2,3,2,4,2,1,1,2,3,2,2,2,4,3,1,4,1,4,2,1,1,2,4,1,4,3,4
2,4,2,1,4,2,4,2,4,3,3,4,1,3,2,3,1,3,4,2,4,2,1,2,4,4,1,1,3,2,1,1,4,2,4,3,3,4,3,4,1,2,1,3,1,3,3,4,4,3,2,1,3,4,3,2,4,1,2,4,3,1,4,1,3,1,1,2,2,3,2,4,1,2,3,2,1,2,1,4,3,4,4,2,4,4,3,2,3,3,4,2,1,1,2,2,2,4,3,2
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,3,1,2,3,2,1,3,1,4,4,3,3,2,4,4,3,3,4,1,2,4,3,2,4,2,2,1,3,3,4,4,1,2,2,2,3,2,3,2,1,4,3,3,4,2,4,4,3,1,4,3,4,2,1,1,2,2,1,4,2,2
1,4,2,4,4,2,4,2,4,3,3,4,4,1,2,4,1,2,4,3,2,2,1,2,1,4,1,3,1,4,1,1,3,4,1,4,3,4,4,4,2,2,3,4,1,3,2,1,4,1,2,2,1,1,1,3,4,3,2,4,3,4,4,1,2,2,3,3,1,4,2,2,1,2,3,2,3,2,1,4,3,4,4,4,1,2,4,1,1,1,4,2,1,1,4,4,1,4,3,2
1,4,2,4,4,2,4,2,4,3,3,2,1,1,3,3,1,1,1,2,1,2,2,2,1,4,1,3,4,1,1,2,4,2,1,3,3,3,3,1,4,2,3,1,1,2,1,4,4,1,2,2,4,1,3,3,4,NA,2,4,4,1,4,2,2,1,3,3,4,4,1,2,1,2,3,2,3,2,1,2,3,3,4,2,4,4,3,1,4,3,4,2,3,1,2,4,1,4,3,2
1,4,2,4,3,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,3,2,1,2,1,2,2,3,3,3,4,1,3,3,1,4,3,1,3,4,2,2,3,2,1,3,2,4,4,3,2,2,1,4,3,3,4,1,2,4,3,3,4,4,2,3,3,3,1,4,1,2,2,2,3,2,3,2,1,4,3,3,4,4,4,4,3,1,4,3,4,2,1,1,2,4,2,4,3,4
1,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,2,2,1,4,3,4,3,4,1,2,3,4,1,3,2,4,4,1,3,1,1,4,3,3,4,1,2,4,3,4,4,3,2,1,3,3,1,4,4,2,4,2,3,2,1,3,1,4,3,4,4,2,2,4,4,1,4,4,4,2,1,1,2,4,1,4,3,3
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,1,4,3,1,4,3,2,2,3,2,1,3,1,4,4,3,3,2,1,1,3,3,4,3,2,4,3,2,4,3,2,1,3,2,1,4,2,1,3,2,3,2,3,2,1,1,2,2,4,2,4,2,3,1,4,1,1,2,3,1,2,4,1,4,3,2
1,4,2,4,4,2,2,2,4,3,3,4,1,1,2,3,2,3,4,2,2,2,1,2,1,4,1,3,1,3,3,1,4,1,1,1,4,4,4,4,1,2,1,2,1,3,2,4,4,3,3,2,1,4,3,3,1,1,2,4,3,2,4,3,2,2,3,3,1,4,1,2,3,2,3,2,3,2,1,4,3,2,4,2,4,4,3,1,4,1,4,2,3,1,4,4,1,4,3,1
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,2,1,3,1,3,1,1,4,2,2,4,3,1,3,3,1,2,3,2,1,3,1,3,4,1,2,2,1,1,3,3,4,1,2,4,3,1,4,2,2,1,1,3,4,4,1,2,2,2,3,2,3,1,1,2,3,2,4,1,4,2,3,1,4,3,4,2,3,3,2,2,1,4,4,2
1,4,2,4,2,1,4,2,1,1,3,2,1,2,2,3,2,3,NA,3,1,2,2,2,3,4,1,3,4,4,3,4,3,3,1,3,2,4,1,1,2,2,3,2,1,3,1,4,4,2,2,2,3,4,1,3,1,1,1,4,4,3,4,1,3,4,3,4,2,4,2,4,3,3,3,1,4,1,3,1,4,3,4,1,4,4,4,4,1,4,3,2,4,3,4,4,3,4,3,2
1,4,2,4,4,2,2,3,1,3,3,4,1,1,3,1,2,3,4,1,1,2,1,2,1,4,1,3,1,3,1,4,4,4,2,3,3,1,3,3,2,2,3,3,1,3,2,4,4,1,3,2,1,4,3,3,2,1,2,4,3,1,4,4,2,1,3,4,3,4,1,2,3,2,3,2,3,2,1,2,2,3,4,2,4,4,3,1,4,3,1,2,3,4,2,4,1,4,4,4
1,4,2,4,4,2,1,2,4,1,3,4,1,1,2,3,2,3,4,1,2,2,1,2,1,4,1,3,2,3,1,1,4,2,2,4,3,4,4,3,1,2,3,1,1,3,1,4,4,3,3,2,3,1,3,3,2,3,2,4,3,1,4,3,2,1,3,2,3,4,4,2,1,3,3,2,3,1,1,2,3,3,4,2,2,2,3,1,4,1,4,2,3,1,2,4,1,4,3,2
1,4,2,4,1,4,2,3,1,2,3,1,3,NA,2,3,1,4,4,2,3,2,1,2,1,1,1,1,4,4,1,2,4,2,4,2,2,3,3,3,1,3,3,2,4,3,4,3,2,3,3,2,4,4,1,1,3,1,1,4,3,3,4,4,3,4,3,1,4,4,4,3,3,2,3,2,4,1,1,1,3,4,2,2,4,4,4,3,4,3,3,2,1,1,2,4,2,1,3,3
1,4,2,4,4,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,4,4,1,1,4,2,2,4,3,2,3,3,1,1,3,1,1,3,1,4,4,1,3,2,1,1,3,3,4,3,2,4,3,4,4,1,2,1,3,3,3,3,4,2,1,2,3,2,3,1,1,4,3,3,4,2,4,4,3,1,1,3,4,2,3,2,1,2,1,4,4,2
1,4,2,4,2,2,3,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,3,1,3,1,4,1,2,2,4,1,3,3,1,3,1,2,2,3,1,1,1,1,3,4,3,2,2,1,4,3,2,1,3,2,4,3,3,4,3,2,1,3,3,4,4,3,4,4,2,3,2,3,2,3,1,2,3,4,2,4,1,3,1,4,3,4,2,3,1,2,2,1,4,2,4
1,4,2,4,2,2,2,2,1,3,3,4,1,1,2,3,2,3,4,2,1,1,1,2,3,2,1,3,1,3,1,2,2,3,2,4,3,4,4,4,2,2,3,2,1,3,1,4,4,1,4,2,1,4,1,4,1,1,2,4,3,4,4,2,3,2,3,2,4,4,4,2,3,2,3,2,3,1,1,1,4,3,4,2,1,4,3,1,4,4,4,2,1,1,2,4,1,4,4,4
1,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,4,2,1,1,1,2,1,3,1,1,4,2,2,1,3,4,3,3,1,2,3,2,1,3,2,4,4,3,2,2,4,1,3,4,4,1,2,4,3,2,4,2,2,1,3,3,3,4,1,2,4,2,3,2,3,2,1,2,3,3,4,2,4,4,3,1,4,4,4,2,1,1,2,4,1,4,3,4
2,4,2,3,2,2,3,2,4,3,3,4,1,1,2,3,1,2,4,2,2,2,1,2,1,4,1,1,1,3,1,1,4,1,2,3,3,1,4,3,1,2,4,2,1,3,1,4,4,3,3,2,1,4,3,3,4,1,1,2,3,4,4,3,2,1,3,3,4,1,3,2,4,2,3,2,4,1,1,2,4,2,4,3,1,4,3,1,4,2,4,2,1,1,4,4,2,4,3,4
1,4,2,4,2,4,3,3,2,3,3,4,1,3,2,3,1,3,4,3,2,2,1,2,1,4,1,2,1,4,1,1,2,2,2,1,2,1,3,1,1,2,3,2,1,3,1,4,4,3,4,2,1,1,3,2,1,3,2,4,3,3,4,3,2,1,3,4,3,4,2,2,1,2,3,2,3,2,1,2,4,3,4,2,4,1,3,1,4,1,4,2,3,1,2,4,2,4,2,4
1,4,2,4,4,3,4,2,4,3,3,4,1,1,2,3,2,3,4,2,2,2,1,2,1,1,1,2,1,1,1,4,4,3,2,4,3,1,4,2,1,2,3,2,1,3,2,4,4,3,3,2,1,3,3,2,1,1,2,4,3,2,4,2,2,1,3,2,2,4,1,2,3,2,3,2,3,2,1,2,3,3,4,2,4,4,3,1,4,1,4,2,3,1,2,4,1,4,3,4
1,4,2,3,4,3,2,2,1,3,3,4,2,1,2,3,2,3,4,2,2,2,1,2,1,4,1,3,1,3,1,2,4,4,2,1,3,1,3,3,1,2,3,2,1,3,2,4,4,3,3,2,1,1,3,3,4,1,2,4,3,2,4,3,3,1,3,3,1,4,1,2,2,2,3,2,4,2,1,2,3,4,4,2,4,4,3,1,4,1,4,2,2,1,4,4,3,4,3,4
4,4,2,1,3,2,3,4,4,3,3,4,1,1,2,2,2,3,4,2,2,2,1,2,4,2,3,2,2,4,1,2,2,2,3,4,1,4,2,3,1,2,3,4,1,1,2,4,4,2,2,1,1,4,3,4,4,3,2,4,3,4,4,2,2,1,3,3,4,4,1,1,1,2,3,2,1,1,1,4,3,4,4,2,4,4,3,4,1,4,3,2,1,1,2,4,2,4,3,3
1,4,2,4,2,2,4,2,1,3,3,4,1,1,2,3,1,3,4,1,2,2,1,4,2,2,1,3,1,3,1,2,3,1,2,1,3,1,3,2,1,3,3,3,1,3,1,3,4,3,3,2,1,4,1,2,4,3,2,4,3,3,1,4,1,2,3,2,2,4,1,2,4,2,3,3,4,1,1,2,3,3,4,2,1,4,3,2,2,3,4,3,1,1,2,2,1,3,3,4
1,4,2,4,2,1,2,3,4,3,3,4,4,3,2,3,1,3,4,2,2,2,1,2,3,4,1,1,1,3,3,1,3,3,1,4,3,4,4,3,2,2,3,1,1,3,1,3,4,3,2,2,1,4,1,3,1,1,2,4,3,3,4,1,2,4,3,1,2,4,4,2,1,2,3,3,2,1,1,4,3,3,4,2,4,4,4,1,4,2,4,2,1,1,4,4,1,1,3,4
1,4,2,4,4,2,4,2,4,3,3,2,3,1,2,3,1,4,4,2,2,2,1,2,1,4,1,3,1,3,1,4,4,4,2,4,3,1,4,1,1,2,3,2,1,3,1,3,4,3,3,2,1,1,3,4,3,1,2,4,3,3,4,3,2,3,3,1,3,4,1,2,2,2,3,2,3,2,1,2,3,3,4,2,4,2,3,1,1,4,4,2,3,1,2,2,1,4,4,4
3,4,2,1,2,2,4,2,4,4,3,4,2,1,2,4,2,1,4,1,3,2,1,2,1,4,1,3,3,1,3,4,1,2,2,4,3,3,2,1,1,2,3,4,1,3,1,4,4,3,1,1,1,4,3,3,4,3,2,4,NA,4,2,2,4,2,1,3,2,2,4,1,2,2,2,3,2,4,2,1,4,4,4,4,4,4,2,4,1,4,3,4,2,1,1,2,4,1,4,1
1,4,2,2,3,2,3,2,4,3,3,1,1,1,2,3,1,3,4,1,2,2,1,2,3,4,1,3,1,3,1,1,2,2,2,3,3,1,3,3,1,2,3,3,1,3,1,4,4,3,3,2,3,1,3,3,4,3,2,4,3,1,4,3,2,1,3,2,1,4,1,3,1,2,3,2,1,2,1,1,2,2,4,2,1,1,3,1,4,4,1,2,1,1,2,2,1,4,3,4
1,4,2,4,2,3,3,2,4,3,3,4,1,1,2,3,1,3,2,2,2,2,1,1,1,4,1,3,1,3,1,1,3,3,2,2,3,2,4,3,1,2,3,4,1,1,1,3,4,4,2,2,1,4,3,2,4,1,2,4,2,1,4,3,2,2,3,4,3,4,3,4,4,2,3,2,2,2,1,1,2,2,4,2,2,4,3,1,4,3,4,2,3,3,2,4,1,4,3,4
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,2,3,4,2,2,2,1,2,1,4,1,3,1,4,1,1,4,2,2,4,3,1,4,3,1,2,3,2,1,3,2,3,4,3,2,2,1,1,3,2,1,3,2,4,3,1,4,3,2,1,3,3,1,4,1,2,1,2,3,2,3,2,1,2,2,1,4,2,4,4,3,1,4,3,4,2,3,1,4,4,2,4,2,2
NA,4,2,4,2,3,1,2,4,4,3,4,1,1,2,2,2,4,4,2,2,2,1,2,1,4,1,1,4,3,1,1,3,2,2,4,3,1,3,1,1,2,3,1,1,4,1,4,4,3,3,2,2,4,3,3,4,1,2,4,3,2,4,3,2,4,3,3,4,4,1,4,3,1,2,2,3,2,1,2,3,4,4,2,4,4,3,2,4,3,3,4,4,3,4,4,1,4,4,1
1,4,2,4,4,3,4,1,1,3,3,4,2,3,2,4,2,3,4,2,3,2,4,2,1,4,1,2,1,4,1,3,4,2,2,3,3,4,4,3,2,2,4,4,1,3,2,3,4,3,2,2,3,4,3,3,2,1,2,4,4,4,4,3,2,1,3,3,1,4,4,2,1,2,3,2,1,1,1,1,2,3,4,2,4,2,3,3,4,3,4,2,1,1,4,4,1,4,4,2
1,4,2,4,2,2,4,2,4,3,3,4,2,1,2,3,2,3,4,2,2,2,1,1,1,4,1,1,1,3,1,1,3,2,1,3,1,4,3,1,1,2,3,1,1,3,1,3,4,1,2,2,1,4,3,4,1,1,2,4,4,1,4,1,2,2,3,4,2,3,3,4,3,2,3,1,3,2,2,2,3,3,4,4,4,4,3,2,4,4,3,2,1,1,2,2,3,4,2,2
1,4,2,4,4,2,1,2,4,3,3,4,1,3,2,3,1,3,4,2,2,2,1,1,1,3,1,3,1,2,1,1,4,2,2,3,4,1,4,4,2,2,3,2,1,3,1,4,4,3,3,1,4,1,3,2,4,1,2,4,1,3,4,2,2,2,3,4,2,4,4,2,3,3,3,2,3,1,1,2,2,3,4,1,1,4,3,2,1,1,4,2,3,1,4,4,1,4,4,1
1,4,2,4,2,2,2,3,4,3,3,4,1,1,2,1,1,3,4,2,2,2,1,2,1,1,1,1,1,4,1,1,4,4,4,3,3,4,3,1,2,1,3,4,1,3,1,4,4,3,3,2,4,4,3,3,4,1,2,4,2,3,4,2,2,1,3,3,4,4,2,2,4,2,3,2,2,1,1,4,3,3,4,1,4,4,3,1,4,2,4,2,1,1,2,4,1,4,4,2
1,4,2,4,3,2,2,2,4,3,3,3,1,1,2,3,1,3,4,1,2,2,1,2,3,1,1,1,4,4,1,4,1,2,1,2,3,4,4,3,2,2,3,4,1,4,1,3,4,3,2,2,1,1,3,1,4,3,2,4,3,4,4,1,3,2,3,3,1,4,3,2,3,3,3,1,1,2,1,4,3,3,4,2,4,4,3,4,4,3,4,2,1,1,4,4,2,1,4,4
1,4,2,4,4,2,4,3,2,3,3,4,4,1,3,3,2,3,4,3,2,2,3,4,4,2,1,3,2,4,1,4,3,1,2,1,3,4,4,3,2,2,2,1,4,3,1,1,4,3,2,2,3,4,2,2,3,3,4,4,2,1,1,3,2,2,3,2,4,4,2,4,1,2,3,2,3,2,1,4,3,4,4,2,3,4,4,2,4,3,4,2,2,1,2,4,1,4,4,1
1,4,2,4,4,1,2,1,1,4,3,2,1,1,2,3,1,3,4,1,2,2,1,2,1,4,1,3,1,1,1,4,4,2,2,3,3,4,3,4,1,2,3,4,1,3,1,3,4,1,2,2,3,4,3,4,1,1,2,4,4,1,4,3,2,2,3,3,4,4,4,2,3,2,3,2,1,1,1,4,3,3,4,4,4,1,3,1,4,4,1,2,1,1,4,4,2,4,4,2
1,4,2,4,2,2,4,1,4,3,3,4,1,1,2,3,2,3,4,2,2,4,1,1,2,1,1,3,1,4,1,1,2,2,1,3,3,4,4,1,1,1,3,2,1,3,1,4,4,1,3,2,1,4,3,3,4,1,2,4,3,2,4,2,2,1,3,2,3,4,4,4,1,2,3,2,3,1,1,2,3,4,4,2,2,4,3,3,4,4,4,2,1,1,2,4,2,4,3,4
1,4,2,4,2,1,2,2,4,3,3,2,2,3,2,4,1,4,2,3,1,2,4,1,1,4,1,3,4,4,4,1,2,1,3,1,4,4,3,4,2,2,3,1,1,3,2,1,4,2,3,2,4,4,1,3,4,3,2,4,3,2,4,1,2,1,3,1,4,1,4,2,3,3,3,2,2,2,1,1,3,3,3,2,4,1,3,1,2,3,4,2,1,1,2,2,1,4,2,2
1,4,2,4,2,2,3,2,4,3,3,4,1,1,2,3,1,3,4,3,2,2,1,2,1,4,1,3,1,1,1,2,4,2,2,4,3,1,4,4,1,2,3,2,1,4,1,3,4,3,3,2,4,1,3,4,1,3,2,4,3,3,4,3,2,2,3,2,2,4,1,2,1,2,3,2,4,2,1,2,2,4,4,2,4,4,3,1,4,3,4,2,1,1,2,2,1,4,2,2
1,4,2,3,4,1,2,1,4,2,3,4,4,1,3,3,2,4,4,3,1,3,1,2,1,1,1,3,4,1,4,1,1,1,2,3,1,4,4,3,1,2,3,4,1,3,2,4,4,1,2,1,1,4,3,4,4,1,3,4,3,4,4,2,3,1,3,3,2,4,3,1,1,2,3,2,4,2,1,4,4,3,4,4,4,1,4,1,4,3,3,2,1,1,2,4,1,4,3,4
1,4,2,2,4,2,4,2,4,3,3,4,1,1,3,3,1,3,4,2,2,2,1,2,1,4,3,3,1,4,1,1,4,2,4,4,3,1,3,4,1,2,3,4,1,4,4,4,4,3,3,2,4,2,3,3,4,3,2,4,3,1,4,3,1,3,3,3,3,4,1,2,1,2,3,1,3,2,1,2,3,2,4,2,4,4,3,1,4,2,4,2,1,1,2,4,1,4,1,4
1,4,2,4,2,2,4,2,4,3,3,4,2,1,2,4,1,3,4,2,2,1,1,2,3,4,3,3,4,3,1,1,2,3,1,3,1,4,3,4,1,2,3,3,1,4,1,3,4,1,3,3,4,1,3,4,2,3,2,4,3,3,4,1,2,2,3,3,4,4,3,2,1,2,3,2,1,2,4,3,2,2,4,2,2,4,3,1,4,4,4,2,1,1,4,2,2,4,4,2
1,4,2,4,2,3,4,3,2,4,3,4,1,1,2,3,1,3,4,2,1,2,2,2,1,4,1,3,1,3,1,2,4,3,2,4,3,1,3,3,1,2,3,2,1,3,2,4,4,3,3,2,4,1,3,3,1,1,2,4,3,4,4,2,2,1,3,2,4,4,2,2,1,2,3,2,4,2,1,4,3,3,3,4,4,3,3,1,4,2,3,2,1,1,2,4,1,4,3,3
1,4,2,4,2,2,4,2,1,3,3,4,2,3,2,3,2,3,4,2,2,2,4,2,1,1,1,1,1,4,1,1,4,2,4,2,3,4,2,2,2,3,3,3,4,3,2,3,4,3,2,2,3,4,1,4,3,3,2,4,4,2,4,2,2,2,3,2,3,4,4,3,3,2,3,3,2,1,1,2,3,3,4,3,4,4,3,3,3,4,4,2,1,1,4,4,1,4,4,1
1,4,2,4,4,4,2,3,2,4,3,2,1,4,2,4,2,4,4,4,1,2,4,3,3,4,2,2,2,4,1,1,2,4,4,2,3,1,3,1,1,2,3,4,3,1,2,3,4,1,2,2,3,4,1,1,1,3,1,4,3,4,4,3,3,2,3,4,2,1,1,4,4,4,3,3,3,1,3,1,3,1,4,4,4,4,4,2,4,4,3,2,1,1,2,4,2,4,2,3
1,4,2,4,4,2,4,2,4,4,3,2,2,1,2,4,2,3,4,2,1,2,2,2,1,4,1,3,2,3,1,4,2,2,1,4,4,4,3,1,2,4,3,3,1,3,1,4,4,3,3,4,3,4,3,3,2,3,2,4,3,1,4,3,1,1,3,3,1,4,3,2,1,2,1,2,3,2,1,4,4,3,4,2,4,4,3,1,1,1,1,2,3,1,4,4,1,3,1,4
1,4,2,4,4,2,4,3,4,3,3,4,1,1,2,3,2,3,4,2,2,2,4,2,1,2,1,2,1,2,1,1,4,2,2,3,3,4,3,1,1,2,3,2,1,3,1,3,4,1,2,2,4,1,3,3,1,1,2,4,3,2,4,2,2,1,3,2,4,4,1,2,3,2,3,2,1,2,1,2,3,3,4,2,4,4,3,4,4,4,1,2,3,1,4,4,1,4,4,4
2,4,2,1,4,2,4,3,4,3,3,4,1,1,2,4,2,3,4,1,2,2,2,2,3,2,1,1,2,4,1,1,2,1,1,4,3,4,4,1,2,3,3,4,1,3,1,4,4,1,3,2,1,4,3,3,4,1,2,4,3,1,4,4,2,1,3,4,4,4,3,4,1,2,3,2,2,2,1,2,3,4,4,2,2,2,1,1,4,4,4,2,1,4,2,NA,2,4,3,4
1,4,2,4,2,3,4,2,1,3,3,4,1,1,3,4,2,3,4,2,2,2,2,2,4,4,3,3,2,4,1,1,2,2,2,1,2,4,3,3,2,3,3,4,1,3,1,3,4,1,4,3,1,4,3,1,4,4,2,4,3,1,4,2,2,2,1,4,4,4,2,4,1,2,3,2,2,1,1,4,3,4,4,1,2,4,3,3,4,4,4,2,4,3,2,4,2,4,2,2
1,4,2,4,2,2,4,1,1,2,3,4,4,1,3,3,1,1,2,2,3,2,1,2,3,2,3,1,2,4,1,1,3,1,2,3,3,4,3,3,1,3,3,4,1,3,2,3,4,3,3,2,1,4,3,3,1,3,1,4,3,1,1,4,2,2,3,3,3,3,1,2,2,2,3,1,3,2,1,2,3,3,2,2,4,4,3,1,4,1,4,2,3,2,2,3,3,2,4,3
1,4,2,4,4,2,3,2,4,2,3,4,1,1,2,4,1,3,4,1,1,2,1,2,1,3,1,3,4,4,1,4,4,2,1,4,3,4,4,4,2,2,3,1,4,3,2,3,4,2,4,2,1,4,3,3,4,1,3,4,3,1,4,1,2,1,3,2,3,4,4,2,2,2,3,2,3,1,1,4,3,4,4,4,4,4,3,1,4,1,3,2,1,1,2,4,4,4,2,3
1,4,2,4,4,2,1,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,3,1,1,1,3,1,1,4,3,4,1,3,2,3,3,1,2,1,1,1,3,2,3,4,3,3,2,1,4,3,2,3,3,2,4,3,3,4,3,2,1,3,3,1,4,1,2,4,2,3,2,3,2,1,2,2,3,4,2,4,2,3,1,4,1,4,2,4,4,2,4,1,4,3,4
1,4,2,4,4,2,4,2,4,3,3,4,1,2,3,3,1,4,3,2,3,2,1,2,3,1,3,2,1,4,1,2,1,3,1,3,2,4,4,2,1,3,1,2,2,3,1,3,4,3,4,3,4,4,1,1,1,1,3,4,2,2,1,1,2,2,3,4,4,4,1,4,1,2,2,1,2,2,1,4,3,3,4,4,4,1,4,2,4,4,4,2,3,1,3,4,1,4,NA,4
1,4,2,4,2,2,4,1,4,3,3,4,1,1,2,3,1,3,4,2,1,2,1,2,1,1,1,3,2,3,1,1,4,4,4,2,3,1,4,4,1,2,3,4,1,3,2,4,4,3,2,2,1,1,3,3,4,1,2,4,3,4,4,1,2,1,3,3,1,4,1,2,1,2,3,2,2,1,1,3,3,2,4,2,2,4,3,2,4,4,3,2,1,1,4,4,3,4,4,3
1,4,2,4,2,2,1,1,4,3,2,4,1,1,2,3,1,3,4,2,2,2,4,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,1,1,2,1,2,1,3,4,3,4,3,3,2,1,4,3,2,4,3,2,4,3,3,4,3,2,1,3,3,1,4,1,2,3,2,3,2,1,2,1,4,3,4,4,2,4,4,3,1,4,1,4,2,2,1,3,4,2,4,2,2
1,4,2,4,2,2,3,2,4,3,3,4,2,1,2,3,2,1,4,3,2,2,1,2,2,4,1,3,1,3,1,1,4,2,2,2,3,1,4,3,1,3,3,4,1,3,1,4,4,3,3,2,1,1,3,2,4,1,2,4,3,4,4,3,2,1,3,3,4,4,1,2,2,2,3,2,2,2,1,2,2,3,4,2,4,4,3,1,4,1,4,2,3,1,1,2,2,4,3,2
1,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,3,1,2,3,2,1,3,1,3,4,3,3,2,4,1,3,3,4,1,2,4,3,1,4,3,2,1,3,4,4,4,1,2,2,2,3,2,3,2,1,2,2,3,4,2,4,4,3,1,4,1,4,2,3,3,2,4,1,4,4,4
1,4,2,4,2,2,3,2,4,3,3,4,1,1,2,3,1,3,4,3,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,3,1,2,3,2,1,3,3,4,4,3,3,2,1,1,3,2,4,3,2,4,3,2,4,3,2,1,3,3,4,4,1,2,1,2,3,2,3,2,1,4,2,2,4,2,4,2,3,1,4,1,2,2,1,1,2,4,1,4,4,2
4,4,2,4,2,2,2,2,4,3,3,2,4,2,2,3,1,4,4,2,2,2,4,2,3,4,1,1,1,3,1,1,4,1,1,4,1,4,3,3,1,2,3,2,4,2,1,3,4,3,3,2,4,1,3,3,1,3,2,4,3,3,4,2,2,1,3,1,2,4,1,2,1,4,3,1,3,2,1,1,2,3,4,4,4,4,3,1,4,4,3,2,4,4,2,1,1,4,1,2
1,4,2,2,2,3,3,2,4,3,2,2,1,4,2,3,1,4,4,2,1,2,1,2,1,1,1,1,4,3,1,2,2,1,2,2,3,4,1,1,2,2,3,1,1,4,1,4,4,3,3,2,4,4,1,3,1,1,2,4,3,3,4,1,2,1,3,3,4,4,4,2,NA,2,3,2,3,1,1,2,4,1,4,2,1,1,3,2,4,4,4,2,3,1,2,4,2,4,3,4
1,4,2,4,2,2,4,3,4,3,3,4,2,3,3,4,1,4,4,1,2,2,4,3,3,1,1,3,4,4,1,1,3,2,2,3,3,4,3,3,2,2,3,4,2,3,1,4,4,3,4,1,2,4,3,2,3,3,1,4,4,1,4,4,2,3,3,3,3,3,2,1,1,2,3,3,4,1,2,4,3,4,4,3,4,4,3,2,4,3,3,3,1,2,1,4,2,2,4,4
4,4,2,4,4,2,4,1,4,3,3,4,1,1,2,3,2,3,4,2,4,2,1,1,1,4,1,3,4,3,1,1,4,3,4,4,3,1,3,4,2,2,2,4,1,3,1,4,4,3,3,2,4,1,3,3,1,3,2,2,3,3,4,2,2,1,3,3,3,1,1,4,4,2,3,1,3,2,1,4,2,3,4,2,4,2,3,1,4,1,1,2,1,1,4,4,1,4,2,2
1,4,2,1,2,3,3,1,4,2,1,4,4,4,2,3,1,4,4,2,2,4,3,1,3,4,3,3,3,3,1,2,4,1,1,4,3,4,4,1,1,2,2,1,1,3,4,4,4,3,2,1,2,4,3,3,4,3,3,4,2,3,4,4,2,4,1,4,1,4,1,4,1,2,3,2,3,1,1,1,2,1,4,3,2,4,3,1,4,4,4,2,1,1,4,4,1,4,3,2
1,4,1,1,2,2,2,3,4,3,3,4,3,1,2,4,1,4,4,3,1,2,4,2,1,3,1,3,1,3,3,1,4,1,1,4,1,3,4,3,2,2,3,2,1,3,4,4,4,1,2,4,1,4,1,3,4,1,2,4,4,1,4,3,2,1,3,2,4,4,3,2,3,2,3,2,1,2,1,2,3,3,4,2,4,1,4,1,4,2,1,2,1,1,4,4,2,3,3,2
3,4,2,4,2,2,1,2,4,3,3,2,1,1,2,3,2,3,2,2,2,2,1,2,3,4,1,1,1,3,1,1,4,1,2,4,3,1,3,4,1,2,3,3,1,3,2,3,4,3,3,3,1,1,3,3,4,3,2,4,3,1,4,2,2,1,3,4,1,4,1,2,2,2,3,2,2,2,1,1,2,2,4,4,4,4,3,1,4,3,4,2,3,1,2,2,1,4,3,4
1,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,NA,4,1,1,3,1,1,2,3,2,2,3,2,3,1,1,2,2,3,4,1,3,4,2,4,3,3,3,4,4,3,1,1,2,4,4,3,3,4,3,2,2,3,2,3,4,1,4,2,3,3,1,1,2,3,2,3,4,4,2,1,2,2,1,4,3,1,3,4,2,2,4,2,4,2,3
1,4,2,4,2,2,4,3,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,3,1,3,3,1,4,1,1,2,2,2,3,3,1,4,3,1,2,3,2,1,3,1,3,4,1,4,2,3,1,3,3,4,1,2,3,3,1,4,1,2,1,3,2,2,4,1,2,1,2,3,3,3,2,1,4,3,3,4,3,4,2,3,1,4,3,4,2,1,1,2,2,1,4,4,2
1,4,2,1,2,2,3,1,4,2,3,4,2,1,2,3,1,3,4,3,4,2,1,2,1,4,1,3,1,3,3,1,4,2,2,4,4,1,4,3,2,2,3,3,1,3,2,3,4,3,3,3,1,2,3,3,4,3,2,4,3,2,4,3,2,3,3,3,4,4,1,1,2,2,3,2,1,2,1,2,2,3,4,1,4,2,3,1,4,2,4,3,3,1,2,4,4,4,2,3
2,1,2,4,2,3,2,1,4,1,3,4,1,1,2,3,1,4,4,2,2,2,1,2,1,1,1,3,2,1,1,2,4,3,2,3,3,1,3,1,2,2,3,1,1,4,2,3,4,3,2,2,4,1,3,3,4,1,2,1,2,3,4,1,2,1,3,2,2,4,2,2,3,2,3,2,1,2,1,2,3,2,4,2,2,4,3,1,4,4,1,2,3,1,4,2,1,4,4,4
1,4,2,4,4,2,4,1,4,3,1,4,2,1,2,3,1,1,2,3,2,2,1,1,1,1,1,1,2,3,1,1,4,2,2,1,3,4,3,3,1,2,3,1,1,3,1,4,4,3,3,2,1,4,3,2,4,3,2,4,2,2,4,3,1,1,3,3,4,4,1,4,2,2,3,2,3,2,1,2,3,2,4,2,4,4,3,1,4,2,4,2,1,1,2,4,1,4,2,2
4,4,2,4,2,2,2,2,1,3,3,4,1,1,2,3,1,4,4,2,2,2,1,2,1,2,1,4,1,3,1,1,4,2,2,4,3,1,3,3,1,2,3,2,1,1,1,4,4,1,3,2,1,1,3,2,4,1,2,4,3,4,4,3,2,1,3,4,4,4,1,2,2,2,3,2,3,2,1,4,3,3,4,2,4,2,4,1,4,3,1,2,3,1,2,4,1,4,2,4
1,4,2,4,2,2,2,2,4,1,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,1,1,3,1,3,1,1,4,2,2,4,3,1,4,4,1,2,3,2,1,3,1,4,4,3,3,2,1,1,3,2,4,1,2,4,3,2,4,3,2,1,3,3,4,4,1,2,4,2,3,2,3,2,1,1,3,3,4,2,4,4,3,1,4,1,4,2,3,1,2,2,1,4,2,2
1,4,2,4,2,2,4,2,2,1,3,4,1,1,2,3,1,2,4,2,2,2,1,2,1,4,1,3,1,3,1,4,4,4,2,4,3,1,4,3,1,2,3,2,1,3,1,3,4,1,3,2,1,1,3,3,4,3,2,4,3,4,4,2,1,1,3,3,4,4,1,2,1,1,3,2,3,2,1,2,2,3,4,2,4,2,3,1,4,1,1,2,1,4,4,4,1,4,3,2
1,4,2,4,3,3,4,2,1,1,3,4,2,1,2,3,2,2,4,2,2,2,1,2,3,1,2,2,4,4,1,1,2,2,1,3,1,4,3,1,2,2,3,1,1,3,2,3,4,1,2,2,4,4,3,3,1,1,2,4,4,1,4,3,2,1,3,2,2,4,2,4,2,2,3,2,1,2,1,2,2,4,4,3,4,4,3,1,4,2,4,3,1,1,2,4,1,4,4,4
3,4,2,4,4,2,3,2,4,2,3,4,1,3,1,3,1,4,4,2,2,2,1,2,1,3,1,3,1,4,1,1,2,2,2,3,3,2,3,4,2,3,3,2,1,4,1,3,4,3,3,2,4,1,3,3,4,1,3,4,2,1,4,4,2,1,3,3,4,3,1,2,3,2,3,3,4,1,1,4,3,3,2,2,4,4,3,1,4,3,4,2,1,1,2,4,2,4,2,4
1,4,2,4,4,3,1,1,1,2,3,4,2,1,2,3,1,3,4,4,2,2,1,1,3,1,1,3,1,4,1,1,4,4,2,1,3,4,3,3,1,2,2,3,1,3,2,3,4,1,4,2,3,1,3,3,4,3,1,4,3,1,4,3,2,1,3,2,4,1,1,2,4,2,3,2,3,2,1,4,3,3,4,3,4,2,3,1,1,3,3,3,4,4,2,2,2,1,4,3
1,4,2,4,4,2,2,2,4,3,3,4,1,1,2,3,2,3,1,2,1,2,1,2,1,2,1,4,4,4,1,2,2,1,2,1,3,1,3,4,2,2,3,2,1,4,2,4,4,3,3,2,3,1,3,3,4,4,2,4,3,4,4,3,2,2,3,3,4,3,1,1,3,1,3,1,2,2,1,2,4,3,4,2,2,4,3,1,4,1,3,2,1,1,2,2,1,4,3,2
1,4,2,4,2,2,4,2,2,3,3,4,4,1,2,3,1,3,4,2,2,2,1,2,1,1,1,3,2,1,4,4,4,2,2,3,1,4,3,4,2,1,3,1,1,4,1,1,4,2,3,3,3,4,3,3,1,4,3,4,2,1,4,4,1,2,3,3,4,3,2,2,4,2,3,4,4,2,3,2,4,4,4,3,3,2,3,1,4,3,2,2,3,1,4,4,2,4,3,3
1,4,2,4,4,3,4,1,4,1,2,4,4,3,2,3,1,4,4,2,1,2,1,2,1,1,1,3,1,3,1,1,4,1,2,4,4,1,4,4,1,2,3,2,1,3,1,4,4,3,3,2,1,3,3,2,4,2,2,4,2,3,4,2,2,1,3,2,4,4,2,3,2,2,3,1,1,2,1,1,3,1,4,1,4,1,3,1,4,3,4,1,3,1,4,4,1,3,4,4
1,4,2,4,2,2,1,2,4,3,3,4,4,1,2,3,2,2,1,2,1,2,1,1,2,4,1,3,1,1,1,4,4,3,2,2,3,4,4,2,1,2,3,2,1,3,1,2,4,3,4,2,1,4,1,1,4,3,1,4,3,4,2,2,2,2,3,3,4,4,3,1,3,2,3,2,3,2,1,4,3,1,4,4,2,1,3,1,4,3,1,2,1,1,2,4,2,4,2,2
1,4,2,4,2,2,2,2,4,3,3,2,1,1,2,3,2,4,4,3,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,3,3,2,2,3,2,1,3,2,4,1,3,3,2,1,1,3,2,4,3,2,4,3,4,4,3,2,1,3,3,2,4,1,2,2,2,3,2,3,2,1,2,3,3,4,2,4,4,3,1,4,4,4,2,3,1,2,2,1,4,3,1
1,4,2,2,4,1,3,2,4,4,3,4,4,1,2,1,1,3,4,2,1,2,1,2,1,1,1,1,4,3,1,1,4,1,2,2,1,1,3,3,2,2,4,1,4,1,1,4,4,3,4,1,3,1,3,2,2,1,1,4,3,1,1,3,2,2,1,2,4,4,1,2,4,4,3,1,4,2,1,2,3,1,1,2,2,4,3,2,3,4,1,4,3,2,2,4,3,1,2,1
1,4,2,4,2,2,4,2,4,4,3,4,2,3,2,3,1,3,3,1,1,2,1,2,1,4,3,3,3,3,1,2,4,2,1,4,3,1,4,1,3,2,3,4,1,3,1,4,4,1,2,2,1,4,3,3,1,3,2,4,2,2,4,4,2,2,3,3,4,1,1,4,3,2,3,1,2,2,1,1,3,4,4,2,4,1,3,2,3,2,4,2,1,1,4,2,2,4,4,1
1,4,4,2,4,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,3,2,1,2,1,4,1,3,4,4,4,2,3,2,2,1,3,4,3,3,1,3,3,2,1,1,1,3,4,3,2,2,1,1,3,3,1,1,2,4,3,2,4,3,2,1,3,4,4,4,1,2,1,2,3,2,2,2,1,4,3,3,4,1,4,4,3,1,4,3,3,2,1,1,4,4,2,4,2,1
1,4,2,4,2,1,1,3,4,3,2,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,3,3,4,4,3,1,2,3,2,1,1,1,3,4,3,3,1,1,1,3,3,4,1,3,3,1,1,4,1,2,1,3,2,2,4,2,2,2,2,3,3,3,2,1,4,3,3,4,2,1,4,3,2,4,4,4,2,1,2,2,4,2,4,3,1
1,4,2,1,3,2,3,1,4,4,3,4,4,3,3,4,2,4,4,3,2,2,2,2,4,2,1,1,1,4,1,2,4,1,1,2,2,4,2,1,2,2,3,4,1,3,4,3,4,1,3,2,4,4,3,3,4,3,1,4,2,1,4,3,2,4,2,2,3,4,2,3,4,1,3,2,1,2,1,1,2,4,4,2,2,2,4,2,4,4,4,2,3,1,2,4,1,4,4,2
4,4,2,4,4,2,4,2,4,3,3,4,1,2,2,3,1,4,4,2,2,2,1,2,1,4,1,3,1,4,1,1,2,1,2,4,3,4,4,2,1,2,3,2,1,3,1,4,4,3,3,2,1,1,3,3,4,2,2,4,3,2,4,4,2,1,3,3,4,4,2,2,3,2,3,3,3,2,1,3,3,4,4,2,4,2,3,1,4,1,4,3,3,1,2,4,4,4,3,3
4,4,2,4,2,3,4,1,1,3,2,4,4,3,4,4,2,4,4,3,2,2,4,2,3,1,1,2,2,4,1,1,3,4,2,1,4,4,4,1,1,2,1,1,4,3,4,3,3,4,2,3,3,4,3,4,4,1,2,4,3,1,4,3,2,1,4,2,2,3,3,4,3,2,3,1,1,2,1,2,3,3,4,3,4,3,3,4,4,2,4,2,3,3,2,2,1,4,1,4
1,4,2,4,4,2,4,2,4,3,3,2,1,1,2,3,1,4,4,2,2,2,1,2,3,4,1,1,2,4,4,1,4,4,1,4,3,4,4,4,2,2,3,3,4,3,1,4,4,4,2,2,1,1,2,3,4,1,3,4,3,4,4,2,2,3,3,3,3,3,2,1,1,2,3,1,1,2,1,4,2,2,4,1,1,3,3,4,1,3,4,2,1,1,3,3,2,4,2,2
1,4,1,3,2,2,4,2,4,3,3,4,1,1,3,3,1,3,3,2,2,2,1,2,3,4,1,3,1,4,1,1,4,3,3,4,3,1,4,3,1,3,3,4,1,3,2,4,4,3,2,2,1,4,3,1,3,1,2,4,3,3,4,3,2,1,3,3,4,4,2,2,4,2,3,2,3,2,2,4,3,1,4,1,2,4,3,1,4,4,2,2,1,1,4,4,3,4,3,2
1,4,2,3,2,2,4,2,4,3,3,2,1,1,1,3,1,3,4,3,1,2,1,2,1,4,3,1,1,3,1,1,2,4,2,3,3,2,3,3,1,2,2,2,1,3,1,3,4,2,3,2,2,4,3,1,4,1,2,4,4,3,4,2,2,1,3,2,2,4,2,2,1,2,3,2,1,1,1,3,2,3,4,2,2,4,3,4,4,4,4,4,2,3,2,2,2,1,3,4
1,4,2,2,4,2,3,2,4,3,3,4,1,1,2,3,1,3,4,2,4,2,4,2,4,3,1,2,4,3,4,1,4,3,1,4,3,1,4,3,2,2,3,2,1,3,1,4,4,3,3,2,3,4,3,2,1,3,2,4,3,4,4,1,2,1,3,3,3,4,4,3,1,1,3,1,1,2,1,2,3,2,4,3,4,4,3,1,4,4,3,2,3,1,4,4,1,4,2,4
3,4,2,4,4,2,2,2,4,4,3,4,1,3,2,3,1,4,4,1,1,2,1,2,1,4,1,3,1,3,1,4,4,2,1,4,3,4,1,4,2,2,3,1,1,3,1,3,4,3,2,1,3,1,3,3,4,3,2,4,3,3,4,4,1,2,3,2,4,4,1,2,1,2,3,1,3,1,1,4,3,3,4,2,4,4,3,3,4,1,4,2,3,4,1,2,2,4,3,4
4,4,2,4,2,1,1,2,2,1,3,4,2,1,1,4,4,4,4,3,4,2,2,2,3,1,3,2,4,4,1,1,2,3,2,4,4,1,2,4,1,2,3,2,1,3,4,3,4,4,3,2,3,4,3,3,1,3,3,4,3,2,4,1,2,2,3,2,4,3,1,2,3,4,3,2,3,1,1,2,4,1,4,2,3,4,3,2,3,4,3,2,2,1,2,4,4,4,3,4
1,4,2,4,4,2,2,2,4,1,2,2,1,1,3,3,1,3,4,3,2,2,2,2,3,1,1,2,2,4,1,1,4,3,4,3,3,4,3,1,1,1,3,2,1,3,1,3,4,1,2,2,1,4,3,3,4,3,2,4,3,1,4,2,2,1,3,3,2,4,1,4,4,2,3,2,2,1,3,4,3,2,2,1,4,4,3,1,4,3,3,3,1,1,4,4,1,1,4,2
1,4,2,4,4,2,4,3,4,2,3,4,2,3,3,4,1,4,4,1,2,2,1,2,1,4,1,3,1,4,1,1,4,1,2,1,3,1,3,4,1,2,3,2,1,3,2,4,4,3,2,4,1,4,3,3,4,3,2,4,3,1,4,2,2,1,3,3,4,4,2,2,2,3,3,2,3,1,3,4,3,4,4,2,4,4,3,2,4,3,4,3,3,1,4,4,3,4,4,2
1,4,2,4,1,2,1,3,1,3,3,2,1,1,2,3,1,3,2,2,2,2,1,2,3,4,1,3,1,3,1,2,3,1,2,4,3,1,2,4,1,2,3,3,1,4,2,4,4,1,2,2,1,1,3,3,1,1,2,4,3,1,4,3,2,2,3,4,4,4,1,2,1,2,3,1,3,2,1,4,2,2,2,2,1,2,3,2,4,2,4,2,1,1,4,2,1,4,3,4
1,4,2,4,4,2,4,2,1,2,3,4,4,4,3,2,2,3,4,2,1,2,2,2,3,2,1,3,3,3,2,2,2,1,1,2,3,1,3,1,2,1,3,2,1,3,4,3,4,1,4,1,3,1,1,2,4,1,2,4,3,4,4,2,2,3,3,3,4,2,3,1,2,2,3,1,3,2,1,4,3,4,3,1,2,4,3,1,4,4,3,2,1,1,2,4,2,4,3,1
1,4,2,2,4,1,2,2,4,2,3,4,1,2,2,3,2,3,4,2,1,2,1,2,1,1,1,3,4,3,1,4,4,2,1,4,3,4,3,3,2,3,3,1,1,3,2,3,4,1,3,3,4,1,3,3,4,3,3,4,3,2,4,3,2,1,3,3,4,4,1,2,1,3,3,2,2,1,1,4,4,3,4,1,4,4,3,2,4,2,4,2,1,1,2,4,2,4,2,4
1,4,2,4,4,2,2,2,4,2,3,4,1,1,2,3,2,3,4,1,2,2,1,2,1,4,1,3,1,3,1,1,2,2,2,4,3,4,3,3,1,2,3,3,1,3,1,3,4,3,3,2,1,4,3,3,4,1,2,4,3,4,4,3,2,2,3,3,1,4,1,2,3,2,3,3,3,2,1,1,2,3,4,2,4,4,3,1,1,3,4,2,1,1,NA,2,1,4,3,2
1,4,2,2,4,2,4,2,4,3,3,2,1,1,2,3,4,3,4,2,2,2,1,2,2,2,1,1,1,3,1,1,4,2,2,1,3,1,3,4,1,3,3,2,4,3,1,4,4,3,3,1,1,4,3,3,4,3,2,2,3,2,4,3,2,1,3,3,1,4,3,2,2,2,3,2,3,2,1,2,3,3,4,2,4,2,3,1,1,1,4,2,1,1,2,4,1,4,3,2
1,4,4,4,1,2,1,2,4,3,3,4,2,1,2,3,2,3,4,2,2,2,1,2,1,4,1,3,3,3,4,1,4,3,2,4,3,4,4,3,1,2,3,4,1,3,1,1,4,3,3,2,2,1,3,2,4,1,2,4,3,1,4,2,2,2,3,2,3,4,1,4,2,2,3,2,3,2,1,1,3,3,4,2,2,4,4,2,4,1,4,2,2,1,2,2,2,4,3,4
1,4,2,4,4,2,2,2,4,3,3,2,1,1,2,3,2,3,1,2,2,2,1,2,2,4,1,1,1,3,1,1,4,3,1,4,3,4,3,1,1,2,3,2,1,3,1,4,4,3,3,2,1,4,3,2,4,1,2,4,3,2,4,2,2,1,3,2,1,4,1,2,2,2,3,2,3,2,1,4,3,2,4,2,4,4,3,1,4,3,3,2,3,1,2,4,1,4,3,3
2,4,2,4,4,2,3,3,4,3,3,4,1,1,2,3,1,3,4,2,2,1,1,2,1,1,1,3,1,4,1,2,2,2,2,3,3,4,3,4,2,2,1,2,1,1,1,4,4,3,4,2,3,1,1,4,4,1,2,4,3,4,4,2,2,2,3,2,3,4,3,3,3,2,3,2,1,1,1,1,3,2,4,2,4,4,3,1,4,3,4,2,3,1,4,4,3,4,3,4
1,4,2,4,4,2,1,2,4,3,2,4,1,1,2,3,1,3,4,2,3,2,3,2,4,4,1,3,4,1,4,4,4,2,2,4,3,4,3,3,2,3,3,4,1,3,2,3,4,3,3,3,3,1,3,4,4,1,4,4,3,3,4,4,3,1,3,3,4,4,3,2,1,2,3,2,3,2,1,2,2,4,4,3,2,4,3,1,4,4,3,2,3,1,1,4,3,4,3,2
4,4,2,2,4,2,2,2,1,1,3,2,1,1,2,3,2,1,4,1,1,2,4,2,1,4,1,3,1,4,1,1,4,2,2,4,3,1,3,1,1,2,3,4,1,3,2,4,4,3,3,2,1,1,3,2,4,1,2,4,3,1,4,3,3,1,3,3,2,4,4,3,1,2,3,2,3,2,1,4,2,4,4,1,4,4,2,1,4,1,4,2,1,1,1,4,3,1,3,2
1,4,2,4,2,2,4,2,4,3,3,4,4,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,4,3,3,2,2,3,2,1,3,2,4,4,3,3,2,1,1,3,3,4,1,2,4,3,4,4,3,2,3,3,2,1,4,1,2,1,2,3,2,2,2,1,2,2,2,4,2,4,4,3,1,4,4,4,2,1,1,2,4,2,4,2,2
4,4,2,1,4,3,4,2,4,4,3,1,1,4,2,4,2,3,4,1,3,2,1,2,3,4,1,3,1,4,1,2,3,3,2,2,3,1,3,1,1,2,3,4,3,4,2,4,4,3,3,1,2,4,1,3,4,3,1,4,3,4,4,3,2,2,3,3,4,4,1,2,2,2,3,4,2,2,2,4,2,4,4,1,4,2,4,1,1,4,4,2,4,4,2,2,1,4,2,4
1,4,2,4,2,2,3,2,4,3,3,2,2,3,2,4,1,3,4,4,1,2,1,2,1,4,1,2,2,4,1,1,1,3,1,3,2,3,1,4,1,2,3,1,1,3,1,4,4,3,3,1,1,1,4,3,3,3,3,4,3,1,4,2,1,4,4,3,4,4,3,4,1,2,3,2,4,2,4,3,4,4,4,2,1,4,4,2,4,4,3,2,1,1,2,2,2,3,4,4
1,4,2,1,4,2,4,2,2,2,3,4,1,3,2,3,1,4,4,1,2,1,4,2,3,1,1,1,1,4,1,2,3,4,2,4,4,3,4,1,1,1,3,3,1,3,1,3,4,3,2,2,3,4,3,2,1,3,2,4,4,4,4,1,2,2,3,2,4,1,4,2,2,2,3,1,3,1,3,2,3,3,4,2,2,1,3,4,4,3,4,2,3,1,2,4,2,1,2,3
1,4,2,4,2,2,1,2,4,3,3,2,1,1,2,3,1,3,2,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,4,2,2,3,2,1,3,2,4,4,3,3,2,1,1,3,3,4,3,2,4,3,2,4,3,2,1,3,3,4,4,1,2,2,2,3,2,3,2,1,2,2,3,4,2,4,4,3,1,4,1,4,2,1,1,2,2,1,4,2,2
1,4,2,1,3,1,2,1,2,3,3,4,2,3,3,3,1,3,4,2,3,1,4,1,3,2,2,1,2,4,1,1,2,2,1,3,3,4,3,4,3,2,3,1,4,3,4,4,4,2,2,2,3,4,3,3,4,1,4,4,2,1,4,3,2,4,3,3,2,4,2,2,4,3,3,1,2,1,1,4,3,3,4,1,2,4,4,2,2,NA,3,2,3,3,2,2,2,4,1,4
1,4,2,4,2,2,3,2,4,3,3,4,1,1,3,4,2,3,4,2,2,2,1,2,1,1,1,3,1,4,1,1,4,3,1,3,3,1,4,4,2,2,3,2,1,3,1,4,4,3,2,2,1,1,3,3,3,1,2,4,3,2,4,3,2,3,3,2,4,4,1,1,3,2,3,2,3,1,1,4,4,3,4,1,1,1,3,1,1,4,4,2,1,1,2,3,1,4,4,1
1,4,2,1,4,2,3,2,4,2,3,1,1,1,2,4,2,3,4,2,1,2,2,4,1,4,1,1,4,4,1,1,2,1,2,3,3,3,2,1,2,2,1,3,1,3,1,4,4,3,2,2,1,1,3,3,4,1,3,4,3,1,4,3,2,1,3,2,3,4,1,2,3,2,3,2,3,1,1,2,2,4,4,3,4,4,3,4,4,4,4,2,1,1,4,4,2,4,1,2
1,4,2,4,4,2,4,3,4,4,3,4,1,1,2,3,1,3,4,1,2,2,1,1,1,2,1,3,1,1,1,1,4,2,2,3,3,1,4,1,1,3,3,2,1,3,1,4,4,3,3,2,1,1,3,2,4,3,2,4,3,2,4,3,2,1,3,3,1,4,1,2,1,2,3,2,1,2,1,4,3,3,4,4,4,4,3,1,4,3,4,2,1,1,2,4,1,4,2,2
1,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,4,4,3,2,2,1,2,1,4,1,3,1,3,1,1,4,4,2,1,3,1,4,2,1,2,3,2,1,3,4,4,4,3,3,2,1,4,3,3,1,3,1,4,2,2,4,2,2,1,3,3,3,4,1,2,4,2,3,2,1,2,1,2,3,3,4,2,2,4,3,1,4,3,4,2,3,1,2,2,1,4,3,2
1,4,2,4,2,2,4,2,4,1,3,2,1,1,2,3,2,1,4,3,1,2,1,1,1,4,1,1,4,3,1,1,4,2,2,1,3,4,4,3,1,2,3,2,1,3,3,4,4,3,3,2,3,1,4,3,1,1,2,4,3,2,4,2,2,1,3,3,4,4,1,2,2,2,3,2,1,2,1,1,4,3,4,1,4,2,1,1,4,3,4,2,3,1,2,4,1,4,2,4
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,1,4,3,1,4,1,1,2,3,1,1,3,2,3,4,1,3,2,1,1,3,3,4,1,2,4,3,2,4,4,2,1,3,3,3,4,1,2,4,2,3,1,3,1,1,4,3,3,4,4,4,4,3,1,4,1,4,2,1,1,2,4,1,4,2,4
1,4,2,4,4,2,3,3,4,2,3,4,1,1,2,3,2,3,4,2,2,2,1,2,3,4,1,2,4,4,3,4,1,2,2,4,3,4,4,1,1,2,3,1,1,3,4,4,4,3,3,2,4,1,3,3,4,3,2,4,3,1,4,2,4,1,3,3,2,4,4,4,3,1,3,2,3,1,1,2,2,3,4,2,1,4,3,2,4,3,4,2,1,1,4,3,2,4,3,1
1,4,2,4,4,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,4,2,1,1,1,4,1,3,1,3,1,2,4,3,2,4,3,1,4,3,1,2,3,2,1,3,1,4,4,3,3,2,1,1,3,3,4,3,2,4,3,2,4,3,2,1,3,3,1,4,2,2,3,2,3,2,3,2,1,2,2,3,4,1,4,2,3,1,4,2,1,2,3,1,2,2,1,4,4,2
1,4,2,4,2,2,3,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,3,4,1,3,4,4,4,4,4,3,1,4,3,1,3,4,1,3,3,2,1,3,2,4,4,3,3,2,1,1,3,2,3,3,2,4,3,1,4,3,2,1,3,3,3,3,1,3,1,2,3,2,2,1,1,4,3,3,3,1,4,4,3,1,4,4,3,2,1,1,2,4,2,4,3,2
1,4,2,4,3,2,1,2,4,3,3,4,1,3,2,3,1,3,4,3,4,2,1,2,1,2,1,3,1,3,1,1,4,2,1,4,3,4,3,3,2,2,3,4,1,3,1,4,4,1,3,2,1,4,3,3,4,3,2,4,4,4,4,3,2,3,3,3,1,4,1,2,1,2,3,2,3,2,1,2,2,3,4,2,1,4,3,1,4,2,4,2,1,1,4,4,1,4,3,4
1,4,2,4,4,2,2,1,4,3,3,1,2,4,3,4,1,4,4,4,1,4,1,2,3,4,1,1,4,3,1,1,2,2,2,3,3,2,4,1,2,2,1,1,1,3,1,3,4,2,2,1,2,2,4,4,4,1,3,4,3,3,4,2,2,2,3,4,4,1,3,4,3,3,2,1,3,2,3,2,4,3,4,3,4,4,3,3,3,3,4,2,3,1,2,4,3,4,3,4
1,4,2,4,2,2,3,2,4,3,3,4,1,1,2,3,1,3,3,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,1,1,2,3,2,1,3,1,3,4,3,3,2,1,1,3,3,4,3,2,4,3,1,4,3,2,1,3,2,4,4,1,2,1,2,3,2,2,2,1,2,3,3,4,2,4,4,3,1,4,4,4,2,1,1,2,2,1,4,3,2
1,4,2,4,4,2,4,3,4,3,3,4,1,1,3,3,2,3,4,2,2,2,1,2,1,4,1,2,1,3,1,2,4,2,1,4,3,4,3,1,2,2,3,2,1,3,1,4,4,1,2,4,1,1,3,2,1,1,2,4,3,2,4,1,2,1,3,4,2,4,4,2,1,2,3,2,4,1,1,4,2,4,4,4,2,4,1,2,4,3,3,2,1,1,4,4,3,4,3,3
3,4,2,2,4,1,4,2,1,3,3,4,2,1,1,4,2,4,4,1,4,2,4,2,1,1,1,1,3,1,1,1,4,1,4,2,1,4,4,2,2,4,3,2,1,3,1,4,4,1,3,1,2,4,3,1,4,1,3,4,4,4,4,4,2,1,3,3,2,3,4,4,3,3,3,3,1,1,1,2,3,3,4,1,4,4,4,1,1,4,3,2,1,1,2,4,1,4,2,3
1,4,2,4,2,2,2,3,4,3,3,4,2,1,2,3,2,3,4,2,2,2,1,2,1,3,1,1,1,4,1,1,4,2,1,4,3,1,3,3,1,2,3,2,1,3,2,4,1,3,3,1,1,1,3,3,4,3,2,4,3,4,2,3,2,1,3,3,1,4,1,1,1,2,3,2,3,2,1,4,3,2,4,2,4,4,3,1,4,1,4,2,2,3,2,4,1,4,1,2
2,4,2,4,4,2,4,1,2,3,2,4,1,4,3,3,2,3,3,4,1,4,4,2,1,1,4,3,2,4,4,4,4,1,2,3,3,2,4,3,1,3,2,2,1,2,3,3,4,3,2,3,3,4,3,3,4,3,2,4,3,1,4,3,2,3,3,2,2,4,1,2,2,2,3,2,2,2,1,4,2,4,4,1,4,2,3,1,4,4,4,2,3,3,1,3,2,4,2,4
1,4,2,4,2,3,4,2,4,3,3,4,1,1,2,3,2,4,4,2,2,2,1,1,3,1,1,3,2,3,1,1,4,3,4,4,3,4,4,3,1,2,3,4,4,3,1,1,4,3,3,2,1,4,3,3,4,1,1,4,3,2,4,3,2,1,3,2,4,4,3,4,3,2,3,2,4,2,1,2,3,3,4,1,4,4,3,1,4,4,1,2,3,1,2,4,1,4,2,2
1,4,2,4,4,2,4,3,4,4,3,4,1,4,2,4,2,3,4,3,2,2,1,2,1,3,1,3,4,4,1,4,3,3,1,3,2,4,3,1,1,2,3,2,1,3,2,3,4,3,2,2,3,4,3,4,4,3,1,4,2,1,4,2,2,2,3,2,1,4,1,2,1,3,3,2,2,2,1,1,3,3,4,2,2,4,4,1,1,3,4,2,3,1,1,4,2,4,3,4
2,4,2,4,2,3,3,1,4,2,1,4,2,4,2,3,2,3,4,4,2,2,1,2,1,1,1,3,2,3,1,1,1,1,1,1,4,1,3,1,1,2,1,2,2,3,3,4,4,3,3,2,3,4,3,3,4,1,2,4,3,2,4,1,3,4,3,3,4,1,1,3,2,2,3,2,2,2,1,4,3,4,4,2,2,2,4,4,4,4,3,2,1,3,4,4,1,3,3,4
1,4,2,1,2,2,1,3,2,1,2,2,4,1,2,3,1,4,4,2,2,2,1,2,1,4,1,1,1,3,1,1,4,3,1,4,4,4,3,4,1,2,3,3,1,3,1,3,4,3,3,2,1,4,1,3,4,3,3,4,3,1,4,1,2,1,3,4,2,4,1,2,2,2,3,2,1,2,1,2,3,3,4,3,2,4,3,4,4,4,4,2,1,1,2,4,1,4,3,3
1,4,2,1,4,2,3,2,4,3,3,4,2,1,2,3,1,3,4,2,1,2,1,2,1,4,1,3,3,4,1,1,4,2,2,4,3,4,4,1,1,2,3,1,1,3,1,3,4,1,3,2,4,1,3,3,4,1,2,4,3,1,4,4,2,2,3,2,4,3,1,2,3,2,3,1,3,2,1,4,4,1,4,3,2,4,3,1,4,4,4,2,3,1,1,4,2,4,3,2
1,4,2,1,2,1,3,3,4,1,3,2,2,1,3,3,1,4,4,3,1,2,1,2,1,4,1,3,1,3,1,1,2,4,2,4,3,4,4,1,1,2,3,3,1,4,2,4,4,1,3,2,2,1,1,4,1,3,1,4,3,4,4,2,2,1,3,1,4,4,4,2,1,2,3,3,1,1,1,4,3,2,4,2,4,4,3,3,2,3,2,2,3,1,4,4,4,1,3,4
4,4,2,4,3,2,2,2,2,3,3,4,1,1,2,4,3,3,4,2,3,2,4,2,3,4,1,2,1,3,1,2,4,2,2,3,3,4,3,4,1,2,1,3,1,3,2,3,4,1,3,2,1,1,3,1,2,3,2,4,3,4,4,1,3,1,3,3,2,2,1,2,2,3,3,2,1,2,1,4,3,2,4,3,3,1,3,1,4,3,4,2,1,1,4,4,1,4,3,3
1,4,2,2,4,2,2,2,4,3,3,4,1,1,2,4,3,3,4,1,1,2,1,1,1,4,1,3,4,4,1,1,4,2,4,2,3,3,3,1,1,2,1,1,1,2,4,1,1,2,4,2,3,1,1,3,4,1,2,4,3,4,2,3,1,4,3,4,4,4,1,2,1,2,4,2,2,1,1,1,3,3,2,2,2,4,3,1,4,4,4,2,3,1,2,4,1,1,3,4
2,4,2,4,4,2,4,2,4,3,3,4,2,1,2,4,2,2,4,3,2,2,1,2,2,4,2,3,1,3,2,1,4,4,4,2,4,2,3,1,2,2,3,3,1,3,1,4,4,1,2,2,1,1,3,3,4,1,1,4,4,2,4,4,2,3,4,2,3,4,2,4,3,2,3,1,2,2,4,4,3,1,4,2,4,1,3,4,3,4,4,2,1,3,4,3,3,4,4,4
1,4,2,4,2,3,3,2,4,3,3,4,1,1,2,3,1,1,2,2,2,2,1,2,1,4,1,3,1,4,1,1,4,2,2,4,3,4,4,4,1,2,3,2,1,3,3,3,4,3,2,2,1,1,3,3,4,3,2,4,3,2,4,3,2,3,3,3,4,4,1,2,3,2,1,2,3,2,1,2,2,3,4,4,4,4,3,1,4,3,4,2,1,1,2,4,1,4,2,2
1,4,2,4,4,2,4,1,2,2,3,2,2,4,2,3,1,4,3,3,4,2,1,2,1,4,1,2,1,3,1,2,4,1,1,3,3,2,3,4,1,2,3,3,1,4,1,3,4,3,4,2,3,1,3,3,4,1,2,4,3,4,4,2,2,2,3,4,2,4,1,3,1,2,3,2,1,2,1,2,2,4,4,1,1,4,3,2,4,4,4,2,3,4,2,2,1,4,3,4
4,4,2,4,4,4,2,2,4,3,3,4,1,2,2,1,1,4,4,1,2,2,1,2,3,4,1,3,3,4,1,1,4,2,2,4,3,1,4,3,2,2,3,3,1,3,1,3,4,1,3,1,4,1,3,3,4,1,2,4,3,4,4,2,2,3,3,2,4,4,1,2,4,2,3,2,3,2,1,2,3,3,4,4,4,4,3,1,4,3,4,2,3,1,4,4,2,4,3,2
1,4,2,4,4,2,4,2,4,3,3,4,2,1,2,3,2,3,4,2,1,2,1,2,1,4,1,1,4,4,4,1,4,2,2,3,3,4,3,1,2,2,3,1,1,3,1,4,4,3,3,2,1,4,3,4,4,3,2,4,4,2,4,3,2,1,3,3,3,4,1,2,1,3,2,1,3,1,1,2,3,3,4,1,1,4,3,1,4,1,4,2,1,1,2,4,3,2,3,4
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,3,2,4,3,1,3,3,1,2,3,2,1,2,2,3,4,3,2,2,1,1,3,3,4,1,2,4,3,2,4,3,2,2,3,3,4,4,1,2,2,2,3,2,3,2,1,2,2,3,4,2,4,4,3,1,4,1,1,2,1,1,1,2,1,4,4,2
1,4,2,4,2,2,2,3,4,3,3,4,1,3,3,3,1,3,4,3,2,2,1,2,1,4,1,1,1,3,1,1,4,4,2,3,3,4,4,1,1,3,3,4,1,3,1,3,4,3,3,2,4,1,4,3,4,3,2,4,3,3,4,3,2,4,3,2,4,4,1,2,2,2,3,2,2,2,1,4,2,3,4,2,4,2,3,1,4,4,4,2,1,1,2,2,1,4,2,2
1,4,2,4,2,2,2,2,4,3,3,4,1,3,2,3,1,3,4,2,3,2,1,2,1,4,1,1,1,3,1,4,4,2,2,4,3,1,4,1,1,2,3,3,1,3,1,4,4,3,2,2,4,1,3,3,4,3,3,4,3,1,4,4,2,3,3,2,1,4,1,2,4,4,3,2,4,2,4,2,3,1,4,2,1,1,3,1,4,3,4,2,4,2,2,2,1,4,2,2
1,4,2,4,3,2,1,3,1,4,3,4,1,3,3,3,2,3,3,4,2,2,1,2,3,1,3,3,2,3,1,2,2,1,2,2,2,3,1,4,1,4,3,2,1,2,1,2,4,3,4,2,4,1,3,4,1,2,2,4,3,1,4,4,3,1,3,4,2,4,1,2,2,2,3,2,3,2,1,2,3,3,2,1,2,4,3,1,4,4,2,2,1,1,2,4,2,4,1,3
1,4,2,4,2,2,2,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,3,4,1,1,1,3,1,1,4,3,2,4,3,1,3,3,1,2,3,2,1,3,1,4,4,3,3,2,1,1,3,3,4,1,2,4,3,2,4,3,2,1,3,3,4,4,1,2,1,2,3,2,3,2,1,4,2,3,4,2,4,2,3,1,4,3,4,2,1,1,2,2,1,4,2,2
2,4,2,4,1,2,2,3,4,2,3,2,2,3,2,3,2,2,4,3,2,2,1,1,4,2,1,2,3,2,2,2,2,3,2,4,2,1,1,2,1,2,4,1,1,3,2,3,4,3,2,3,3,4,3,2,4,1,2,4,2,3,4,4,2,1,3,2,4,4,1,2,4,2,3,2,1,2,3,1,3,2,4,1,4,2,2,3,4,2,3,2,1,1,4,4,2,1,1,2
1,4,1,4,4,2,2,2,4,1,1,4,2,1,2,3,1,4,4,2,2,4,1,2,1,4,1,2,4,3,1,1,4,4,2,3,3,4,3,3,2,2,2,2,1,4,1,4,4,3,3,2,1,4,3,3,4,1,4,4,4,4,4,2,3,1,3,1,1,4,3,4,1,2,3,2,1,1,3,4,2,3,4,1,3,4,4,2,1,4,3,4,1,4,4,4,3,4,3,2
1,4,2,4,2,2,1,2,4,3,3,4,1,1,2,1,3,4,4,2,2,2,1,2,1,4,1,3,1,3,1,2,4,1,2,4,3,1,3,4,1,3,3,2,1,4,1,4,1,3,3,2,1,1,3,2,4,1,2,4,3,2,4,2,2,1,3,2,4,4,1,2,3,2,3,2,3,1,1,1,3,2,4,2,4,4,3,1,2,1,3,2,1,1,2,3,1,4,3,2
1,4,2,1,2,3,3,3,1,2,3,4,4,1,2,3,1,3,4,2,1,2,3,2,3,1,1,3,4,1,2,2,2,3,1,3,3,4,3,4,2,2,3,2,1,3,2,4,4,1,2,1,1,4,3,3,4,3,2,4,3,4,4,3,2,1,3,2,2,4,4,2,3,2,3,2,1,1,1,2,3,2,4,1,1,4,3,1,4,4,4,2,1,1,2,4,3,4,3,2
1,4,2,4,2,1,2,3,4,4,3,4,2,1,2,3,1,3,2,2,2,2,1,2,1,4,1,3,1,2,1,1,1,2,2,4,3,1,4,4,1,2,3,2,1,3,1,3,4,3,2,4,1,3,1,3,4,1,2,4,3,1,4,2,2,1,3,2,4,4,2,2,4,2,3,4,3,2,1,4,2,2,4,4,4,4,3,1,4,3,4,2,4,3,4,2,1,4,2,2
2,4,2,4,2,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,2,2,2,4,3,1,4,4,1,2,3,1,1,3,1,4,4,3,3,4,1,1,3,3,4,3,2,4,3,2,4,3,2,1,3,2,4,4,1,2,4,2,3,2,3,2,1,2,3,3,4,2,4,2,3,1,4,2,4,2,1,1,2,1,1,4,3,4
1,4,2,2,4,3,3,1,2,2,3,2,4,3,3,4,2,4,4,3,2,2,1,4,3,1,1,2,2,2,4,2,3,3,2,1,3,4,2,4,2,2,1,4,4,3,4,4,2,2,2,2,4,4,1,2,4,3,3,4,3,3,4,4,2,1,3,2,4,2,3,4,3,3,3,3,4,2,3,4,2,3,4,1,2,4,3,4,4,3,4,2,3,3,4,4,2,4,2,4
1,4,2,4,4,3,4,2,4,3,1,4,1,1,2,4,1,3,4,2,1,2,1,1,1,4,1,1,1,3,1,1,1,2,1,3,3,4,3,1,1,2,3,2,1,3,1,3,4,4,2,2,1,1,3,3,4,1,2,4,3,2,4,2,1,3,3,3,3,4,2,4,3,2,3,1,3,2,2,1,2,3,4,1,1,2,3,1,4,1,4,2,1,4,2,4,1,4,3,2
1,4,2,4,4,2,3,2,1,2,3,2,1,1,2,3,1,4,4,2,1,2,1,2,1,4,1,2,1,4,1,4,1,2,2,4,3,4,4,4,1,2,3,1,1,3,1,4,4,3,3,1,1,4,3,3,4,1,2,4,3,2,4,3,1,1,3,2,1,4,1,2,4,2,3,2,2,2,1,4,3,3,4,3,4,4,3,2,4,3,4,2,1,1,2,2,2,4,4,2
1,4,2,4,3,2,1,3,4,1,3,4,1,3,2,3,2,3,4,1,1,2,1,2,1,4,1,2,2,2,4,4,3,2,2,2,3,4,3,4,2,2,3,4,1,3,1,1,4,2,2,2,3,4,1,1,1,1,4,4,3,2,2,4,2,2,3,3,1,1,1,4,3,3,3,2,2,2,1,4,3,1,4,4,4,4,3,1,4,3,3,2,1,1,4,4,2,4,3,4
1,4,2,3,4,2,2,3,4,1,3,4,1,3,2,2,2,4,4,2,2,2,4,2,4,2,1,1,4,4,1,1,3,2,2,3,3,4,3,1,2,3,3,3,1,3,1,4,4,3,3,2,4,3,3,3,4,3,2,4,2,3,1,3,2,2,3,3,3,4,4,2,4,1,3,1,2,1,1,2,3,3,4,2,4,1,1,1,4,4,1,2,1,2,4,3,2,4,3,1
1,4,2,2,4,2,4,2,4,3,3,4,1,3,2,4,1,3,4,2,1,2,1,2,1,1,1,3,2,4,1,2,3,2,2,4,3,2,4,4,2,2,3,2,1,3,1,3,4,3,3,2,3,1,3,3,4,3,2,4,3,4,4,3,2,2,3,1,4,1,1,2,1,2,3,3,2,2,1,2,2,1,4,2,1,4,3,1,4,4,4,2,1,1,2,2,3,4,4,2
1,4,2,4,2,2,1,2,1,3,3,4,2,1,3,3,1,1,1,2,2,4,1,1,1,4,1,3,1,3,1,4,4,2,2,2,3,1,3,1,1,2,3,1,1,3,1,4,4,3,3,2,1,1,3,3,1,3,2,4,3,1,4,2,2,3,3,2,4,4,1,2,1,2,3,2,3,2,1,2,3,3,3,4,4,4,3,1,4,3,4,2,2,1,2,2,1,4,3,2
1,4,2,4,4,1,4,3,1,4,3,2,2,1,2,4,1,3,4,3,2,2,4,2,3,4,2,2,3,3,1,1,2,1,1,4,3,1,4,1,1,3,3,2,1,3,1,3,4,3,2,2,1,4,3,3,4,1,2,4,2,2,4,4,2,1,3,2,3,4,4,2,1,2,3,2,2,1,1,2,3,3,4,1,2,4,3,1,4,4,4,2,1,1,4,2,1,4,3,2
4,4,2,1,4,2,2,2,2,1,3,2,2,1,3,4,1,3,1,2,1,2,1,2,1,4,1,1,1,2,1,2,2,1,2,3,3,4,3,2,2,2,1,2,1,3,1,4,4,3,4,3,3,4,3,4,4,1,3,4,2,2,4,3,2,1,3,2,4,4,1,2,4,2,3,2,4,1,1,2,3,3,4,1,4,4,3,1,1,4,3,2,1,1,2,4,1,4,3,4
3,4,2,2,4,2,2,2,4,3,3,4,1,3,2,3,1,3,4,2,1,2,1,2,1,3,1,1,1,3,1,1,4,2,4,3,3,4,3,3,1,2,3,1,1,3,1,3,4,3,4,2,1,1,3,3,1,1,2,4,3,3,4,4,2,1,3,4,4,4,2,2,1,2,3,2,2,2,1,1,3,4,4,2,4,2,3,1,4,1,4,2,3,1,4,2,4,4,3,2
1,4,2,4,3,3,4,1,1,3,3,4,2,1,2,2,1,3,4,2,2,2,1,2,1,4,1,3,1,3,1,1,4,2,1,4,3,4,3,3,1,2,3,2,1,3,3,4,4,3,3,2,1,4,3,3,1,3,2,4,3,4,4,2,3,1,3,3,2,4,1,2,1,2,3,2,1,1,1,4,3,2,4,2,2,4,3,4,4,1,4,2,3,1,2,4,2,2,4,4
4,4,2,2,4,2,1,2,4,2,3,4,1,1,3,3,2,2,4,2,1,2,1,2,4,3,1,3,3,4,1,1,4,2,1,3,4,1,4,4,1,2,3,1,1,3,1,4,4,3,2,2,4,3,1,3,4,1,2,4,3,2,4,4,2,2,3,3,4,4,1,2,3,2,3,2,3,2,1,2,2,3,4,1,4,4,3,1,4,1,3,2,4,4,4,1,4,4,3,1
1,4,2,2,4,3,2,2,4,3,2,4,2,1,2,3,2,3,4,3,4,2,1,2,1,1,3,4,1,4,1,2,4,1,2,3,3,4,4,3,1,2,3,3,1,3,1,3,1,2,3,2,3,1,1,1,4,1,3,4,2,2,4,2,3,4,3,1,3,1,1,4,4,2,3,2,1,2,1,4,3,3,4,2,1,2,1,2,2,4,3,2,1,1,4,4,2,4,3,1
4,4,3,4,3,2,3,3,4,3,3,4,2,1,2,3,1,4,2,2,2,2,1,2,3,4,1,1,3,3,1,1,4,4,1,1,3,1,3,4,1,2,3,2,1,2,1,3,4,3,3,2,1,4,3,3,1,1,2,3,2,1,4,1,2,1,3,4,1,4,1,2,2,4,3,2,1,2,1,4,3,3,4,2,2,4,3,1,4,1,4,2,3,1,4,4,1,4,3,2
1,4,2,4,4,2,4,2,4,3,3,4,4,1,2,3,2,3,4,2,2,2,1,2,1,3,4,2,1,4,4,2,4,2,4,3,4,4,3,1,1,2,3,4,1,3,4,4,4,3,2,2,3,4,3,3,4,1,2,4,3,4,4,3,2,4,3,2,1,4,2,2,1,3,3,2,2,1,1,1,2,3,2,4,4,4,3,1,4,4,3,4,1,4,2,4,1,4,2,4
1,1,2,4,2,1,4,2,1,3,2,4,2,1,2,3,2,3,1,3,3,2,2,2,1,1,1,2,4,4,1,2,3,3,2,1,1,4,4,4,2,2,3,4,1,1,3,1,4,1,3,2,3,4,2,4,4,3,2,4,3,1,4,4,3,1,3,4,3,4,3,2,3,4,3,2,1,2,1,4,4,3,4,1,2,1,4,2,4,1,1,2,2,3,1,4,1,4,3,4
1,4,2,4,2,2,2,2,2,3,3,4,4,4,3,3,2,3,4,2,1,2,1,2,1,4,1,3,4,3,3,1,2,1,4,1,3,4,3,4,2,2,3,2,1,3,3,4,4,3,2,2,3,4,1,3,4,1,3,4,2,1,4,3,3,1,3,3,4,4,3,4,3,3,3,2,4,3,1,4,3,3,4,1,2,4,3,1,4,3,2,2,1,1,2,4,1,4,3,4
1,4,2,3,2,3,4,2,4,3,3,4,1,1,2,3,1,4,4,2,2,2,3,2,1,4,1,2,1,4,1,1,4,2,2,4,3,1,3,3,1,2,3,2,1,3,2,3,4,1,3,2,1,4,3,2,4,3,2,4,3,3,4,4,2,1,3,3,4,4,1,4,4,2,3,2,3,2,1,2,3,3,4,2,4,4,3,1,4,3,4,2,3,1,2,2,1,4,3,2
1,4,2,2,2,2,2,2,4,3,1,4,1,1,2,3,1,3,2,2,1,2,3,2,1,4,1,1,1,4,1,1,4,2,2,4,3,1,3,1,2,2,3,2,1,3,1,3,4,3,3,2,1,1,3,3,4,1,2,4,3,4,4,3,1,1,3,2,2,4,2,2,2,2,3,2,3,2,1,4,2,4,NA,2,4,2,4,1,4,4,1,2,2,1,2,4,3,4,3,2
1,4,2,4,2,2,1,2,1,4,3,4,1,1,2,3,1,3,4,3,2,2,1,2,1,4,1,3,1,3,1,1,4,2,2,4,3,1,4,3,1,2,3,2,1,4,1,4,4,3,3,2,1,1,1,3,1,1,2,4,4,4,4,3,2,1,3,3,4,4,1,2,2,2,3,2,3,2,1,1,2,2,4,2,4,4,3,1,4,4,4,2,1,1,2,2,1,4,3,2
1,4,2,2,4,2,1,2,4,3,3,4,2,3,2,3,1,3,4,2,1,2,1,2,3,1,4,1,3,4,1,2,3,1,1,1,1,1,2,4,1,2,3,1,1,2,1,3,4,2,2,3,3,4,1,3,4,3,2,4,3,2,4,2,2,1,3,4,4,4,1,2,3,2,3,1,3,2,1,4,3,4,4,2,2,1,3,4,3,3,3,2,1,1,4,4,2,2,3,2
1,4,2,4,2,3,2,2,1,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,3,1,4,1,1,4,4,2,3,3,3,3,3,1,2,3,1,1,4,1,3,4,3,3,2,1,1,3,2,4,1,4,4,3,1,4,3,2,3,3,3,1,1,1,4,2,2,3,1,1,1,1,4,3,2,4,2,4,2,4,4,4,3,4,2,3,1,4,4,1,4,3,2
2,4,2,4,2,2,1,3,4,3,3,4,2,1,2,3,1,3,4,2,1,2,1,2,3,4,1,3,1,3,1,1,4,4,2,2,3,1,3,4,1,2,3,2,1,4,1,3,4,1,4,2,1,1,3,4,1,3,2,4,3,2,4,3,2,1,3,4,2,4,1,2,4,3,3,2,4,2,1,4,3,3,3,3,4,1,3,1,4,2,4,2,2,1,2,4,1,4,4,2
1,4,2,4,4,2,3,2,4,3,3,2,1,1,2,3,2,3,4,2,2,2,1,2,1,2,1,2,2,3,1,1,3,1,2,3,1,4,3,3,1,2,3,2,4,4,1,4,4,3,2,2,1,1,3,3,1,1,3,4,3,4,4,3,1,1,3,1,3,4,1,4,2,4,3,2,3,1,1,1,3,4,4,2,4,1,3,4,4,4,2,2,1,1,4,4,2,4,3,1
1,4,2,2,2,3,4,2,4,1,3,4,4,3,2,3,1,3,4,2,1,2,1,2,1,4,1,3,3,4,1,1,3,2,2,4,3,4,3,4,2,2,3,2,1,1,1,3,4,3,2,2,4,4,1,3,4,3,2,4,3,4,1,3,2,1,3,4,4,3,2,2,4,2,3,1,2,2,1,3,4,2,4,2,1,4,3,1,4,4,1,2,1,1,4,4,1,1,3,4
2,4,2,1,4,2,4,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,1,4,1,2,1,3,1,2,3,2,2,4,3,4,4,1,1,2,3,2,1,3,4,4,4,1,3,2,4,4,1,3,4,3,2,4,3,2,4,3,2,2,3,3,3,4,2,2,2,2,3,2,3,1,1,2,3,2,4,2,4,2,3,2,4,3,4,2,1,1,2,2,1,4,4,4
4,4,2,4,2,2,2,2,4,3,3,2,1,1,2,3,2,3,4,1,1,4,1,2,1,4,1,2,4,3,1,4,3,1,2,4,1,1,3,4,1,2,3,1,1,4,2,3,4,2,2,4,3,4,1,2,4,3,3,4,3,2,4,4,2,3,3,1,4,3,2,4,1,3,3,1,1,2,1,1,3,3,4,1,1,3,3,2,4,1,4,2,1,4,4,4,3,4,3,2
1,4,3,1,2,2,4,3,2,2,3,4,2,1,2,3,1,3,1,2,2,2,1,2,3,1,1,3,1,3,1,1,3,4,2,3,3,1,4,1,1,1,3,1,1,3,2,4,1,3,3,2,4,1,3,2,3,1,2,4,3,3,4,1,2,2,3,3,1,4,4,4,4,2,3,3,2,1,1,2,2,2,4,2,1,2,3,1,4,3,4,2,4,3,2,2,2,4,3,3
1,4,2,4,2,2,1,2,4,3,3,4,1,1,2,3,1,3,4,2,2,2,1,2,2,4,1,3,1,3,1,1,4,2,2,1,3,1,4,1,1,2,3,2,1,3,2,4,4,3,3,2,1,1,3,4,4,3,2,4,3,1,4,2,4,3,3,3,1,4,1,2,1,2,3,2,2,2,1,4,3,4,4,2,4,2,3,1,4,4,4,2,1,4,2,3,1,4,3,4
2,4,2,4,4,2,4,1,2,2,3,4,2,4,2,3,2,3,4,2,1,2,2,2,3,4,1,3,1,3,1,1,4,4,2,1,2,4,3,4,1,2,3,2,1,3,2,3,4,3,2,3,2,1,1,3,4,3,1,4,3,4,4,2,2,1,3,2,4,4,1,2,4,2,3,2,2,1,1,4,3,4,4,1,4,4,3,4,3,2,4,2,1,1,4,2,1,4,4,1
1,4,2,4,4,2,2,3,4,2,3,4,1,1,2,3,1,3,4,1,1,2,1,2,1,4,1,3,1,4,1,1,4,3,1,4,3,1,3,1,1,2,3,2,1,3,1,3,4,1,3,2,2,1,3,3,2,1,2,4,3,2,4,3,2,4,3,4,3,4,1,2,1,2,3,2,3,2,1,1,2,3,4,2,4,2,3,1,4,3,4,2,1,1,2,4,1,4,3,2



================================================
FILE: build.zip
================================================
[Non-text file]


================================================
FILE: DESCRIPTION
================================================
Package: psychoPDA
Type: Package
Title: Psychometrics &  Post-Data Analysis
Version: 1.0.2
Author: Lucas Friesen
Maintainer: Lucas Friesen <lucas.j.friesen@gmail.com>
Description: P&PDA provides a suite of modules designed to enable researchers to perform post-data analyses in psychometric research. Currently, these functions include: Differential Item Functioning analysis.
Encoding: UTF-8
LazyData: true
Imports: jmvcore (>= 0.8.5), R6, stats, ggplot2, boot, cutpointr, psych, GPArotation, MASS, KernSmoothIRT, tidyr



================================================
FILE: jamoviPsychoPDA.Rproj
================================================
Version: 1.0

RestoreWorkspace: Default
SaveWorkspace: Default
AlwaysSaveHistory: Default

EnableCodeIndexing: Yes
UseSpacesForTab: Yes
NumSpacesForTab: 2
Encoding: ISO8859-1

RnwWeave: Sweave
LaTeX: pdfLaTeX

BuildType: Package
PackageUseDevtools: Yes
PackageInstallArgs: --no-multiarch --with-keep.source



================================================
FILE: NAMESPACE
================================================
exportPattern("^[[:alpha:]]+")
import(stats)
import(ggplot2)


================================================
FILE: .Rbuildignore
================================================
^.*\.Rproj$
^\.Rproj\.user$



================================================
FILE: .RData
================================================
[Non-text file]


================================================
FILE: data/dataverbal.csv
================================================
S1wantCurse,S1WantScold,S1WantShout,S2WantCurse,S2WantScold,S2WantShout,S3WantCurse,S3WantScold,S3WantShout,S4WantCurse,S4WantScold,S4WantShout,S1DoCurse,S1DoScold,S1DoShout,S2DoCurse,S2DoScold,S2DoShout,S3DoCurse,S3DoScold,S3DoShout,S4DoCurse,S4DoScold,S4DoShout,Anger,Gender
0,0,0,0,0,0,0,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,1,1,20,1
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,11,1
1,1,1,1,0,1,1,0,0,0,0,0,0,1,1,0,0,1,0,0,0,1,0,0,17,0
1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,21,0
1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,17,0
1,1,0,1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,0,21,0
1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,39,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,21,0
0,0,0,1,1,0,1,0,1,1,0,0,1,0,0,1,0,0,1,0,1,0,1,0,24,0
1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,16,0
1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,15,0
1,1,1,1,1,1,1,0,1,0,1,1,1,1,0,1,1,0,0,1,0,1,1,0,18,0
1,0,1,1,0,0,1,0,0,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,36,1
1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,0,22,1
1,0,0,1,0,1,0,1,1,1,0,0,1,1,0,1,1,0,1,0,0,1,1,0,16,0
1,0,1,1,0,1,1,0,0,1,0,0,1,1,1,0,0,0,1,0,0,1,1,0,18,0
1,0,0,1,0,1,0,0,0,1,0,0,1,1,1,1,1,0,1,1,1,1,1,1,23,0
1,0,1,1,0,1,1,0,1,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,16,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0
1,1,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,0,0,0,0,0,0,0,25,0
1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,22,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,15,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,26,0
1,0,1,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,13,0
0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,33,0
0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,17,0
1,1,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,17,0
1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,1,0,0,1,22,0
1,1,1,1,0,1,0,0,0,1,0,1,1,1,0,1,0,0,1,0,0,1,1,0,21,1
1,0,1,1,0,1,0,1,1,1,0,0,1,1,1,1,1,0,1,1,0,1,1,1,17,0
1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,19,0
1,1,1,1,1,0,1,1,1,1,0,1,1,1,1,1,1,0,1,0,1,1,1,1,18,1
0,0,0,1,0,0,0,1,0,0,0,0,1,1,1,1,1,0,1,1,0,1,0,1,33,1
1,1,1,1,0,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,19,0
1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,25,0
1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,17,0
0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0
0,0,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,1,0,0,14,0
0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,1,0,25,1
0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,1
1,1,1,0,0,0,1,1,1,1,0,1,0,0,1,0,0,0,0,0,1,0,0,1,20,0
0,0,0,0,0,1,1,1,1,0,0,1,0,1,1,0,0,0,0,1,0,1,0,1,25,0
1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0
0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,16,0
0,1,0,1,1,0,1,0,0,0,0,0,1,0,0,1,1,0,0,0,0,0,0,0,23,0
1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,19,0
1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,0,0,1,1,0,1,1,1,22,0
0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0
0,0,0,0,0,1,0,0,0,1,0,1,1,1,1,0,0,0,0,1,0,1,1,0,25,0
1,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,0,1,0,0,1,0,0,35,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,1,24,0
0,0,1,1,0,1,1,0,0,1,1,1,1,1,0,0,1,1,0,1,0,1,1,1,24,0
1,1,1,1,0,1,1,1,1,1,1,0,1,1,1,1,0,0,1,1,1,1,1,0,13,0
1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,0,0,26,0
0,0,0,0,0,1,0,0,1,0,0,0,1,0,1,1,0,0,1,1,0,1,0,0,25,0
1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,20,0
1,0,1,1,0,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,27,0
1,0,1,1,0,1,1,0,1,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,19,0
0,0,1,1,0,0,0,0,0,0,0,0,1,0,1,1,1,0,0,0,0,0,0,0,15,1
0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,18,0
1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,1,0,0,0,26,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,1,1,0,26,0
1,1,1,1,1,1,1,0,1,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,23,0
1,0,1,1,1,1,0,0,1,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,20,0
1,0,1,1,0,1,1,0,0,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,18,0
0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,1,0,0,1,1,0,30,0
1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,24,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,22,0
1,0,0,1,1,0,1,0,0,1,0,1,0,1,0,1,1,0,0,0,0,1,1,0,19,0
1,0,1,1,0,1,1,1,1,0,0,1,0,0,0,0,0,0,0,1,0,1,0,0,13,0
0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,17,0
1,0,0,1,0,1,0,0,0,1,1,1,0,1,1,1,1,1,0,0,0,0,1,1,29,0
0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0
1,1,1,1,1,1,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,19,0
0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,23,0
1,0,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,11,0
0,0,0,1,0,1,0,0,0,1,0,1,0,0,0,1,0,0,0,0,0,0,0,0,18,0
1,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,22,0
1,0,0,1,0,1,1,0,0,1,0,1,0,0,0,0,1,1,0,0,0,0,0,0,22,1
1,0,0,1,0,0,0,0,0,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,19,1
1,1,0,0,0,0,0,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,0,0,19,1
1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,21,0
1,0,0,1,0,0,0,1,0,1,0,0,1,0,0,1,1,0,1,1,0,0,1,0,25,0
1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,19,0
1,1,0,1,1,0,0,0,0,1,1,1,1,1,1,0,1,1,0,0,0,1,1,1,26,0
0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0
1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,20,0
1,1,1,1,1,0,1,0,0,1,1,1,1,1,0,1,0,0,0,0,0,1,1,1,17,0
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,1,0,17,1
1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,0
1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,16,0
1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,0,19,1
1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,1
1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,22,0
1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,18,0
0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,26,0
1,1,1,1,0,0,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,23,0
0,0,0,1,1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,15,0
1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,18,0
1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,27,0
0,1,0,0,1,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,1,0,0,21,0
0,1,0,0,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,21,0
1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,0,15,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,17,0
1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,1,0,0,0,0,0,1,0,1,15,0
0,0,0,1,0,0,1,0,0,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,23,0
1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,23,0
0,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,19,0
1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0
1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,18,0
1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0
1,1,0,1,1,0,1,1,0,1,1,1,0,0,0,1,0,0,1,1,0,1,0,0,16,0
1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,20,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,1,1,24,0
1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,0,0,0,0,0,26,0
1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,20,0
1,1,1,1,1,1,1,0,0,1,0,0,1,1,0,1,1,0,0,0,0,0,0,0,22,0
0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,16,1
0,0,1,1,0,1,1,0,1,1,1,1,1,0,0,1,0,0,1,0,1,1,1,1,18,1
1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,1,1,0,19,0
1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,1,0,0,1,0,0,1,0,0,25,0
1,0,0,1,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,22,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,23,1
1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,1,0,21,0
1,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,1,1,0,0,1,0,0,13,0
1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,1,1,0,16,0
1,1,0,1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,1,0,21,0
1,1,0,0,1,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,0
1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,23,0
1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,1,17,0
1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,14,0
0,0,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,29,0
0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,24,0
1,1,1,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,0,15,0
0,0,0,1,0,0,0,0,0,1,0,1,1,0,0,0,0,0,0,0,0,1,0,0,25,0
0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0
0,1,0,0,0,1,1,0,0,1,0,0,1,1,1,1,0,0,1,1,0,1,1,0,17,1
1,1,0,1,1,0,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,0,0,28,1
0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,15,0
1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0
1,1,0,1,1,0,1,0,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,1,26,0
1,1,1,1,1,1,0,0,1,1,1,0,1,0,1,1,0,1,0,0,0,1,1,0,18,0
1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,0,1,0,1,0,0,1,1,0,11,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,25,0
1,0,0,1,1,1,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,28,0
1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,25,0
0,1,1,1,1,1,0,0,0,1,1,0,1,0,1,1,1,1,0,0,0,1,1,0,14,0
1,1,0,1,1,0,0,0,0,1,0,0,1,1,0,1,0,0,0,0,0,1,1,0,17,0
0,1,0,0,0,0,0,0,0,1,0,0,1,0,1,0,0,0,0,0,0,1,0,0,18,0
1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,0,1,1,0,1,0,1,1,0,22,1
1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,1,1,1,1,0,0,0,1,0,17,0
1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,0,15,1
1,1,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,1,1,1,0,1,0,1,16,1
1,1,1,1,1,0,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,22,1
1,0,1,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,21,0
1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,0,0,0,0,0,0,19,0
1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,21,0
0,1,1,0,1,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,16,0
1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,0,0,0,1,1,0,17,0
1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,0,0,1,0,0,1,1,1,15,1
1,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,27,1
1,1,0,1,1,1,1,0,1,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,21,1
1,1,1,0,1,0,1,1,1,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,19,0
1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,17,0
1,1,0,1,1,1,1,0,0,1,1,0,1,1,0,0,0,0,1,0,0,1,1,1,21,0
1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,0,24,1
1,0,0,1,1,1,0,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,20,0
1,1,1,1,1,0,0,0,0,0,1,0,1,1,0,1,1,0,0,0,0,1,1,0,16,1
1,0,0,1,1,0,0,0,0,1,1,0,1,0,0,1,0,0,1,0,0,1,0,0,14,0
1,0,0,1,1,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,0,0,14,0
1,0,0,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,0,1,1,0,0,20,1
0,1,0,1,1,0,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,23,0
0,0,1,0,0,1,1,0,0,1,0,1,0,0,0,1,0,1,1,0,0,1,0,0,23,1
1,1,1,1,1,1,1,0,0,0,0,0,1,1,1,1,0,1,0,0,1,1,0,0,23,0
1,0,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,0,0,1,0,0,23,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,18,1
0,0,1,0,0,1,0,0,1,1,1,1,1,0,0,1,0,0,0,0,0,1,0,0,22,0
0,0,1,1,0,1,0,1,1,1,0,1,1,0,1,1,0,1,1,0,0,1,0,1,20,0
1,1,0,1,1,1,1,1,0,1,1,1,0,1,1,1,1,1,0,0,0,1,0,0,23,0
0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,16,1
1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,0,1,1,0,18,0
1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,1,1,0,12,0
1,1,0,1,1,0,1,0,0,1,0,1,1,1,0,1,1,0,0,0,0,1,0,1,17,0
0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,21,0
0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,1,1,0,0,0,0,0,1,0,21,0
0,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,1,16,0
0,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,19,1
1,1,0,1,1,0,0,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,19,1
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,13,1
0,0,0,0,0,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,1,0,0,31,1
1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,1,0,23,0
1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,25,0
1,1,1,1,1,1,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,19,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,11,0
0,0,1,0,0,0,0,0,0,0,0,1,1,1,0,1,1,0,0,0,0,1,1,0,28,0
0,0,0,1,0,0,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,27,0
0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,1,0,0,1,0,1,1,0,16,1
0,0,0,1,1,0,0,0,0,0,1,0,1,1,0,1,1,0,0,1,0,0,0,0,16,1
0,0,1,0,0,1,0,0,1,0,0,1,1,1,0,1,1,0,1,0,0,1,0,0,16,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,1,1,1,13,0
1,1,1,0,1,0,1,0,0,1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,21,1
1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,19,1
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,20,0
0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,0,0,0,0,1,1,0,13,1
1,1,0,1,1,0,1,0,0,1,0,0,1,0,0,1,1,0,1,0,0,1,0,0,15,1
1,1,1,0,1,0,1,1,0,0,0,0,1,1,1,1,1,0,1,1,0,0,0,0,14,0
0,0,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,15,0
1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,23,1
1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,13,1
1,1,0,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,1,21,1
1,1,1,1,1,1,0,1,0,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,19,0
1,1,1,1,0,1,0,0,0,0,1,1,0,1,1,1,1,0,1,0,0,1,1,0,23,0
0,0,0,0,0,0,0,0,0,0,1,0,1,1,0,1,1,0,1,0,0,1,1,0,20,1
1,1,1,1,1,1,0,0,0,0,1,0,1,1,1,1,1,1,1,1,0,1,0,0,19,1
1,1,0,1,0,0,0,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,14,0
1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,1,1,0,1,1,0,1,1,0,18,1
1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,1,0,0,22,1
1,0,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,23,1
1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,1,1,1,0,0,1,1,0,24,1
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,1,1,1,20,0
1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,1,1,0,1,1,1,22,0
1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,19,0
1,0,0,1,1,0,1,1,0,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,19,0
0,1,1,0,1,0,0,0,1,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,11,1
0,0,1,1,1,1,0,0,0,1,0,0,0,0,0,1,1,1,1,0,0,1,1,0,26,0
0,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,1,0,0,0,1,0,0,19,0
1,1,1,1,1,0,1,0,0,1,0,0,1,1,1,1,1,0,1,0,0,1,0,0,11,1
0,0,0,1,1,0,1,0,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,13,0
1,1,0,1,1,1,1,1,0,1,0,1,1,1,0,1,0,0,1,0,0,1,0,1,19,0
1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,1,0,0,1,0,0,17,0
0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,0,0,1,0,0,0,0,0,0,16,1
1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,0,0,0,1,1,0,1,1,0,18,0
1,1,1,1,1,1,1,1,0,1,1,0,1,1,1,1,0,1,0,0,0,1,1,0,27,1
1,1,1,1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,1,1,0,1,0,0,18,0
0,1,0,1,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,1,0,0,17,0
1,1,0,1,1,0,1,0,0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,0,20,0
1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,18,0
0,1,0,1,0,0,1,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,14,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0
1,1,1,0,1,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,18,0
1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,0,0,0,0,15,0
1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,1,0,0,0,0,0,1,0,18,0
1,1,1,1,1,1,0,0,0,1,1,1,1,1,1,1,1,0,0,0,0,1,1,0,27,0
0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0
1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,1,1,1,0,0,0,0,0,0,18,0
0,0,0,1,1,1,1,1,1,0,0,0,1,1,0,1,1,1,0,1,1,1,1,0,30,1
1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0
1,1,1,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,22,1
1,1,1,1,1,1,0,1,0,1,0,0,1,1,1,1,0,0,1,1,0,0,0,0,19,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,13,0
1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,34,0
1,1,1,1,1,0,0,0,0,0,0,0,1,1,0,0,0,0,1,0,0,0,0,0,19,0
1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,23,1
0,0,1,1,1,1,1,0,0,1,1,1,0,0,0,1,1,0,0,0,0,1,1,0,21,0
1,1,0,1,1,1,0,0,0,1,0,0,0,0,0,0,1,0,0,0,0,0,0,0,18,0
1,1,1,1,1,0,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,0,0,0,18,0
1,0,0,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,15,1
1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,21,1
0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,26,0
1,1,1,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,0,0,0,1,1,1,19,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,34,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,20,0
1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,21,0
1,1,0,1,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,0,0,0,0,26,0
1,1,0,1,1,1,1,1,0,1,0,0,1,1,0,1,1,0,1,0,0,1,0,0,23,0
1,1,0,1,1,0,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,14,0
0,1,1,1,1,0,0,0,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,23,0
0,1,1,0,1,1,0,1,0,0,1,1,0,0,1,0,0,0,0,0,0,0,0,1,17,0
1,1,1,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,1,0,0,0,0,0,18,0
1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,1,1,0,19,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,1,0,0,25,0
1,1,1,1,1,1,0,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,20,1
1,1,0,1,1,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,26,0
1,1,1,1,1,1,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,0,0,21,0
1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,1,0,0,15,0
0,1,1,1,1,1,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,18,0
1,1,0,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,1,1,0,0,0,0,21,0
0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,17,0
0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,1,0,0,0,0,0,0,1,0,15,0
1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,1,1,0,1,0,0,22,0
1,1,0,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,19,1
1,1,0,1,1,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,19,1
1,1,1,1,1,1,1,1,0,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,18,0
1,1,1,1,1,0,1,1,1,1,1,0,0,1,0,1,1,0,1,1,0,0,1,0,18,0
0,1,1,1,1,0,0,0,0,1,1,0,1,1,1,1,1,0,0,1,0,1,1,0,16,1
1,1,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,22,0
1,0,1,1,1,1,1,0,1,1,1,1,1,1,0,0,0,0,1,0,0,1,0,0,19,0
1,1,1,1,1,1,1,0,1,1,0,0,1,1,0,1,0,0,1,0,0,1,0,0,25,0
1,0,1,1,0,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,0,0,0,17,1
1,0,1,1,1,1,1,0,0,1,0,1,1,0,0,1,0,1,1,0,0,1,0,1,30,0
1,1,1,1,1,1,1,1,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,29,0
1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,1,1,0,0,1,1,0,27,0
1,1,1,1,1,1,1,0,0,1,1,1,1,1,1,1,1,1,1,0,0,1,0,1,18,0
1,1,1,0,1,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,27,0
0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,31,0
0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,0,19,0
0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,1,1,1,1,0,0,1,0,0,18,1
0,1,1,0,1,1,0,1,0,0,1,1,0,1,0,0,1,0,0,0,0,1,1,1,17,0
1,1,0,1,1,0,1,0,0,1,0,0,0,1,1,0,1,0,0,1,1,0,0,0,15,0
1,1,0,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,20,0
0,1,0,0,1,0,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,24,0
1,1,1,1,0,0,1,1,0,1,0,0,1,1,0,1,1,0,1,1,0,1,1,0,12,1
1,1,1,0,0,0,0,1,0,0,1,0,0,0,0,1,1,0,1,1,1,0,0,0,16,1
1,1,1,1,1,1,1,1,1,1,1,0,1,1,0,0,0,0,1,1,0,0,0,0,20,0
1,1,1,1,1,1,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,33,1
0,0,1,1,0,1,1,0,0,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,17,0
0,1,1,1,1,1,0,1,1,1,1,1,1,1,0,0,0,0,1,0,0,0,0,0,13,0
1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,14,0
1,1,0,0,0,0,1,1,1,1,0,0,1,1,1,0,0,0,1,1,0,1,0,0,23,0
1,1,1,1,1,0,1,1,0,0,1,0,1,1,0,1,0,1,1,1,0,0,0,0,24,1
1,1,1,1,1,1,1,0,1,0,0,0,1,1,1,1,1,1,1,0,0,0,0,0,17,1
1,1,0,1,1,0,1,1,0,1,1,0,1,0,0,0,0,0,1,0,0,0,0,0,20,0
0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,25,0
1,1,0,1,1,0,1,0,0,1,1,0,0,0,0,1,0,0,1,0,0,1,1,0,23,0
1,1,1,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,12,0


================================================
FILE: data/testROC.csv
================================================
"","age","gender","dsi","suicide"
"1",29,"female",1,"no"
"2",26,"male",0,"no"
"3",26,"female",0,"no"
"4",27,"female",0,"no"
"5",28,"female",0,"no"
"6",53,"male",2,"no"
"7",25,"female",0,"no"
"8",25,"male",1,"no"
"9",24,"female",0,"no"
"10",27,"female",0,"no"
"11",57,"female",1,"no"
"12",26,"female",0,"no"
"13",34,"female",0,"no"
"14",27,"female",0,"no"
"15",26,"female",0,"no"
"16",27,"female",0,"no"
"17",57,"male",0,"no"
"18",30,"female",0,"no"
"19",29,"female",0,"no"
"20",29,"female",0,"no"
"21",27,"female",4,"no"
"22",41,"male",0,"no"
"23",27,"female",0,"no"
"24",39,"male",0,"no"
"25",30,"male",1,"no"
"26",25,"female",0,"no"
"27",32,"female",0,"no"
"28",27,"female",0,"no"
"29",47,"male",0,"no"
"30",36,"male",0,"no"
"31",25,"female",0,"no"
"32",23,"female",1,"no"
"33",40,"female",0,"no"
"34",24,"female",0,"no"
"35",32,"female",0,"no"
"36",60,"female",0,"no"
"37",36,"female",0,"no"
"38",26,"female",0,"no"
"39",30,"female",0,"no"
"40",53,"female",0,"no"
"41",58,"male",0,"no"
"42",31,"female",0,"no"
"43",28,"female",0,"no"
"44",27,"female",4,"no"
"45",31,"female",0,"no"
"46",55,"female",0,"yes"
"47",26,"female",0,"no"
"48",26,"female",0,"no"
"49",27,"female",0,"no"
"50",38,"male",2,"no"
"51",25,"male",1,"no"
"52",36,"male",0,"no"
"53",52,"female",0,"no"
"54",30,"female",0,"no"
"55",59,"female",1,"no"
"56",27,"female",0,"no"
"57",27,"female",0,"no"
"58",29,"female",0,"no"
"59",26,"male",0,"no"
"60",28,"female",0,"no"
"61",25,"female",0,"no"
"62",27,"female",0,"no"
"63",31,"male",0,"no"
"64",28,"female",0,"no"
"65",28,"female",1,"no"
"66",24,"female",0,"no"
"67",51,"male",1,"no"
"68",18,"male",0,"no"
"69",27,"female",0,"no"
"70",30,"female",0,"no"
"71",25,"female",0,"no"
"72",25,"male",0,"no"
"73",72,"male",5,"no"
"74",29,"female",0,"no"
"75",64,"male",2,"no"
"76",27,"female",0,"no"
"77",26,"male",0,"no"
"78",26,"male",4,"no"
"79",24,"male",0,"no"
"80",61,"female",0,"no"
"81",31,"male",0,"no"
"82",26,"female",0,"no"
"83",23,"female",1,"no"
"84",27,"male",1,"no"
"85",45,"female",0,"no"
"86",51,"female",0,"no"
"87",25,"female",0,"no"
"88",71,"male",1,"no"
"89",54,"male",0,"no"
"90",27,"female",1,"no"
"91",27,"male",3,"no"
"92",27,"female",0,"no"
"93",55,"male",0,"no"
"94",54,"female",0,"no"
"95",23,"male",0,"no"
"96",25,"female",0,"no"
"97",42,"male",1,"no"
"98",21,"female",0,"no"
"99",28,"female",0,"no"
"100",55,"female",2,"no"
"101",60,"female",1,"no"
"102",33,"female",0,"no"
"103",28,"male",4,"no"
"104",25,"male",0,"no"
"105",54,"female",1,"no"
"106",25,"male",0,"no"
"107",25,"female",1,"no"
"108",78,"male",1,"no"
"109",28,"female",0,"no"
"110",27,"male",0,"no"
"111",47,"female",0,"no"
"112",58,"female",4,"no"
"113",77,"male",0,"no"
"114",43,"female",0,"no"
"115",56,"male",0,"no"
"116",28,"male",0,"yes"
"117",51,"female",2,"no"
"118",69,"male",0,"no"
"119",26,"male",0,"no"
"120",25,"female",0,"no"
"121",25,"male",0,"no"
"122",23,"male",0,"no"
"123",69,"female",0,"no"
"124",62,"male",0,"no"
"125",43,"male",0,"no"
"126",51,"male",0,"no"
"127",68,"female",1,"no"
"128",71,"male",0,"no"
"129",70,"male",0,"no"
"130",18,"male",6,"yes"
"131",29,"female",3,"no"
"132",52,"female",0,"no"
"133",41,"female",0,"no"
"134",31,"female",4,"yes"
"135",47,"male",3,"no"
"136",57,"female",0,"no"
"137",58,"female",2,"no"
"138",28,"female",0,"no"
"139",28,"male",1,"no"
"140",54,"female",4,"yes"
"141",29,"female",0,"no"
"142",23,"male",0,"no"
"143",79,"male",0,"no"
"144",29,"female",0,"no"
"145",54,"female",3,"no"
"146",24,"female",0,"no"
"147",26,"female",0,"no"
"148",20,"female",0,"no"
"149",53,"female",5,"yes"
"150",28,"male",4,"no"
"151",40,"female",0,"no"
"152",43,"female",0,"no"
"153",47,"female",4,"yes"
"154",53,"female",4,"no"
"155",60,"male",1,"no"
"156",28,"male",0,"no"
"157",28,"male",0,"no"
"158",32,"female",0,"no"
"159",36,"male",1,"yes"
"160",22,"female",0,"no"
"161",40,"male",0,"no"
"162",60,"female",0,"no"
"163",19,"female",0,"no"
"164",29,"female",0,"no"
"165",46,"male",0,"no"
"166",23,"female",1,"no"
"167",83,"male",0,"no"
"168",30,"female",0,"no"
"169",38,"male",3,"yes"
"170",25,"male",0,"no"
"171",35,"female",0,"no"
"172",61,"female",0,"no"
"173",57,"female",0,"no"
"174",64,"male",0,"no"
"175",25,"male",0,"no"
"176",28,"male",0,"no"
"177",24,"female",0,"no"
"178",21,"female",5,"yes"
"179",45,"female",7,"yes"
"180",27,"female",9,"yes"
"181",48,"male",4,"no"
"182",25,"male",0,"no"
"183",58,"female",0,"no"
"184",45,"female",1,"no"
"185",25,"female",6,"yes"
"186",62,"female",0,"no"
"187",29,"female",0,"no"
"188",18,"female",6,"no"
"189",22,"female",4,"no"
"190",18,"male",11,"yes"
"191",26,"female",10,"no"
"192",28,"female",0,"no"
"193",32,"female",7,"yes"
"194",54,"female",6,"yes"
"195",63,"female",0,"no"
"196",21,"male",10,"yes"
"197",20,"male",3,"no"
"198",33,"male",0,"no"
"199",18,"male",4,"no"
"200",26,"female",6,"yes"
"201",26,"female",0,"no"
"202",20,"female",5,"yes"
"203",39,"female",5,"no"
"204",33,"male",8,"yes"
"205",32,"female",7,"yes"
"206",29,"female",0,"no"
"207",26,"female",6,"yes"
"208",33,"male",0,"no"
"209",47,"female",6,"yes"
"210",22,"female",1,"no"
"211",50,"female",0,"no"
"212",72,"male",4,"no"
"213",60,"female",0,"no"
"214",26,"male",0,"no"
"215",18,"female",2,"yes"
"216",51,"female",0,"no"
"217",65,"female",0,"no"
"218",22,"female",1,"no"
"219",24,"female",0,"no"
"220",68,"female",0,"no"
"221",26,"female",0,"no"
"222",25,"male",0,"no"
"223",22,"male",6,"no"
"224",49,"male",0,"no"
"225",68,"male",1,"no"
"226",23,"female",1,"yes"
"227",64,"female",0,"no"
"228",80,"female",1,"no"
"229",29,"female",0,"no"
"230",25,"male",0,"no"
"231",26,"male",0,"no"
"232",30,"male",0,"no"
"233",48,"female",0,"no"
"234",24,"female",0,"no"
"235",25,"female",0,"no"
"236",50,"female",0,"no"
"237",34,"female",1,"no"
"238",26,"female",4,"no"
"239",27,"female",1,"no"
"240",70,"male",0,"no"
"241",24,"male",0,"no"
"242",30,"female",0,"no"
"243",54,"female",4,"no"
"244",26,"female",0,"no"
"245",25,"female",0,"no"
"246",27,"female",0,"no"
"247",28,"male",1,"no"
"248",30,"female",0,"no"
"249",44,"female",1,"no"
"250",25,"female",0,"no"
"251",31,"male",6,"no"
"252",25,"female",1,"no"
"253",30,"female",0,"no"
"254",27,"female",0,"no"
"255",21,"female",0,"no"
"256",26,"male",0,"no"
"257",28,"female",0,"no"
"258",21,"female",0,"no"
"259",30,"female",0,"no"
"260",22,"female",0,"no"
"261",30,"female",0,"no"
"262",34,"female",0,"no"
"263",28,"female",4,"no"
"264",32,"female",0,"no"
"265",38,"female",0,"no"
"266",34,"female",0,"no"
"267",64,"male",0,"no"
"268",25,"female",0,"no"
"269",30,"male",0,"no"
"270",42,"female",4,"no"
"271",30,"male",0,"no"
"272",57,"female",2,"no"
"273",27,"female",0,"no"
"274",23,"female",0,"no"
"275",29,"female",0,"no"
"276",39,"female",0,"no"
"277",26,"male",0,"no"
"278",25,"female",0,"no"
"279",34,"female",0,"no"
"280",52,"female",0,"no"
"281",26,"female",0,"no"
"282",65,"male",1,"no"
"283",25,"female",0,"no"
"284",30,"female",0,"no"
"285",33,"female",0,"no"
"286",26,"female",0,"no"
"287",26,"female",0,"no"
"288",46,"female",0,"no"
"289",32,"female",0,"no"
"290",36,"female",0,"no"
"291",45,"female",0,"no"
"292",25,"female",1,"no"
"293",31,"male",0,"no"
"294",29,"female",0,"no"
"295",28,"male",0,"no"
"296",68,"male",6,"no"
"297",50,"male",0,"no"
"298",46,"female",0,"no"
"299",26,"male",1,"no"
"300",56,"female",0,"no"
"301",71,"female",0,"no"
"302",26,"female",0,"no"
"303",38,"female",0,"no"
"304",22,"female",0,"no"
"305",27,"female",0,"no"
"306",26,"male",1,"no"
"307",22,"female",4,"yes"
"308",49,"male",4,"yes"
"309",63,"female",0,"no"
"310",40,"male",4,"yes"
"311",30,"female",4,"no"
"312",21,"female",0,"no"
"313",24,"female",1,"no"
"314",30,"male",1,"no"
"315",26,"male",0,"no"
"316",52,"female",0,"no"
"317",51,"male",0,"no"
"318",56,"male",0,"no"
"319",24,"female",1,"no"
"320",25,"female",1,"no"
"321",60,"male",2,"no"
"322",30,"female",0,"no"
"323",25,"male",0,"no"
"324",76,"male",0,"no"
"325",27,"female",0,"no"
"326",26,"female",6,"yes"
"327",57,"female",0,"no"
"328",29,"female",0,"no"
"329",69,"female",6,"yes"
"330",63,"female",0,"no"
"331",29,"male",5,"no"
"332",27,"male",3,"no"
"333",72,"female",1,"no"
"334",57,"female",0,"no"
"335",25,"male",0,"no"
"336",28,"female",0,"no"
"337",50,"male",0,"no"
"338",62,"male",0,"no"
"339",22,"male",0,"no"
"340",20,"female",4,"no"
"341",26,"female",1,"no"
"342",22,"female",6,"yes"
"343",24,"female",2,"yes"
"344",25,"female",4,"yes"
"345",28,"female",3,"no"
"346",41,"female",4,"no"
"347",23,"male",0,"no"
"348",29,"male",0,"no"
"349",75,"female",4,"no"
"350",23,"female",0,"no"
"351",34,"female",5,"yes"
"352",62,"female",0,"no"
"353",21,"female",0,"no"
"354",26,"female",0,"no"
"355",77,"female",0,"no"
"356",25,"female",4,"no"
"357",21,"female",0,"no"
"358",35,"female",0,"no"
"359",28,"male",2,"no"
"360",29,"female",0,"no"
"361",47,"female",0,"no"
"362",56,"female",0,"no"
"363",27,"female",0,"no"
"364",32,"male",0,"no"
"365",26,"male",0,"no"
"366",27,"male",0,"no"
"367",40,"female",0,"no"
"368",67,"male",0,"no"
"369",36,"female",1,"no"
"370",32,"female",0,"no"
"371",62,"male",0,"no"
"372",26,"female",0,"no"
"373",27,"male",0,"no"
"374",30,"female",0,"no"
"375",64,"female",4,"no"
"376",59,"female",0,"no"
"377",30,"male",0,"no"
"378",52,"female",0,"no"
"379",60,"male",0,"no"
"380",60,"female",0,"no"
"381",29,"male",0,"no"
"382",29,"female",0,"no"
"383",36,"male",0,"no"
"384",48,"female",0,"no"
"385",46,"male",0,"no"
"386",29,"female",0,"no"
"387",27,"male",0,"no"
"388",30,"male",5,"no"
"389",20,"female",0,"no"
"390",34,"female",0,"no"
"391",24,"female",5,"no"
"392",31,"female",5,"no"
"393",48,"female",5,"no"
"394",49,"female",4,"no"
"395",28,"female",0,"no"
"396",44,"female",0,"no"
"397",31,"male",4,"no"
"398",32,"female",0,"no"
"399",35,"female",0,"no"
"400",38,"male",6,"no"
"401",45,"male",5,"no"
"402",35,"female",0,"no"
"403",36,"female",2,"no"
"404",36,"female",0,"no"
"405",18,"female",0,"no"
"406",32,"male",0,"no"
"407",30,"female",0,"no"
"408",27,"female",3,"no"
"409",30,"female",0,"no"
"410",28,"female",0,"no"
"411",24,"female",1,"no"
"412",33,"female",4,"no"
"413",27,"female",0,"no"
"414",62,"female",0,"no"
"415",68,"male",4,"no"
"416",57,"female",0,"no"
"417",83,"male",0,"no"
"418",31,"male",0,"no"
"419",33,"male",0,"no"
"420",26,"female",0,"no"
"421",36,"female",1,"no"
"422",61,"female",0,"no"
"423",60,"male",0,"no"
"424",22,"female",2,"yes"
"425",26,"female",4,"no"
"426",46,"female",0,"no"
"427",30,"female",1,"no"
"428",19,"female",0,"no"
"429",32,"female",0,"no"
"430",20,"female",0,"no"
"431",18,"female",0,"no"
"432",20,"female",0,"no"
"433",21,"female",1,"no"
"434",23,"female",0,"no"
"435",28,"female",3,"no"
"436",26,"female",0,"no"
"437",19,"female",0,"no"
"438",19,"female",0,"no"
"439",26,"female",0,"no"
"440",19,"female",4,"no"
"441",23,"female",0,"no"
"442",20,"female",0,"no"
"443",30,"female",0,"no"
"444",21,"female",0,"no"
"445",20,"female",0,"no"
"446",22,"female",0,"no"
"447",21,"female",0,"no"
"448",20,"female",4,"yes"
"449",20,"female",0,"no"
"450",21,"female",0,"no"
"451",23,"female",0,"no"
"452",20,"female",0,"no"
"453",23,"female",0,"no"
"454",20,"female",0,"no"
"455",21,"female",0,"no"
"456",20,"female",5,"no"
"457",22,"female",0,"no"
"458",20,"female",1,"no"
"459",19,"female",3,"no"
"460",19,"female",0,"no"
"461",25,"female",0,"no"
"462",24,"female",0,"no"
"463",19,"female",0,"no"
"464",26,"female",0,"no"
"465",41,"female",0,"no"
"466",32,"female",0,"no"
"467",25,"female",1,"no"
"468",27,"female",0,"no"
"469",36,"female",0,"no"
"470",19,"female",0,"no"
"471",22,"female",0,"no"
"472",20,"female",2,"no"
"473",19,"female",0,"no"
"474",20,"female",0,"no"
"475",19,"female",0,"no"
"476",21,"female",0,"no"
"477",18,"female",0,"no"
"478",20,"female",0,"no"
"479",19,"female",0,"no"
"480",19,"female",1,"no"
"481",20,"female",0,"no"
"482",18,"female",0,"no"
"483",20,"female",0,"no"
"484",28,"female",0,"no"
"485",28,"female",3,"no"
"486",24,"female",5,"no"
"487",20,"female",0,"no"
"488",24,"female",0,"no"
"489",22,"female",0,"no"
"490",19,"female",0,"no"
"491",20,"female",0,"no"
"492",21,"female",0,"no"
"493",26,"female",0,"no"
"494",28,"female",0,"no"
"495",26,"female",0,"no"
"496",19,"female",0,"no"
"497",20,"female",0,"no"
"498",19,"female",4,"no"
"499",28,"female",0,"no"
"500",19,"female",0,"no"
"501",19,"female",1,"no"
"502",20,"female",0,"no"
"503",18,"female",0,"no"
"504",21,"female",0,"no"
"505",51,"female",0,"no"
"506",20,"female",0,"no"
"507",20,"female",0,"no"
"508",19,"female",0,"no"
"509",20,"female",0,"no"
"510",23,"female",0,"no"
"511",24,"female",0,"no"
"512",20,"female",0,"no"
"513",20,"female",1,"no"
"514",21,"female",0,"no"
"515",48,"female",3,"no"
"516",20,"female",0,"no"
"517",20,"female",0,"no"
"518",21,"female",0,"no"
"519",19,"female",2,"no"
"520",23,"female",0,"no"
"521",21,"female",0,"no"
"522",25,"female",0,"no"
"523",21,"female",0,"no"
"524",19,"female",0,"no"
"525",19,"female",0,"no"
"526",29,"female",0,"no"
"527",23,"female",0,"no"
"528",20,"female",0,"no"
"529",20,"female",0,"no"
"530",21,"female",0,"no"
"531",21,"female",0,"no"
"532",21,"female",0,"no"



================================================
FILE: data/.DS_Store
================================================
[Non-text file]


================================================
FILE: jamovi/0000.yaml
================================================
---
title: Psychometrics & Post-Data Analysis
name: psychoPDA
version: 1.0.5
jms: '1.0'
authors:
  - Lucas Friesen
maintainer: <lucas.j.friesen@gmail.com>
date: '2019-01-17'
type: R
description: >
  A suite designed to enable the performance of post-data analyses in
  pyschometric research.
analyses:
  - title: Binary LogR
    name: glmDIF
    ns: psychoPDA
    menuGroup: PPDA
    menuTitle: Binary LogR
    description: >
      Differential Item Functioning (DIF) analysis is used to assess items on

      a test or measure to determine whether or not certain groups are
      performing

      diferentially on that item.
    menuSubgroup: Differential Item Functioning
  - title: Test ROC
    name: TestROC
    ns: psychoPDA
    menuGroup: PPDA
    menuTitle: Test ROC
    menuSubgroup: Measure Diagnostics
  - title: T-Test for Mean Differences
    name: rdTTest
    ns: psychoPDA
    menuGroup: PPDA
    menuTitle: T-Test for Mean Differences
    hidden: true
    menuSubgroup: Design Analysis
  - title: T-Test for Correlations
    name: ttestCor
    ns: psychoPDA
    menuGroup: PPDA
    menuTitle: T-Test for Correlations
    hidden: true
    menuSubgroup: Design Analysis
  - title: Ordinal Reliability
    name: ordinalReliability
    ns: psychoPDA
    menuGroup: PPDA
    menuTitle: Ordinal Reliability
    menuSubgroup: Measure Diagnostics
  - title: Ordinal LogR
    name: ordinaldif
    ns: psychoPDA
    menuGroup: PPDA
    menuTitle: Ordinal LogR
    hidden: true
    menuSubgroup: Differential Item Functioning
  - title: Non-Parametric IRT
    name: nonParametricIRT
    ns: psychoPDA
    description: |
      Non-Parametric IRT as seen in [Gordana paper]
      v 0.1
    menuGroup: PPDA
    menuTitle: Non-Parametric IRT
    menuSubgroup: Item Response Theory
datasets:
  - name: Binary LogR
    path: dataverbal.csv
    description: Example data for the Binary LogR analysis
  - name: Test ROC
    path: testROC.csv
    description: Example data for the Test ROC analysis
usesNative: true
minApp: 1.0.8

...



================================================
FILE: jamovi/00refs.yaml
================================================
---
refs:
    testROC:
        type: 'software'
        author: Friesen, L., Kroc, E., Zumbo, B. D.
        year: 2019
        title: 'Psychometrics & Post-Data Analysis: Test ROC'
        publisher: '[jamovi module]. Retrieved from https://github.com/lucasjfriesen/jamoviPsychoPDA'
        url: https://github.com/lucasjfriesen/jamoviPsychoPDA
    NIRT:
        type: 'software'
        author: Friesen, L., Kroc, E., Zumbo, B. D.
        year: 2019
        title: 'Psychometrics & Post-Data Analysis: Non-Parametric Item Response Theory'
        publisher: '[jamovi module]. Retrieved from https://github.com/lucasjfriesen/jamoviPsychoPDA'
        url: https://github.com/lucasjfriesen/jamoviPsychoPDA
    binaryDIF:
        type: 'software'
        author: Friesen, L., Kroc, E., Zumbo, B. D.
        year: 2019
        title: 'Psychometrics & Post-Data Analysis: Binary Differential Item Functioning'
        publisher: '[jamovi module]. Retrieved from https://github.com/lucasjfriesen/jamoviPsychoPDA'
        url: https://github.com/lucasjfriesen/jamoviPsychoPDA
    gelmanCarlin2014:
        type: 'paper'
        author: Gelman, A., Carlin, J.
        year: 2014
        title: 'Beyond Power Calculations: Assessing Type S (Sign) and Type M (Magnitude) Errors'
        publisher: 'Perspectives on Psychological Science: A Journal of the Association for Psychological Science'
        doi: 10.1177/1745691614551642
    zumboThomas:
        type: 'paper'
        author: Zumbo, B. D., Thomas, R. D.
        year: 1997
        title: 'A measure of effect size for a model-based approach for studying DIF'
        publisher: 'Working Paper of the Edgeworth Laboratory for Quantitative Behavioral Science; University of Northern British Columbia: Prince George, B.C.'
    cutpointr:
        type: 'paper'
        author: Thiele, C.
        year: 2019
        title:  'cutpointr: Determine and Evaluate Optimal Cutpoints in Binary Classification Tasks'
        publisher: '[R package]. Retrieved from  https://cran.r-project.org/package=cutpointr'

...



================================================
FILE: jamovi/glmdif.a.yaml
================================================
---
name:  glmDIF
title: Binary LogR
menuGroup: PPDA
menuSubgroup: Differential Item Functioning
version: '1.0.0'
jas: '1.2'

description:
    main: |
        Differential Item Functioning (DIF) analysis is used to assess items on
        a test or measure to determine whether or not certain groups are performing
        diferentially on that item.
    R:
        usage:
            data('verbal')

options:
    - name: data
      type: Data
      description:
          ui: >
            The raw data with rows as test takers and item, grouping, and matching variables as columns.
          R: >
            The raw data with rows as test takers and item, grouping, and matching variables as columns

    - name: item
      title: Items
      type: Variables
      suggested:
        - continuous
      permitted:
        - numeric
      description:
          ui: >
            Items which are to be assessed for DIF.
          R: >
            A vector of strings naming the item columns from `data` which are to be assessed for DIF

    - name: group
      title: Grouping variable
      type: Variable
      suggested:
        - nominal
      permitted:
        - factor
        - numeric
      description:
          ui: >
            The grouping variable.
          R: >
            A string naming the grouping variable from `data`

    - name: groupContrasts
      title: Contrast groups
      type: String

    - name: matchVar
      title: Matching variable
      type: Variable
      suggested:
        - continuous
      permitted:
        - numeric
      description:
          ui: >
            The matching variable.
          R: >
            A string naming the matching variable from `data`

    - name: anchor
      title: Anchor item(s)
      type: Variables
      suggested:
        - continuous
      permitted:
        - numeric
      description:
          ui: >
            The anchor items for use in purification. This will be ignored if an external matching variable is supplied.
          R: >
            a vector of strings naming the anchor item columns from `data` for use in purification. This will be ignored if an external matching variable is supplied

    - name: groupType
      title: Group type
      type: List
      options:
      - name: groupBin
        title: Discrete groups (n = 2)
      - name: groupNonBin
        title: Discrete groups (n > 2)
      - name: cont
        title: Continuous variable
      description: 
        ui: >
          Either "discrete" (default) to specify that group membership is made of two (or more than two) groups, or "continuous" to indicate that group membership is based on a continuous criterion.
        R: >
          Either "discrete" (default) to specify that group membership is made of two (or more than two) groups, or "continuous" to indicate that group membership is based on a continuous criterion.

    - name: difFlagScale
      title: Evaluation scale
      type: List
      options:
        - name: zt
          title: Zumbo-Thomas
        - name: jg
          title: Jodoin-Gierl
      description:
        ui: >
          The effect size criterion scale to be used in assigning 'level' to flagged items.
        R: >
          The effect size criterion scale to be used in assigning 'level' to flagged items


    - name: designAnalysis
      type: Bool
      title: Design analysis
      default: false
      description:
        ui: >
          True/False, perform a design analysis. NB: Computationally intensive.
        R: >
          True/False, perform a design analysis. NB: Computationally intensive

    - name: designAnalysisEffectType
      type: List
      title: Effect type
      options:
        - name: nagR2
          title: "\u0394 Naeglekirke R\u00B2"
        - name: coefficients
          title: Regression Coefficients
      default: nagR2
      description:
        ui: >
          In progress
        R: >
          In progress

    - name: designAnalysisSigOnly
      type: Bool
      title: Flagged items only
      default: true
      description:
        ui: >
          True/False, should only items which have been flagged for exhibitting DIF be considered in the Design Analysis?
        R: >
          True/False, should only items which have been flagged for exhibitting DIF be considered in the Design Analysis?


    - name: bootSims
      title: Bootstrap N
      type: Number
      default: 1000
      description:
        ui: >
          Number of bootstrap simulations to perform.
        R: >
          Number of bootstrap simulations to perform

    - name: power
      type: Bool
      title: Empirical observed power
      default: false
      description:
        ui:
          True/False, display the empirical observed power.
        R: >
          True/False, display the empirical observed power

    - name: D
      title: Hypothesized true effect size
      type: String
      default: ''
      description:
        ui: >
          A character string indicating the hypothesized True Effect to be used in Design Analysis. Left blank will default to the category thresholds of the DIF scale selected.
        R: >
          A character string indicating the hypothesized True Effect to be used in Design Analysis. Left blank will default to the category thresholds of the DIF scale selected

    - name: type
      title: Type
      type: List
      options:
      - name: udif
        title: Uniform DIF
      - name: nudif
        title: Non-Uniform DIF
      - name: both
        title: Uniform and Non-Uniform DIF
      default: both
      description:
        ui: >
          A character string specifying which DIF effects must be tested. Possible values are "both" (default), "udif" and "nudif".
        R: >
          A character string specifying which DIF effects must be tested. Possible values are "both" (default), "udif" and "nudif"

    - name: criterion
      title: Flagging criterion
      type: List
      options:
      - name: "Wald"
        title: Wald Statistic
      - name: "LRT"
        title: "Likelihood Ratio Test"
      description:
        ui: >
          A character string specifying which DIF statistic is computed. Possible values are "LRT" (default) or "Wald".
        R: >
          A character string specifying which DIF statistic is computed. Possible values are "LRT" (default) or "Wald"

    - name: nagEff
      title: "Naeglekirke R\u00B2"
      type: Bool
      default: true

    - name: coeffEff
      title: Regression coefficients
      type: Bool
      default: FALSE

    - name: alpha
      title: Alpha
      type: Number
      default: 0.05
      description:
        ui: >
          Significance level.
        R: >
          Significance level

    - name: purify
      title: Item purification
      type: Bool
      default: FALSE
      description:
        ui: >
          Should the method be used iteratively to purify the set of anchor items? (default is FALSE). Ignored if an external matching variable is supplied.
        R: >
          Should the method be used iteratively to purify the set of anchor items? (default is FALSE). Ignored if an external matching variable is supplied

    - name: nIter
      title: Number of iterations
      type: Number
      default: 10
      description:
        ui: >
          The maximal number of iterations in the item purification process. (default is 10).
        R: >
          The maximal number of iterations in the item purification process. (default is 10)

    - name: pAdjustMethod
      title: P-value adjustment
      type: List
      options:
        - name: bonferroni
          title: Bonferroni
        - name: holm
          title: Holm
        - name: hochberg
          title: Hochberg
        - name: hommel
          title: Hommel
        - name: BH
          title: Benjamini-Hochberg
        - name: BY
          title: Benjamini-Yekutieli
        - name: none
          title: None
      default: none
      description:
        ui: >
          Either none (default) or the acronym of the method for p-value adjustment for multiple comparisons
        R: >
          Either none (default) or the acronym of the method for p-value adjustment for multiple comparisons.

    - name: plotVarsICC
      type: Variables
      description:
          ui: >
            Items for plotting Item Response Curves.
          R: >
            A vector of strings naming the item columns for plotting Item Response Curves

...



================================================
FILE: jamovi/glmdif.r.yaml
================================================
---
name:  glmDIF
title: Differential Item Functioning - Binary Logistic Regression
jrs:   '1.1'

items:
    #- name: debug
    #  title: debug
    #  type: Preformatted

    - name: instructions
      title: Instructions
      type: Html
      visible: True

    - name:  DESCtable
      title: Procedure Notes
      type:  Table
      visible: false
      rows: 0
      refs: binaryDIF
      clearWith:
          - item
          - group
          - matchVar
          - anchor
          - groupType
          - difFlagScale
          - type
          - criterion
          - alpha
          - nIter
          - purify
          - pAdjustMethod
          - designAnalysis
          - designAnalysisSigOnly
          - bootSims
          - D
          - twoGroups
          - groupContrasts
      columns:
        - name: bob
          title: ""
          type: text

    - name:  DIFtable
      title: Differential Item Functioning Analysis - Binary Logistic Regresion
      type: Table
      visible: false
      rows:  (item)
      clearWith:
          - item
          - group
          - matchVar
          - anchor
          - groupType
          - difFlagScale
          - type
          - criterion
          - alpha
          - nIter
          - purify
          - pAdjustMethod
          - twoGroups
          - groupContrasts

      columns:
        - name: item
          title: Item
          type: text

        - name: ZT
          refs: zumboThomas
          title: Zumbo-Thomas
          type: text
          visible: (difFlagScale:zt)

        - name: JG
          title: Jodoin-Gierl
          type: text
          visible: (difFlagScale:jg)

        #- name: difType
        #  title: Result
        #  type: text

        - name: p
          title: P-value
          type: number
          format: zto,pvalue

        - name: chiSquare
          title: "\u03A7\u00B2 Stat."
          type: number

        - name: effSize
          title: "\u0394 R\u00B2"
          type: number
          format: zto
          visible: (nagEff)

    - name: coefficientsTable
      title: "Binary Logistic Regression Coefficients"
      type: Table
      rows: 0
      columns:
        - name: itemName
          title: Item
          type: text
      visible: False
      clearWith:
          - item
          - group
          - matchVar
          - anchor
          - groupType
          - difFlagScale
          - type
          - criterion
          - alpha
          - nIter
          - purify
          - pAdjustMethod
          - designAnalysis
          - designAnalysisSigOnly
          - bootSims
          - D
          - twoGroups
          - groupContrasts

    - name: gcTable
      title: "Design Analysis - "
      refs: gelmanCarlin2014
      type: Table
      rows: 0
      visible: (designAnalysis)
      clearWith:
          - item
          - group
          - matchVar
          - anchor
          - groupType
          - difFlagScale
          - type
          - criterion
          - alpha
          - nIter
          - purify
          - pAdjustMethod
          - designAnalysis
          - designAnalysisSigOnly
          - bootSims
          - D
          - groupContrasts
          - designAnalysisEffectType
      columns:
        - name: itemName
          title: Item
          type: text
          combineBelow: True
        - name: coefficientName
          title: Term
          type: text
          visible: (designAnalysisEffectType:coefficients)
          combineBelow: True
        - name: obsEff
          title: Obs. Effect
          type: text
          combineBelow: True
        - name: bootSE
          title: Bootstrap SE
          type: number
          combineBelow: True
        - name: label
          title: Classification
          type: text
        - name: hypTrueEff
          title: Hyp. True Effect
          type: number
        - name: typeM
          title: Type-M Error
          type: number
        - name: typeS
          title: Type-S Error
          type: number
          visible: (designAnalysisEffectType:coefficients)
        - name: estimatedTE
          title: Est. True Effect
          type: number
        - name: power
          title: Empirical Observed Power
          type: number
          format: (zto)
          visible: (power)

    - name: ICCplots
      title: Item Response Curves - Based on Logistic Regression
      type: Array
      items: (plotVarsICC)
      template:
          type: Image
          width:  550
          height: 450
          renderFun: .plotICC
          visible: (plotVarsICC)
          requiresData: TRUE
          clearWith:
              - item
              - group
              - matchVar
              - anchor
              - groupType
              - difFlagScale
              - type
              - criterion
              - alpha
              - nIter
              - purify
              - pAdjustMethod
              - twoGroups
              - groupContrasts

...



================================================
FILE: jamovi/glmdif.u.yaml
================================================
title: Binary Differential Item Functioning
name: glmDIF
jus: '2.0'
stage: 0
compilerMode: tame
events:
  update: './glmdif.events::update'
children:
  - type: VariableSupplier
    name: itemSupplier
    label: Data variables
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Item(s) for Analysis
        children:
          - type: VariablesListBox
            name: item
            isTarget: true
            events:
              change: './glmdif.events::onChange_item'
      - type: TargetLayoutBox
        label: Anchor Items
        children:
          - type: VariablesListBox
            name: anchor
            isTarget: true
      - type: TargetLayoutBox
        label: Matching Variable
        children:
          - type: VariablesListBox
            name: matchVar
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Grouping Variable
        children:
          - type: VariablesListBox
            name: group
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: DIF Analysis
    margin: normal
    collapsed: true
    children:
      - type: LayoutBox
        stretchFactor: 1
        margin: large
        children:
          - type: Label
            label: Analysis
            fitToGrid: true
            cell:
              column: 0
              row: 0
            children:
              - type: ComboBox
                name: type
              - type: ComboBox
                name: criterion
              - type: ComboBox
                name: difFlagScale
              - type: TextBox
                name: alpha
                format: number
              - type: ComboBox
                name: pAdjustMethod
          - type: Label
            label: Grouping variable
            fitToGrid: true
            cell:
              column: 0
              row: 1
            children:
              - name: groupType_cont
                type: RadioButton
                optionName: groupType
                optionPart: cont
              - type: RadioButton
                name: groupType_binary
                optionName: groupType
                optionPart: groupBin
                label: Discrete groups (n = 2)
              - type: RadioButton
                name: groupType_nonBinary
                optionName: groupType
                optionPart: groupNonBin
                label: Discrete groups (n > 2)
                children:
                  - type: TextBox
                    name: groupContrasts
                    format: string
                    enable: '(groupType:groupNonBin)'
          - type: Label
            label: Effect type
            fitToGrid: true
            cell:
              column: 0
              row: 2
            children:
              - type: CheckBox
                name: nagEff
              - type: CheckBox
                name: coeffEff
          - type: Label
            label: Purification
            fitToGrid: true
            cell:
              column: 0
              row: 3
            children:
              - type: CheckBox
                name: purify
                enable: (anchor)
                children:
                  - type: TextBox
                    name: nIter
                    format: number
                    enable: (purify)
  - type: CollapseBox
    label: Design Analysis
    margin: normal
    collapsed: true
    children:
      - type: LayoutBox
        stretchFactor: 1
        margin: large
        children:
          - type: Label
            label: Analysis | Computationally Instensive
            fitToGrid: true
            cell:
              column: 0
              row: 0
            children:
                - type: CheckBox
                  name: designAnalysis
                - type: ComboBox
                  name: designAnalysisEffectType
                - type: TextBox
                  name: D
                  format: string
                - type: TextBox
                  name: bootSims
                  format: number

          - type: Label
            label: Advanced
            fitToGrid: true
            cell:
              column: 0
              row: 1
            children:
              - type: CheckBox
                name: designAnalysisSigOnly
              - type: LayoutBox
                margin: large
                children:
                  - type: CheckBox
                    name: power
  - type: CollapseBox
    label: Item Response Curves
    margin: normal
    collapsed: true
    children:
      - type: VariableSupplier
        name: plotVarsICCSupplier
        populate: manual
        persistentItems: false
        stretchFactor: 1
        events:
          update: './glmdif.events::onUpdate_plotVarsSupplier'
        children:
          - type: TargetLayoutBox
            children:
              - type: VariablesListBox
                name: plotVarsICC
                isTarget: true



================================================
FILE: jamovi/nonparametricirt.a.yaml
================================================
---
name:  nonParametricIRT
title: Non-Parametric IRT
menuGroup: PPDA
menuSubgroup: Item Response Theory
version: '1.0.0'
jas: '1.2'

options:
    - name: data
      type: Data

    - name: item
      title: Responses
      type: Variables
      suggested: [continuous]
      permitted: [numeric]

    - name: group
      title: Participant group
      type: Variable
      suggested: [ordinal]
      permitted: [factor]

#    - name: key
#      title: Response Key
#      type: Variable

#    - name: weights
#      title: Item Weights
#      type: Variable

    - name: format
      title: Item Format
      type: List
      options:
        - title: Binary
          name:  formatMC
        - title: Rating-scale
          name:  formatPartial
        - title: Nominal
          name:  formatNominal
      default: formatMC

  #  - name: SubRank
#      title: Participant Rank
#      type: Variable

    - name: miss
      title: Missing responses
      type: List
      options:
        - title: Permitted
          name:  option
        - title: Random fill uniform
          name:  random.unif
        - title: Random fill multinomial
          name:  random.multinom
        - title: Omit
          name:  omit
      default: option

    - name: NAweight
      type: Number
      title: Missing Response Weight
      min: 0
      max: 1
      default: 0

#    - name: nevalpoints
#      type: Number
#      title: Number of evaluation points
#      default: 51

#    - name: kernel
#      title: Kernel Function
#      type: List
#      options:
#        - title: Gaussian
#          name:  gaussian
#        - title: Quadratic
#          name:  quadratic
#        - title: Uniform
#          name:  uniform
#      default: gaussian

#    - name: bandwidth
#      title: Bandwidth
##      options:
  #      - title: Silverman
  #        name:  Silverman
  #      - title: Cross-validation
  #        name:  CV
  #    default: Silverman

  #  - name: RankFun
  #    title: Rank Function
  #    type: List
  #    options:
  #      - title: Sum
  #        name:  sum
  #      - title: Mean
  #        name:  mean
  #    default: sum

  #  - name: thetadist
  ##    title: Theta distribution
  #    #suffix: '('
  #    #prefix: ')'
  #    default: "norm, 0, 1"

    - name: OCCoption
      type: String
      title: Option Characteristic Curve | Option
      default: "1"

    - name: itemPlotOCC
      title: Option Characteristic Curve
      type: Bool
      default: FALSE

    - name: itemPlotEIS
      title: Expected Item Score
      type: Bool
      default: FALSE

    - name: itemPlotOCCDIF
      title: Option Characteristic Curve
      type: Bool
      default: FALSE

    - name: itemPlotEISDIF
      title: Expected Item Score
      type: Bool
      default: FALSE

    - name: pairwisePlotsDIF
      title: Pairwise
      type: Bool
      default: FALSE

    - name: itemPlotSupplier
      type: Variables
      title: Items

    - name: axisTypeTest
      title: X-Axis
      type: List
      options:
        - title: Theta distribution
          name:  distribution
        - title: Expected total score
          name:  score
      default: score

    - name: axisTypeItem
      title: X-Axis
      type: List
      options:
        - title: Theta distribution
          name:  distribution
        - title: Expected total score
          name:  score
      default: score

    - name: testPlotDensityDIF
      title: Density - DIF
      type: Bool
      default: FALSE

    - name: testPlotExpectedDIF
      title: Expected - DIF
      type: Bool
      default: FALSE

    - name: testPlotSDDIF
      title: Standard Deviation - DIF
      type: Bool
      default: FALSE

    - name: testPlotDensity
      title: Density
      type: Bool
      default: FALSE

    - name: testPlotExpected
      title: Expected
      type: Bool
      default: FALSE

    - name: testPlotSD
      title: Standard Deviation
      type: Bool
      default: FALSE

    - name: resTable
      title: Polyserial Item-Total Correlation
      type: Bool
      default: FALSE



...



================================================
FILE: jamovi/nonparametricirt.r.yaml
================================================
---
name:  nonParametricIRT
title: Non-Parametric IRT
jrs:   '1.1'

items:
    - name: debug
      title: debug results
      type: Preformatted

    - name: procedureNotes
      title: Procedure Notes
      type:  Table
      visible: false
      rows: 0
      refs: NIRT
      columns:
        - name: bob
          title: ""
          type: text

    - name: instructions
      title: Instructions
      type: Html
      visible: false

    - name:  resTable
      title: Polyserial Item-Total Correlation
      type:  Table
      visible: (resTable)
      clearWith:
          - item
          - group
          - format
          - SubRank
          - miss
          - NAweight
          - nevalpoints
          - kernel
          - bandwidth
          - RankFun
          - thetadist
      columns:
        - name: Item
          title: Item
          type: text
          combineBelow: true
        - name: Correlation
          title: Correlation
          type: number
          format: zto
          combineBelow: true
        - name: Option
          title: Option
          type: text
        - name: N
          title: N
          type: number

    - name: testPlotDensity
      title: Density Plot
      type: Image
      visible: (testPlotDensity)
      width:  550
      height: 450
      renderFun: .testPlotDensity
      clearWith:
          - item
          - group
          - format
          - SubRank
          - miss
          - NAweight
          - nevalpoints
          - kernel
          - bandwidth
          - RankFun
          - thetadist
          - axisTypeTest

    - name: testPlotExpected
      title: Expected Plot
      type: Image
      visible: (testPlotExpected)
      width:  550
      height: 450
      renderFun: .testPlotExpected
      clearWith:
          - item
          - group
          - format
          - SubRank
          - miss
          - NAweight
          - nevalpoints
          - kernel
          - bandwidth
          - RankFun
          - thetadist
          - axisTypeTest

    - name: testPlotSD
      title: SD Plot
      type: Image
      visible: (testPlotSD)
      width:  550
      height: 450
      renderFun: .testPlotSD
      clearWith:
          - item
          - group
          - format
          - SubRank
          - miss
          - NAweight
          - nevalpoints
          - kernel
          - bandwidth
          - RankFun
          - thetadist
          - axisTypeTest

    - name: testPlotDensityDIF
      title: Density Plot | DIF
      type: Image
      visible: (testPlotDensityDIF)
      width:  550
      height: 450
      renderFun: .testPlotDensityDIF
      clearWith:
          - item
          - group
          - format
          - SubRank
          - miss
          - NAweight
          - nevalpoints
          - kernel
          - bandwidth
          - RankFun
          - thetadist
          - axisTypeTest

    - name: testPlotExpectedDIF
      title: Expected Plot | DIF
      type: Image
      visible: (testPlotExpectedDIF)
      width:  550
      height: 450
      renderFun: .testPlotExpectedDIF
      clearWith:
          - item
          - group
          - format
          - SubRank
          - miss
          - NAweight
          - nevalpoints
          - kernel
          - bandwidth
          - RankFun
          - thetadist
          - axisTypeTest

    - name: testPlotSDDIF
      title: SD Plot | DIF
      type: Image
      visible: (testPlotSDDIF)
      width:  550
      height: 450
      renderFun: .testPlotSDDIF
      clearWith:
          - item
          - group
          - format
          - SubRank
          - miss
          - NAweight
          - nevalpoints
          - kernel
          - bandwidth
          - RankFun
          - thetadist
          - axisTypeTest


    - name: occPlots
      title: OCC Plots
      type: Array
      items: (itemPlotSupplier)
      template:
          type: Image
          width:  550
          height: 450
          renderFun: .occPlot
          visible: (itemPlotOCC)
          clearWith:
              - item
              - group
              - format
              - SubRank
              - miss
              - NAweight
              - nevalpoints
              - kernel
              - bandwidth
              - RankFun
              - thetadist

    - name: occPlotsDIF
      title: OCC Plots DIF
      type: Array
      items: (itemPlotSupplier)
      template:
          type: Image
          width:  550
          height: 450
          renderFun: .occPlotDIF
          visible: (itemPlotOCCDIF)
          clearWith:
              - item
              - group
              - format
              - SubRank
              - miss
              - NAweight
              - nevalpoints
              - kernel
              - bandwidth
              - RankFun
              - thetadist

    - name: eisPlots
      title: EIS Plots
      type: Array
      items: (itemPlotSupplier)
      template:
          type: Image
          width:  550
          height: 450
          renderFun: .eisPlot
          visible: (itemPlotEIS)
          clearWith:
              - item
              - group
              - format
              - SubRank
              - miss
              - NAweight
              - nevalpoints
              - kernel
              - bandwidth
              - RankFun
              - thetadist
              - axisTypeItem

    - name: eisPlotsDIF
      title: EIS Plots | DIF
      type: Array
      items: (itemPlotSupplier)
      template:
          type: Image
          width:  550
          height: 450
          renderFun: .eisPlotDIF
          visible: (itemPlotEISDIF)
          clearWith:
              - item
              - group
              - format
              - SubRank
              - miss
              - NAweight
              - nevalpoints
              - kernel
              - bandwidth
              - RankFun
              - thetadist

    - name: pairwisePlotsDIF
      title: Pairwise EIS | DIF
      type: Array
      items: (itemPlotSupplier)
      template:
          type: Image
          width:  550
          height: 450
          renderFun: .pairwisePlotsDIF
          visible: (pairwisePlotsDIF)
          clearWith:
              - item
              - group
              - format
              - SubRank
              - miss
              - NAweight
              - nevalpoints
              - kernel
              - bandwidth
              - RankFun
              - thetadist
...



================================================
FILE: jamovi/nonparametricirt.u.yaml
================================================
title: Non-Parametric IRT
name: nonParametricIRT
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Responses
        children:
          - type: VariablesListBox
            name: item
            isTarget: true
      - type: TargetLayoutBox
        label: Participant group
        children:
          - type: VariablesListBox
            name: group
            maxItemCount: 1
            isTarget: true
  - type: LayoutBox
    margin: large
    children:
      - type: CheckBox
        name: resTable
  - type: CollapseBox
    label: Response Parameters
    margin: normal
    collapsed: true
    children:
      - type: LayoutBox
        margin: large
        children:
          - type: ComboBox
            name: format
          - type: ComboBox
            name: miss
          - type: TextBox
            name: NAweight
            format: number
  - type: CollapseBox
    label: Test Plots
    margin: normal
    collapsed: true
    children:
      - type: LayoutBox
        margin: large
        children:
          - type: ComboBox
            name: axisTypeTest
      - type: LayoutBox
        margin: large
        style: inline
        children:
          - type: Label
            label: Full model
            children:
              - type: LayoutBox
                margin: large
                children:
                  - type: CheckBox
                    name: testPlotDensity
                  - type: CheckBox
                    name: testPlotExpected
                  - type: CheckBox
                    name: testPlotSD
          - type: Label
            label: DIF models
            children:
              - type: LayoutBox
                margin: large
                children:
                  - type: CheckBox
                    name: testPlotDensityDIF
                  - type: CheckBox
                    name: testPlotExpectedDIF
                  - type: CheckBox
                    name: testPlotSDDIF
  - type: CollapseBox
    label: Item Plots
    margin: normal
    collapsed: true
    children:
      - type: LayoutBox
        margin: large
        style: inline
        children:
          - type: ComboBox
            name: axisTypeItem
          - type: Label
            label: Full model
            children:
              - type: LayoutBox
                margin: large
                children:
                  - type: CheckBox
                    name: itemPlotOCC
                  - type: CheckBox
                    name: itemPlotEIS
          - type: Label
            label: DIF models
            children:
              - type: LayoutBox
                margin: large
                children:
                  - type: CheckBox
                    name: itemPlotOCCDIF
                  - type: CheckBox
                    name: itemPlotEISDIF
                  - type: CheckBox
                    name: pairwisePlotsDIF
      - type: LayoutBox
        margin: large
        style: list
        children:
          - type: TextBox
            name: OCCoption
            format: string
      - type: VariableSupplier
        persistentItems: false
        stretchFactor: 1
        children:
          - type: TargetLayoutBox
            label: Items
            children:
              - type: VariablesListBox
                name: itemPlotSupplier
                isTarget: true



================================================
FILE: jamovi/ordinaldif.a.yaml
================================================
---
name:  ordinaldif
title: Ordinal LogR
menuGroup: PPDA
menuSubgroup: Differential Item Functioning
version: '1.0.0'
jas: '1.2'

options:
    - name: data
      type: Data
      description:
          ui: >
            The raw data with rows as test takers and item, grouping, and matching variables as columns.
          R: >
            The raw data with rows as test takers and item, grouping, and matching variables as columns

    - name: item
      title: Items
      type: Variables
      suggested:
        - ordinal
      permitted:
        - factor
        - numeric
      description:
          ui: >
            Items which are to be assessed for DIF.
          R: >
            A vector of strings naming the item columns from `data` which are to be assessed for DIF

    - name: group
      title: Grouping variable
      type: Variable
      suggested:
        - nominal
      permitted:
        - factor
        - numeric
      description:
          ui: >
            The grouping variable.
          R: >
            A string naming the grouping variable from `data`

    - name: groupContrasts
      title: Contrast groups
      type: String

    - name: matchVar
      title: Matching variable
      type: Variable
      suggested:
        - continuous
      permitted:
        - factor
        - numeric
      description:
          ui: >
            The matching variable.
          R: >
            A string naming the matching variable from `data`

    - name: anchor
      title: Anchor item(s)
      type: Variables
      suggested:
        - continuous
      permitted:
        - numeric
      description:
          ui: >
            The anchor items for use in purification. This will be ignored if an external matching variable is supplied.
          R: >
            a vector of strings naming the anchor item columns from `data` for use in purification. This will be ignored if an external matching variable is supplied

    - name: groupType
      title: Group type
      type: List
      options:
      - name: groupBin
        title: Discrete groups (n = 2)
      - name: groupNonBin
        title: Discrete groups (n > 2)
      - name: cont
        title: Continuous groups
      description:
        ui: >
          Either "discrete" (default) to specify that group membership is made of two (or more than two) groups, or "continuous" to indicate that group membership is based on a continuous criterion.
        R: >
          Either "discrete" (default) to specify that group membership is made of two (or more than two) groups, or "continuous" to indicate that group membership is based on a continuous criterion.

    - name: difFlagScale
      title: Evaluation scale
      type: List
      options:
        - name: zt
          title: Zumbo-Thomas
        - name: jg
          title: Jodoin-Gierl
      description:
        ui: >
          The effect size criterion scale to be used in assigning 'level' to flagged items.
        R: >
          The effect size criterion scale to be used in assigning 'level' to flagged items


    - name: designAnalysis
      type: Bool
      title: Design analysis
      default: false
      description:
        ui: >
          True/False, perform a design analysis. NB: Computationally intensive.
        R: >
          True/False, perform a design analysis. NB: Computationally intensive

    - name: designAnalysisEffectType
      type: List
      title: Effect type
      options:
        - name: nagR2
          title: "\u0394 Naeglekirke R\u00B2"
        - name: coefficients
          title: Regression Coefficients
      default: nagR2
      description:
        ui: >
          In progress
        R: >
          In progress

    - name: designAnalysisSigOnly
      type: Bool
      title: Flagged items only
      default: true
      description:
        ui: >
          True/False, should only items which have been flagged for exhibitting DIF be considered in the Design Analysis?
        R: >
          True/False, should only items which have been flagged for exhibitting DIF be considered in the Design Analysis?


    - name: bootSims
      title: Bootstrap N
      type: Number
      default: 1000
      description:
        ui: >
          Number of bootstrap simulations to perform.
        R: >
          Number of bootstrap simulations to perform

    - name: power
      type: Bool
      title: Empirical observed power
      default: false
      description:
        ui:
          True/False, display the empirical observed power.
        R: >
          True/False, display the empirical observed power

    - name: D
      title: Hypothesized true effect size
      type: String
      default: ''
      description:
        ui: >
          A character string indicating the hypothesized True Effect to be used in Design Analysis. Left blank will default to the category thresholds of the DIF scale selected.
        R: >
          A character string indicating the hypothesized True Effect to be used in Design Analysis. Left blank will default to the category thresholds of the DIF scale selected

    - name: type
      title: Type
      type: List
      options:
      - name: udif
        title: Uniform DIF
      - name: nudif
        title: Non-Uniform DIF
      - name: both
        title: Uniform and Non-Uniform DIF
      default: both
      description:
        ui: >
          A character string specifying which DIF effects must be tested. Possible values are "both" (default), "udif" and "nudif".
        R: >
          A character string specifying which DIF effects must be tested. Possible values are "both" (default), "udif" and "nudif"

    - name: criterion
      title: Flagging criterion
      type: List
      options:
      - name: "Wald"
        title: Wald Statistic
      - name: "LRT"
        title: "Likelihood Ratio Test"
      description:
        ui: >
          A character string specifying which DIF statistic is computed. Possible values are "LRT" (default) or "Wald".
        R: >
          A character string specifying which DIF statistic is computed. Possible values are "LRT" (default) or "Wald"

    - name: nagEff
      title: "Naeglekirke R\u00B2"
      type: Bool
      default: true

    - name: deltaBetaFlag
      title: "Naeglekirke R\u00B2"
      type: Bool
      default: true

    - name: coeffEff
      title: Regression coefficients
      type: Bool
      default: FALSE

    - name: alpha
      title: Alpha
      type: Number
      default: 0.05
      description:
        ui: >
          Significance level.
        R: >
          Significance level

    - name: purify
      title: Item purification
      type: Bool
      default: FALSE
      description:
        ui: >
          Should the method be used iteratively to purify the set of anchor items? (default is FALSE). Ignored if an external matching variable is supplied.
        R: >
          Should the method be used iteratively to purify the set of anchor items? (default is FALSE). Ignored if an external matching variable is supplied

    - name: nIter
      title: Number of iterations
      type: Number
      default: 10
      description:
        ui: >
          The maximal number of iterations in the item purification process. (default is 10).
        R: >
          The maximal number of iterations in the item purification process. (default is 10)

    - name: pAdjustMethod
      title: P-value adjustment method
      type: List
      options:
        - name: bonferroni
          title: Bonferroni
        - name: holm
          title: Holm
        - name: hochberg
          title: Hochberg
        - name: hommel
          title: Hommel
        - name: BH
          title: Benjamini-Hochberg
        - name: BY
          title: Benjamini-Yekutieli
        - name: none
          title: None
      default: none
      description:
        ui: >
          Either none (default) or the acronym of the method for p-value adjustment for multiple comparisons
        R: >
          Either none (default) or the acronym of the method for p-value adjustment for multiple comparisons.

    - name: plotVarsICC
      type: Variables
      description:
          ui: >
            Items for plotting Item Response Curves.
          R: >
            A vector of strings naming the item columns for plotting Item Response Curves

...



================================================
FILE: jamovi/ordinaldif.r.yaml
================================================
---
name:  ordinaldif
title: Ordinal LogR
jrs:   '1.1'

items:

    - name: debug
      title: debug
      type: Html

    - name: twat
      title: deb twat
      type: Html

    - name: instructions
      title: Instructions
      type: Html
      visible: True

    - name:  DESCtable
      title: Procedure Notes
      type:  Table
      visible: false
      rows: 0
      refs: binaryDIF
      clearWith:
          - item
          - group
          - matchVar
          - anchor
          - groupType
          - difFlagScale
          - type
          - criterion
          - alpha
          - nIter
          - purify
          - pAdjustMethod
          - designAnalysis
          - designAnalysisSigOnly
          - bootSims
          - D
          - twoGroups
          - groupContrasts
      columns:
        - name: bob
          title: ""
          type: text

    - name:  DIFtable
      title: Differential Item Functioning Analysis - Ordinal Logistic Regresion
      type: Table
      visible: false
      rows: 0
      clearWith:
          - item
          - group
          - matchVar
          - anchor
          - groupType
          - difFlagScale
          - type
          - criterion
          - alpha
          - nIter
          - purify
          - pAdjustMethod
          - twoGroups
          - groupContrasts

      columns:
        - name: item
          title: Item
          type: text
        - name: model
          title: Model
          type: text

        - name: logOdds_matchingVar
          title: "log odds (Match)"
          type: number
        - name: logOdds_groupingVar
          title: "log odds (Group)"
          type: number

        - name: deltaOR_matchingVar
          title: "\u0394 OR (Match)"
          type: number
        - name: deltaOR_groupingVar
          title: "\u0394 OR (Group)"
          type: number

        - name: deltaBeta_matchingVar
          title: "\u0394 \u03B2 (Match)"
          type: number
        - name: deltaBeta_groupingVar
          title: "\u0394 \u03B2 (Group)"
          type: number

        - name: deltaNagR2
          title: "\u0394 R\u00B2"
          type: number
          format: zto
          #visible: (nagEff)
        - name: chiSquare
          title: "\u03A7\u00B2 Stat."
          type: number

        - name: p
          title: P-value
          type: number
          format: zto,pvalue

        - name: deltaBetaFlag_matchingVar
          title: "\u0394 \u03B2 Flag (Match)"
          type: text
          #visible: (deltaBetaFlag)
        - name: deltaBetaFlag_groupingVar
          title: "\u0394 \u03B2 Flag (Group)"
          type: text
          #visible: (deltaBetaFlag)

        - name: ZT
          refs: zumboThomas
          title: Zumbo-Thomas
          type: text
          #visible: (difFlagScale:zt)
        - name: JG
          title: Jodoin-Gierl
          type: text
          #visible: (difFlagScale:jg)

    - name: coefficientsTable
      title: "Ordinal Logistic Regression Coefficients"
      type: Table
      rows: 0
      columns:
        - name: itemName
          title: Item
          type: text
      visible: False
      clearWith:
          - item
          - group
          - matchVar
          - anchor
          - groupType
          - difFlagScale
          - type
          - criterion
          - alpha
          - nIter
          - purify
          - pAdjustMethod
          - designAnalysis
          - designAnalysisSigOnly
          - bootSims
          - D
          - twoGroups
          - groupContrasts

    - name: gcTable
      title: "Design Analysis - "
      refs: gelmanCarlin2014
      type: Table
      rows: 0
      visible: (designAnalysis)
      clearWith:
          - item
          - group
          - matchVar
          - anchor
          - groupType
          - difFlagScale
          - type
          - criterion
          - alpha
          - nIter
          - purify
          - pAdjustMethod
          - designAnalysis
          - designAnalysisSigOnly
          - bootSims
          - D
          - groupContrasts
          - designAnalysisEffectType
      columns:
        - name: itemName
          title: Item
          type: text
          combineBelow: True
        - name: coefficientName
          title: Term
          type: text
          visible: (designAnalysisEffectType:coefficients)
          combineBelow: True
        - name: obsEff
          title: Obs. Effect
          type: text
          combineBelow: True
        - name: bootSE
          title: Bootstrap SE
          type: number
          combineBelow: True
        - name: label
          title: Classification
          type: text
        - name: hypTrueEff
          title: Hyp. True Effect
          type: number
        - name: typeM
          title: Type-M Error
          type: number
        - name: typeS
          title: Type-S Error
          type: number
          visible: (designAnalysisEffectType:coefficients)
        - name: estimatedTE
          title: Est. True Effect
          type: number
        - name: power
          title: Empirical Observed Power
          type: number
          format: (zto)
          visible: (power)

    - name: ICCplots
      title: Item Response Curves - Based on Ordinal Logistic Regression
      type: Array
      items: (plotVarsICC)
      template:
          type: Image
          width:  550
          height: 450
          renderFun: .plotICC
          visible: (plotVarsICC)
          requiresData: TRUE
          clearWith:
              - item
              - group
              - matchVar
              - anchor
              - groupType
              - difFlagScale
              - type
              - criterion
              - alpha
              - nIter
              - purify
              - pAdjustMethod
              - twoGroups
              - groupContrasts

...



================================================
FILE: jamovi/ordinaldif.u.yaml
================================================
title: Ordinal LogR
name: ordinaldif
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    name: itemSupplier
    label: Data variables
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Item(s) for Analysis
        children:
          - type: VariablesListBox
            name: item
            isTarget: true
      - type: TargetLayoutBox
        label: Anchor Items
        children:
          - type: VariablesListBox
            name: anchor
            isTarget: true
      - type: TargetLayoutBox
        label: Matching Variable
        children:
          - type: VariablesListBox
            name: matchVar
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Grouping Variable
        children:
          - type: VariablesListBox
            name: group
            maxItemCount: 1
            isTarget: true
  - type: CollapseBox
    label: DIF Analysis
    margin: normal
    collapsed: true
    children:
      - type: LayoutBox
        stretchFactor: 1
        margin: large
        children:
          - type: Label
            label: Analysis
            fitToGrid: true
            cell:
              column: 0
              row: 0
            children:
              - type: ComboBox
                name: type
              - type: ComboBox
                name: criterion
              - type: ComboBox
                name: difFlagScale
              - type: TextBox
                name: alpha
                format: number
              - type: ComboBox
                name: pAdjustMethod
          - type: Label
            label: Grouping variable
            fitToGrid: true
            cell:
              column: 0
              row: 1
            children:
              - name: groupType_cont
                type: RadioButton
                optionName: groupType
                optionPart: cont
              - type: RadioButton
                name: groupType_binary
                optionName: groupType
                optionPart: groupBin
                label: Discrete groups (n = 2)
              - type: RadioButton
                name: groupType_nonBinary
                optionName: groupType
                optionPart: groupNonBin
                label: Discrete groups (n > 2)
                children:
                  - type: TextBox
                    name: groupContrasts
                    format: string
                    enable: '(groupType:groupNonBin)'
          - type: Label
            label: Effect type
            fitToGrid: true
            cell:
              column: 0
              row: 2
            children:
              - type: CheckBox
                name: nagEff
              - type: CheckBox
                name: coeffEff
          - type: Label
            label: Purification
            fitToGrid: true
            cell:
              column: 0
              row: 3
            children:
              - type: CheckBox
                name: purify
                enable: (anchor)
                children:
                  - type: TextBox
                    name: nIter
                    format: number
                    enable: (purify)
          - type: LayoutBox
            margin: large
            children:
              - type: CheckBox
                name: deltaBetaFlag
  - type: CollapseBox
    label: Design Analysis
    margin: normal
    collapsed: true
    children:
      - type: LayoutBox
        stretchFactor: 1
        margin: large
        children:
          - type: Label
            label: Analysis
            fitToGrid: true
            cell:
              column: 0
              row: 0
            children:
              - type: Label
                label: N.B. | Computationally Instensive
                children:
                  - type: CheckBox
                    name: designAnalysis
                  - type: ComboBox
                    name: designAnalysisEffectType
                  - type: TextBox
                    name: D
                    format: string
                  - type: TextBox
                    name: bootSims
                    format: number
          - type: Label
            label: Advanced
            fitToGrid: true
            cell:
              column: 0
              row: 1
            children:
              - type: CheckBox
                name: designAnalysisSigOnly
              - type: LayoutBox
                margin: large
                children:
                  - type: CheckBox
                    name: power
  - type: CollapseBox
    label: Item Response Curves
    margin: normal
    collapsed: true
    children:
      - type: VariableSupplier
        name: plotVarsICCSupplier
        persistentItems: false
        stretchFactor: 1
        children:
          - type: TargetLayoutBox
            children:
              - type: VariablesListBox
                name: plotVarsICC
                isTarget: true



================================================
FILE: jamovi/ordinalreliability.a.yaml
================================================
---
name:  ordinalReliability
title: Ordinal Reliability
menuGroup: PPDA
version: '1.0.0'
jas: '1.2'

options:
    - name: data
      type: Data

    - name: items
      title: Items
      type: Variables

  #  - name: groups
  #    title: Grouping Variable
  #    type: Variable

    - name: alphaTable
      type: Bool
      title: Alpha
      default: false

    - name: thetaTable
      type: Bool
      title: Theta
      default: false

    - name: omegaTable
      type: Bool
      title: Omega
      default: false

    - name: guttmanTable
      type: Bool
      title: Guttman
      default: false

    - name: polyTable
      type: Bool
      title: Polychoric matrix
      default: false

    - name: omegaPlot
      type: Bool
      title: Omega Factor Analysis

...



================================================
FILE: jamovi/ordinalreliability.r.yaml
================================================
---
name:  ordinalReliability
title: Ordinal Reliability
jrs:   '1.1'

items:
    #- name:  text
    #  title: Ordinal Reliability
    #  type:  Preformatted

    - name: instructions
      type: Html
      visible: True

    - name: summaryTableAlpha
      title: Ordinal Reliability
      type: Table
      rows: 1
      clearWith:
          - items
          #- groups
      columns:
        - name: raw_alpha
          title: raw_alpha
          type: number
        - name: std.alpha
          title: std.alpha
          type: number
        - name: G6
          title: G6(smc)
          type: number
        - name: average_r
          title: average_r
          type: number
        - name: SN
          title: SN
          type: number
        - name: median_r
          title: median_r
          type: number

    - name: summaryTableGuttman
      title: Ordinal Guttman
      type: Table
      visible: (guttmanTable)
      rows: 1
      clearWith:
          - items
          - groups
      columns:
        - name: maxSHR
          title: Max Split-Half (lambda 4)
          type: number
        - name: guttmanL6
          title: Lambda 6
          type: number
        - name: avgSHR
          title: Average Split-Half
          type: number
        - name: alpha
          title: Alpha (lambda 3)
          type: number
        - name: minSHR
          title: Min Split-Half (beta)
          type: number

    - name: summaryTableOmega
      title: Ordinal Omega
      type: Table
      visible: (omegaTable)
      rows: 1
      clearWith:
          - items
          - groups
      columns:
        - name: omega_h
          title: omega_h
          type: number
        - name: omega.lim
          title: omega.lim
          type: number
        - name: alpha
          title: alpha
          type: number
        - name: omega.tot
          title: omega.tot
          type: number
        - name: G6
          title: G6
          type: number

    - name: summaryTableTheta
      title: Ordinal Theta
      type: Table
      visible: (thetaTable)
      rows: 1
      clearWith:
          - items
          - groups
      columns:
        - name: ordinalTheta
          title: ordinalTheta
          type: number

    - name: polychoricRho
      title: Polychoric Correlation Matrix
      type: Preformatted
      visible: (polyTable)
      clearWith:
          - items
          - groups

    - name: omegaPlot
      title: Ordinal Omega Factor Analysis
      type: Array
      visible: (omegaPlot)
      items: 0
      template:
          type: Image
          width:  550
          height: 450
          renderFun: .plot
          clearWith:
            - items
            - groups
...



================================================
FILE: jamovi/ordinalreliability.u.yaml
================================================
title: Ordinal Reliability
name: ordinalReliability
jus: '3.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Items
        children:
          - type: VariablesListBox
            name: items
            isTarget: true
      - type: LayoutBox
        stretchFactor: 1
        margin: large
        style: inline
        children:
          - type: Label
            label: Ordinal Reliability Types
            children:
              - type: CheckBox
                name: alphaTable
              - type: CheckBox
                name: omegaTable
              - type: CheckBox
                name: thetaTable
              - type: CheckBox
                name: guttmanTable
      - type: LayoutBox
        stretchFactor: 1
        margin: large
        children:
          - type: Label
            label: Visualization
            children:
              - type: CheckBox
                name: polyTable
              - type: CheckBox
                name: omegaPlot



================================================
FILE: jamovi/rdttest.a.yaml
================================================
---	
name:  rdTTest	
title: T-Test for Mean Differences	
menuGroup: PPDA	
menuSubgroup: Design Analysis	
version: '1.0.0'	
jas: '1.2'	

options:	
    - name: data	
      type: Data	

    - name: labelVar	
      title: Label	
      type: Variable	

    - name: hypTrueEff	
      title: Hypothesised True Effect Size	
      type: Variable	
      suggested:	
        - continuous	
      permitted:	
        - numeric	

    - name: observedSE	
      title: Observed Standard Error	
      type: Variable	
      suggested:	
        - continuous	
      permitted:	
        - numeric	

    - name: observedP	
      title: Observed P-Value	
      type: Variable	
      suggested:	
        - continuous	
      permitted:	
        - numeric	

    - name: n	
      title: N	
      type: Variable	
      suggested:	
        - continuous	
      permitted:	
        - numeric	

    - name: alpha	
      type: Number	
      title: Alpha	
      default: 0.05	

    - name: nSims	
      type: Number	
      title: Number of Simulations	
      default: 10000	

    - name: sensHyp	
      title: Sensitivity - Hypothesized True Effect	
      type: Bool	
      default: TRUE	

    - name: sensN	
      title: Sensitivity - Sample Size	
      type: Bool	
      default: TRUE	

    - name: sensSE	
      title: Sensitivity - Standard Error	
      type: Bool	
      default: TRUE	

    - name: HTEViz	
      title: Sensitivity - Scatter Viz HTE	
      type: Bool	
      default: FALSE	


 #    - name: df	
#      type: Number	
#      title: Degrees of Freedom	
#      default: 9999


================================================
FILE: jamovi/rdttest.r.yaml
================================================
---	
name:  rdTTest	
title: T-Test	
jrs:   '1.1'	

items:	
    #- name: debug	
    #  title: debug	
    #  type: Preformatted	

    - name: instructions	
      title: Instructions	
      type: Html

    - name: rdTTest	
      title: Retroactive Design Analysis | Mean Differences	
      type:  Table	
      rows: 0	
      columns: 	
        - name: label	
          title: Label	
          type: number	
        - name: D	
          title: Hyp. True Difference	
          type: text	
        - name: typeS	
          title: Type-S	
          type: number	
        - name: typeM	
          title: Type-M	
          type: number	
        - name: power	
          title: Observed Power	
          type: number	


    - name: plotHTE	
      title: Sensitivity - Hypothesized True Effect	
      type: Image	
      visible: (sensHyp)	
      width:  800	
      height: 600	
      renderFun: .plotHTE	

    - name: plotN	
      title: Sensitivity - Sample Size	
      type: Image	
      visible: (sensN)	
      width:  800	
      height: 600	
      renderFun: .plotN	

    - name: plotSE	
      title: Sensitivity - Standard Error	
      type: Image	
      visible: (sensSE)	
      width:  800	
      height: 600	
      renderFun: .plotSE	

    - name: plotHTEViz	
      title: Sensitivity - Viz	
      type: Array	
      items: (hypTrueEff)	
      template:	
        type: Image	
        width:  800	
        height: 600	
        renderFun: .plotHTEViz	
        visible: (HTEViz)	
        requiresData: TRUE


================================================
FILE: jamovi/rdttest.u.yaml
================================================
title: T-Test for Mean Differences
name: rdTTest
jus: '3.0'
stage: 0
compilerMode: aggressive
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Label
        children:
          - type: VariablesListBox
            name: labelVar
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Hypothesised True Effect Size
        children:
          - type: VariablesListBox
            name: hypTrueEff
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Observed Standard Error
        children:
          - type: VariablesListBox
            name: observedSE
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Observed P-Value
        children:
          - type: VariablesListBox
            name: observedP
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: 'N'
        children:
          - type: VariablesListBox
            name: 'n'
            maxItemCount: 1
            isTarget: true
  - type: LayoutBox
    margin: large
    children:
      - type: TextBox
        name: alpha
        format: number
  - type: LayoutBox
    margin: large
    children:
      - type: TextBox
        name: nSims
        format: number
  - type: LayoutBox
    margin: large
    children:
      - type: CheckBox
        name: sensHyp
      - type: CheckBox
        name: sensN
      - type: CheckBox
        name: sensSE
      - type: CheckBox
        name: HTEViz



================================================
FILE: jamovi/testroc.a.yaml
================================================
---
name:  TestROC
title: Test ROC
menuGroup: PPDA
version: '1.0.0'
jas: '1.2'

options:
    - name: data
      type: Data

    - name: dependentVars
      title: Dependent Variable
      type: Variables
      suggested:
        - continuous
      permitted:
        - numeric

    - name: classVar
      title: Class Variable
      type: Variable
      suggested:
        - nominal
      permitted:
        - factor

    - name: subGroup
      title: Group Variable
      type: Variable
      suggested:
        - nominal
      permitted:
        - factor

    - name: method
      title: Method
      type: List
      options:
        - name: oc_manual
          title: "Custom cut score"
        - name: maximize_metric
          title: Maximize metric
        - name: minimize_metric
          title: Minimize metric
        - name: maximize_loess_metric
          title: Maximize metric (LOESS)
        - name: minimize_loess_metric
          title: Minimize metric (LOESS)
        - name: maximize_spline_metric
          title: Maximize metric (spline)
        - name: minimize_spline_metric
          title: Minimize metric (spline)
        - name: maximize_boot_metric
          title: Maximize metric (boot)
        - name: minimize_boot_metric
          title: Minimize metric (boot)
        - name: oc_youden_kernel
          title: "Maximize Youden-Index (Kernel smoothed)"
        - name: oc_youden_normal
          title: "Maximize Youden-Index (Parametric normal)"
      default: maximize_metric


    - name: allObserved
      title: All observed scores
      type: Bool

    - name: specifyCutScore
      title: Specify cut score
      type: String
      default: ""

    - name: metric
      title: Metric
      type: List
      options:
        - name: sum_sens_spec
          title: 'Sum: Sens/Spec'
        - name: accuracy
          title: Accuracy
        - name: youden
          title: Youden-Index
        - name: sum_ppv_npv
          title: 'Sum: PPV/NPV'
        - name: prod_sens_spec
          title: 'Prod: Sens/Spec'
        - name: prod_ppv_npv
          title: 'Prod: PPV/NPV'
        - name: cohens_kappa
          title: "Cohen's Kappa"
        - name: abs_d_sens_spec
          title: 'Abs. d: Sens/Spec'
        - name: roc01
          title: 'ROC'
        - name: abs_d_ppv_npv
          title: 'Abs. d: PPV/NPV'
        - name: p_chisquared
          title: 'Chi-squared'
        - name: odds_ratio
          title: Odds Ratio
        - name: risk_ratio
          title: Risk Ratio
        - name: misclassification_cost
          title: Misclassification Cost
        - name: total_utility
          title: Total Utility
        - name: F1_score
          title: F1 score

    - name: boot_runs
      title: Bootstrap runs
      type: Number

#    - name: use_midpoint
#      title: Use midpoint
#      type: Bool

    - name: break_ties
      title: Ties
      type: List
      options:
        - name: c
          title: All optimal cutpoints
        - name: mean
          title: Mean optimal cutpoint
        - name: median
          title: Median optimal cutpoint

    - name: tol_metric
      title: Tolerance metric
      type: Number
      default: 0.05

    - name: direction
      title: Direction
      type: List
      options:
        - name: ">="
          title: ">="
        - name: "<="
          title: "<="

    - name: plotROC
      title: ROC Curves
      type: Bool
      default: True

    - name: combinePlots
      title: Combine plots
      type: Bool
      default: True

    - name: displaySE
      title: Standard error bars
      type: Bool
      default: False

    - name: smoothing
      title: LOESS smoothing
      type: Bool
      default: False

    - name: sensSpecTable
      title: Sensitivity-specificity tables
      type: Bool
      default: False

    - name: delongTest
      title: DeLong's test
      type: Bool
      default: False

    - name: positiveClass
      title: Positive class
      type: String
      default: ""
...



================================================
FILE: jamovi/testroc.r.yaml
================================================
---
name:  TestROC
title: TestROC
jrs:   '1.1'

items:
    #- name: debug
    #  type: Preformatted

    - name: instructions
      type: Html
      visible: True

    - name: procedureNotes
      type: Html

    - name: resultsTable
      refs: 
        - cutpointr
        - testROC
      title: Results Table
      type: Array
      visible: True
      clearWith:
        - dependentVars
        - classVar
        - subGroup
        - method
        - allObserved
        - specifyCutScore
        - metric
        - boot_runs
        - break_ties
        - tol_metric
        - direction
        - positiveClass
      template:
        type: Table
        rows: 0
        columns:
          #- name: scaleName
          #  title: Scale
          #  type: text
          - name: cutpoint
            title: Cutpoint
            type: text
          - name: sensitivity
            title: 'Sensitivity (%)'
            type: text
          - name: specificity
            title: 'Specificity (%)'
            type: text
          - name: ppv
            title: 'PPV (%)'
            type: text
          - name: npv
            title: 'NPV (%)'
            type: text
          - name: youden
            title: Youden's index
            type: number
          - name: AUC
            title: AUC
            type: number
          - name: metricValue
            title: Metric Score
            type: number

    - name: delongTest
      title: DeLong Test of Difference between AUCs
      type: Preformatted
      visible: false #(delongTest)
      clearWith:
        - dependentVars
        - classVar
        - subGroup
        - method
        - allObserved
        - specifyCutScore
        - metric
        - boot_runs
        - break_ties
        - tol_metric
        - direction
        - positiveClass

    - name: plotROC
      type: Array
      title: ROC Curves
      template:
        type: Image
        width:  550
        height: 450
        renderFun: .plotROC
        visible: (plotROC)

    - name: sensSpecTable
      title: Sensitivity & Specificity
      type: Array
      visible: False
      clearWith:
        - dependentVars
        - classVar
        - subGroup
        - method
        - allObserved
        - specifyCutScore
        - metric
        - boot_runs
        - break_ties
        - tol_metric
        - direction
        - positiveClass
      template:
        type: Html

...



================================================
FILE: jamovi/testroc.u.yaml
================================================
title: TestROC
name: TestROC
jus: '2.0'
stage: 0
compilerMode: tame
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Dependent Variable
        children:
          - type: VariablesListBox
            name: dependentVars
            isTarget: true
      - type: TargetLayoutBox
        label: Class Variable
        children:
          - type: VariablesListBox
            name: classVar
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Group Variable
        children:
          - type: VariablesListBox
            name: subGroup
            maxItemCount: 1
            isTarget: true
  - type: LayoutBox
    margin: normal
    children:
      - type: CheckBox
        name: allObserved
      - type: TextBox
        name: positiveClass
        format: string
  - type: CollapseBox
    label: Visualization
    margin: normal
    collapsed: true
    children:
      - type: LayoutBox
        margin: large
        children:
          - type: Label
            label: Plots
            fitToGrid: true
            cell:
              column: 0
              row: 0
            children:
              - type: CheckBox
                name: plotROC
              - type: CheckBox
                name: combinePlots
              - type: CheckBox
                name: smoothing
              - type: CheckBox
                name: displaySE
          - type: Label
            label: Tables
            fitToGrid: true
            cell:
              column: 1
              row: 0
            children:
              - type: CheckBox
                name: sensSpecTable
  - type: CollapseBox
    label: Advanced
    margin: normal
    collapsed: true
    children:
      - type: LayoutBox
        margin: large
        children:
          - type: CheckBox
            name: delongTest
          - type: ComboBox
            name: method
          - type: ComboBox
            name: metric
          - type: TextBox
            name: tol_metric
            format: number
          - type: ComboBox
            name: break_ties
          - type: ComboBox
            name: direction
      - type: LayoutBox
        margin: large
        children:
          - type: TextBox
            name: specifyCutScore
            format: string
            enable: 'metric:oc_manual'
          - type: TextBox
            name: boot_runs
            format: number



================================================
FILE: jamovi/ttestcor.a.yaml
================================================
---	
name:  ttestCor	
title: T-Test for Correlations	
menuGroup: PPDA	
menuSubgroup: Design Analysis	
version: '1.0.0'	
jas: '1.2'	

options:	
    - name: data	
      type: Data	

    - name: labelVar	
      title: Label	
      type: Variable	
      suggested:	
        - nominal	

    - name: hypTrueCor	
      title: Hypothesised True Correlation	
      type: Variable	
      suggested:	
        - continuous	
      permitted:	
        - numeric	

    - name: observedSE	
      title: Observed Standard Error	
      type: Variable	
      suggested:	
        - continuous	
      permitted:	
        - numeric	

    - name: observedCor	
      title: Observed Correlation	
      type: Variable	
      suggested:	
        - continuous	
      permitted:	
        - numeric	

    - name: n	
      title: N	
      type: Variable	
      suggested:	
        - continuous	
      permitted:	
        - numeric	

    - name: alpha	
      type: Number	
      title: Alpha	
      default: 0.05	

    - name: sensHyp	
      title: Sensitivity - Hypothesized True Effect	
      type: Bool	
      default: TRUE	

    - name: sensN	
      title: Sensitivity - Sample Size	
      type: Bool	
      default: TRUE	

    - name: sensObs	
      title: Sensitivity - Observed Correlation	
      type: Bool	
      default: TRUE	


    - name: HTEViz	
      title: Sensitivity - Scatter Viz HTE	
      type: Bool	
      default: FALSE	

    - name: bootSims	
      type: Number	
      title: Number of Simulations	
      default: 10000	

    - name: lengthOut	
      type: Number	
      title: lengthOut	
      default: 1000	

    - name: corType	
      title: Correlation Type	
      type: List	
      options:	
        - name: pearson	
          title: Pearson	
        - name: spearman	
          title: Spearman


================================================
FILE: jamovi/ttestcor.r.yaml
================================================
---	
name:  ttestCor	
title: T-Test for Correlations	
jrs:   '1.1'	

items:	
    #- name: debug	
    #  title: debug	
    #  type: Preformatted	

    - name: instructions	
      title: Instructions	
      type: Html

    - name: rdTTestCor	
      title: Retroactive Design Analysis | Correlations	
      type:  Table	
      rows: 0	
      columns: 	
        - name: label	
          title: Label	
          type: text	
        - name: obsCor	
          title: Obs. Correlation	
          type: number	
        - name: obsN	
          title: N	
          type: number	
        - name: hypTrueCor	
          title: Hyp. True Correlation	
          type: number	
        - name: obsSE	
          title: Obs. SE	
          type: number	
        - name: hypTrueEffSD	
          title: D	
          type: number	
        - name: typeS	
          title: Type-S	
          type: number	
          format: zto,pvalue	
        - name: typeM	
          title: Type-M	
          type: number	
        - name: power	
          title: Emp. Obs. Power	
          type: number	
          format: zto,pvalue	

    - name: plotHTE	
      title: Sensitivity - Hypothesized True Effect	
      type: Image	
      visible: (sensHyp)	
      width:  800	
      height: 600	
      renderFun: .plotHTE	

    - name: plotN	
      title: Sensitivity - Sample Size	
      type: Image	
      visible: (sensN)	
      width:  800	
      height: 600	
      renderFun: .plotN	

    - name: plotObs	
      title: Sensitivity - Observed Correlation	
      type: Image	
      visible: (sensObs)	
      width:  800	
      height: 600	
      renderFun: .plotObs	

    - name: plotHTEViz	
      title: Sensitivity - Viz	
      type: Array	
      items: 0	
      template:	
        type: Image	
        width:  800	
        height: 600	
        renderFun: .plotHTEViz	
        visible: (HTEViz)	
        requiresData: TRUE	



================================================
FILE: jamovi/ttestcor.u.yaml
================================================
title: T-Test for Correlations
name: ttestCor
jus: '3.0'
stage: 0
compilerMode: aggressive
children:
  - type: VariableSupplier
    persistentItems: false
    stretchFactor: 1
    children:
      - type: TargetLayoutBox
        label: Label
        children:
          - type: VariablesListBox
            name: labelVar
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Hypothesised True Correlation
        children:
          - type: VariablesListBox
            name: hypTrueCor
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Observed Standard Error
        children:
          - type: VariablesListBox
            name: observedSE
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: Observed Correlation
        children:
          - type: VariablesListBox
            name: observedCor
            maxItemCount: 1
            isTarget: true
      - type: TargetLayoutBox
        label: 'N'
        children:
          - type: VariablesListBox
            name: 'n'
            maxItemCount: 1
            isTarget: true
  - type: LayoutBox
    margin: large
    children:
      - type: TextBox
        name: alpha
        format: number
  - type: LayoutBox
    margin: large
    children:
      - type: CheckBox
        name: sensHyp
      - type: CheckBox
        name: sensN
      - type: CheckBox
        name: sensObs
      - type: CheckBox
        name: HTEViz
  - type: LayoutBox
    margin: large
    children:
      - type: TextBox
        name: bootSims
        format: number
  - type: LayoutBox
    margin: large
    children:
      - type: TextBox
        name: lengthOut
        format: number
  - type: LayoutBox
    margin: large
    children:
      - type: ComboBox
        name: corType



================================================
FILE: jamovi/.DS_Store
================================================
[Non-text file]


================================================
FILE: jamovi/js/glmdif.events.js
================================================
const events = {
    update: function(ui) {
        updatePlotVarsICCSupplier(ui, this);
    },

    onChange_item: function(ui) {
        updatePlotVarsICCSupplier(ui, this);
    },
    
    onUpdate_plotVarsSupplier: function(ui) {
        updatePlotVarsICCSupplier(ui, this);
    },
};

let updatePlotVarsICCSupplier = function(ui, context) {
    let b1 = context.cloneArray(ui.item.value(), []);
    b1 = context.valuesToItems(b1, FormatDef.variable);
    ui.plotVarsICCSupplier.setValue(b1);
};


module.exports = events;




================================================
FILE: jamovi/js/.DS_Store
================================================
[Non-text file]


================================================
FILE: R/00jmv.R
================================================

# This file is automatically generated, you probably don't want to edit this

.jmvrefs <- list(
    `testROC`=list(
        `type`="software", 
        `author`="Friesen, L., Kroc, E., Zumbo, B. D.", 
        `year`=2019, 
        `title`="Psychometrics & Post-Data Analysis: Test ROC", 
        `publisher`="[jamovi module]. Retrieved from https://github.com/lucasjfriesen/jamoviPsychoPDA", 
        `url`="https://github.com/lucasjfriesen/jamoviPsychoPDA"), 
    `NIRT`=list(
        `type`="software", 
        `author`="Friesen, L., Kroc, E., Zumbo, B. D.", 
        `year`=2019, 
        `title`="Psychometrics & Post-Data Analysis: Non-Parametric Item Response Theory", 
        `publisher`="[jamovi module]. Retrieved from https://github.com/lucasjfriesen/jamoviPsychoPDA", 
        `url`="https://github.com/lucasjfriesen/jamoviPsychoPDA"), 
    `binaryDIF`=list(
        `type`="software", 
        `author`="Friesen, L., Kroc, E., Zumbo, B. D.", 
        `year`=2019, 
        `title`="Psychometrics & Post-Data Analysis: Binary Differential Item Functioning", 
        `publisher`="[jamovi module]. Retrieved from https://github.com/lucasjfriesen/jamoviPsychoPDA", 
        `url`="https://github.com/lucasjfriesen/jamoviPsychoPDA"), 
    `gelmanCarlin2014`=list(
        `type`="paper", 
        `author`="Gelman, A., Carlin, J.", 
        `year`=2014, 
        `title`="Beyond Power Calculations: Assessing Type S (Sign) and Type M (Magnitude) Errors", 
        `publisher`="Perspectives on Psychological Science: A Journal of the Association for Psychological Science", 
        `doi`="10.1177/1745691614551642"), 
    `zumboThomas`=list(
        `type`="paper", 
        `author`="Zumbo, B. D., Thomas, R. D.", 
        `year`=1997, 
        `title`="A measure of effect size for a model-based approach for studying DIF", 
        `publisher`="Working Paper of the Edgeworth Laboratory for Quantitative Behavioral Science; University of Northern British Columbia: Prince George, B.C."), 
    `cutpointr`=list(
        `type`="paper", 
        `author`="Thiele, C.", 
        `year`=2019, 
        `title`="cutpointr: Determine and Evaluate Optimal Cutpoints in Binary Classification Tasks", 
        `publisher`="[R package]. Retrieved from  https://cran.r-project.org/package=cutpointr"))



================================================
FILE: R/designAnalysis_utilities.R
================================================
retroDesign <- function(D,
                        observedSE,
                        alpha,
                        df,
                        nSims) {
  z <- qt(1 - alpha / 2, df)
  p.hi <- 1 - pt(z - D / observedSE, df)
  p.lo <- pt(-z - D / observedSE, df)
  power <- p.hi + p.lo
  typeS <- p.lo / power
  lambda <- D / observedSE
  typeM <-
    (dt(lambda + z, df = df) + dt(lambda - z, df = df) +
       lambda * (pt(lambda + z, df = df) + pt(lambda - z, df = df) - 1)) /
    (lambda * (1 - pt(lambda + z, df = df) + pt(lambda - z, df = df)))
  return(list(
    power = power,
    typeS = typeS,
    typeM = typeM
  ))
}

retroDesignEmp <- function(D,
                           observedSE,
                           alpha,
                           df,
                           nSims) {
  z <- qt(1 - alpha / 2, df)
  estimate <- D + observedSE * rt(nSims, df)
  return(list(
    estimate,
    rep(D, times = nSims),
    rep(z, times = nSims),
    rep(observedSE, times = nSims)
  ))
}


================================================
FILE: R/DIF_bootFunctions.R
================================================
# Bootstrap GC functions ----
        
        boot.printSE <- function(x,
                                 digits = getOption("digits"),
                                 index = 1L:ncol(boot.out$t),
                                 ...)
        {
          boot.out <- x
          sim <- boot.out$sim
          cl <- boot.out$call
          t <- matrix(boot.out$t[, index], nrow = nrow(boot.out$t))
          allNA <- apply(t, 2L, function(t)
            all(is.na(t)))
          ind1 <- index[allNA]
          index <- index[!allNA]
          t <- matrix(t[,!allNA], nrow = nrow(t))
          rn <- paste("t", index, "*", sep = "")
          if (length(index) == 0L)
            op <- NULL
          else if (is.null(t0 <- boot.out$t0)) {
            if (is.null(boot.out$call$weights))
              op <- cbind(apply(t, 2L, mean, na.rm = TRUE),
                          sqrt(apply(t, 2L, function(t.st)
                            var(t.st[!is.na(t.st)]))))
            else {
              op <- NULL
              for (i in index)
                op <-
                  rbind(op, imp.moments(boot.out, index = i)$rat)
              op[, 2L] <- sqrt(op[, 2])
            }
            dimnames(op) <- list(rn, c("mean", "std. error"))
            return(op)
          }
          else {
            t0 <- boot.out$t0[index]
            if (is.null(boot.out$call$weights)) {
              op <- cbind(t0, apply(t, 2L, mean, na.rm = TRUE) - t0,
                          sqrt(apply(t, 2L, function(t.st)
                            var(t.st[!is.na(t.st)]))))
              dimnames(op) <-
                list(rn, c("original", " bias  ", " std. error"))
              return(op)
            }
            else {
              op <- NULL
              for (i in index)
                op <-
                  rbind(op, imp.moments(boot.out, index = i)$rat)
              op <- cbind(t0, op[, 1L] - t0, sqrt(op[, 2L]),
                          apply(t, 2L, mean, na.rm = TRUE))
              dimnames(op) <- list(rn, c("original", " bias  ",
                                         " std. error", " mean(t*)"))
              return(op)
            }
          }
          
        }
        
        boot.retroStat <-
          function(DATA, ind, coefficients = FALSE, type) {
            ITEM <- (DATA[, 1])
            SCORE <- (DATA[, 3])
            GROUP <- (DATA[, 2])
            n <- nrow(DATA)
            
            m0 <- switch(
              type,
              both = glm(ITEM[ind] ~ SCORE * GROUP,
                         family = "binomial"),
              udif = glm(ITEM[ind] ~ SCORE +
                           GROUP, family = "binomial"),
              nudif = glm(ITEM[ind] ~ SCORE *
                            GROUP, family = "binomial")
            )
            
            m1 <-
              switch(
                type,
                both = glm(ITEM[ind] ~ SCORE, family = "binomial"),
                udif = glm(ITEM[ind] ~ SCORE, family = "binomial"),
                nudif = glm(ITEM[ind] ~
                              SCORE + GROUP, family = "binomial")
              )
            
            deltaNagR2 <- function(m0, m1, n) {
              R2cox0 <-  1 - exp((m0$deviance - m0$null.deviance) / n)
              R2nag0 <-  R2cox0 / (1 - exp((-m0$null.deviance) / n))
              
              R2cox1 <-  1 - exp((m1$deviance - m1$null.deviance) / n)
              R2nag1 <-  R2cox1 / (1 - exp((-m1$null.deviance) / n))
              deltaNagR2 <- R2nag0 - R2nag1
              return(deltaNagR2)
            }
            
            if (coefficients) {
              res <- coefficients(m0)
            } else {
              res <- deltaNagR2(m0, m1, n)
            }
            
            return(res)
          }
        
        boot.qEmp <- function(empFn, x) {
          quantile(empFn, x)
        }
        
        boot.pEmp <- function(empFn, x) {
          empFn(x)
        }
        
        boot.dEmp <- function(empFn, qEmp, dPoint, values) {
          dens <- density(values)
          i <- dens$x[which.min(abs(dens$x - dPoint))]
          dens_x <- dens$y[dens$x == i]
          dens_x
        }
        
        boot.empDist <- function(DATA, R, type, coefficients) {
          # Get bootstrapped distribution
          myBoot <- boot::boot(DATA, boot.retroStat, R = R, type = type, coefficients = coefficients)
          if (!all(!is.na(myBoot$t))) {
            self$results$gcTable$setNote(
              key = colnames(DATA)[1],
              note = paste0(
                "WARNING: ",
                length(myBoot$t) - length(na.omit(myBoot$t)),
                " of ",
                length(myBoot$t),
                " simulations did not converge for item '",
                colnames(DATA)[1],
                "'"
              )
            )
            myBoot$t <- na.omit(myBoot$t)
          }
          return(myBoot)
        }


================================================
FILE: R/DIF_designAnalysisFunctions.R
================================================
designAnalysis.nagR2 <-
  function(designList,
           Data,
           group,
           match,
           bootSims,
           type,
           hypTrueEff,
           alpha,
           difFlagScale,
           sigOnly) {
    if (hypTrueEff == "") {
      if (difFlagScale == "zt") {
        hypTrueEff <- c(0, 0.13, 0.26)
      } else {
        hypTrueEff <- c(0, 0.035, 0.07)
      }
      labels <- c("A", "B", "C")
    } else {
      hypTrueEff <- as.numeric(hypTrueEff)
      labels <- c("Custom Hyp.")
    }
    
    GC <-
      data.frame(
        "label" = rep(as.character(), times = length(designList) * length(hypTrueEff)),
        "item" = rep(as.character(), times = length(designList) * length(hypTrueEff)),
        "obsEff" = rep(as.numeric(), times = length(designList) *
                         length(hypTrueEff)),
        "hypTrueEff" = rep(as.numeric(), times = length(designList) *
                             length(hypTrueEff)),
        "typeM" = rep(as.numeric(), times = length(designList) *
                        length(hypTrueEff)),
        "power" = rep(as.numeric(), times = length(designList) *
                        length(hypTrueEff)),
        "bootSE" = rep(as.numeric(), times = length(designList) *
                         length(hypTrueEff)),
        stringsAsFactors = FALSE
      )
    
    
    for (item in 1:length(designList)) {
      empDATA <-
        cbind(Item = jmvcore::toNumeric(Data[, designList[item]]),
              as.factor(group),
              match)
      colnames(empDATA) <-
        c(colnames(Data)[item], "GROUP", "SCORES")
      
      myBoot <-
        boot.empDist(empDATA,
                     R = bootSims,
                     type = type,
                     coefficients = FALSE)
      
      tick <- length(hypTrueEff) - 1
      
      for (hypInd in 1:length(hypTrueEff)) {
        retroDesignRes <-
          retroDesign.nagR2(
            hypTrueEff = hypTrueEff[hypInd],
            myBoot,
            alpha = alpha,
            sigOnly = sigOnly
          )
        
        GC[item * length(hypTrueEff) - tick, 1] <-
          labels[hypInd]
        GC[item * length(hypTrueEff) - tick, 2] <-
          designList[item]
        GC[item * length(hypTrueEff) - tick, 3] <-
          as.numeric(retroDesignRes[5])
        GC[item * length(hypTrueEff) - tick, 4:7] <-
          as.numeric(retroDesignRes[1:4])
        tick <- tick - 1
      }
    }
    
    return(GC)
  }

designAnalysis.coefficients <- function(designList,
                                        hypTrueEff,
                                        coefficient,
                                        coefficientsSE,
                                        alpha,
                                        df,
                                        difFlagScale,
                                        sigOnly) {
  if (hypTrueEff == "") {
    hypTrueEff <- 0
    labels <- "Null"
  } else {
    hypTrueEff <- as.numeric(hypTrueEff)
    labels <- c("Custom Hyp.")
  }
  retroDesignRes <- list()
  
  for (item in 1:length(designList)) {
    retroDesignRes[[item]] =
      retroDesign.coefficients(
        hypTrueEff = hypTrueEff,
        coefficient = coefficient[item,],
        coefficientsSE = coefficientsSE[item,],
        alpha = alpha,
        df = df,
        sigOnly = sigOnly
      )
  }
      return(retroDesignRes)
}



================================================
FILE: R/DIF_retroDesignFunctions.R
================================================
# retroDesign ----
        retroDesign.nagR2 <- function(hypTrueEff, myBoot, alpha, sigOnly) {
          rdRes <- matrix(0, nrow = 1, ncol = 5)
          rdRes[1, 1] <- myBoot$t0
          
          # se of empirical distribution
          rdRes[1, 4] <- observedSE <- boot.printSE(myBoot)[[3]]
          
          # Observed R^2
          D <- myBoot$t0
          
          # Empirical cumulative density function on the bootstrapped data
          qUpper <- ecdf(myBoot$t)
          if (sigOnly) {
            # Quantile matching the upper 1 - alpha in the emp. dist.
            qUpper <- quantile(qUpper,  1 - (alpha))
          } else {
            # Quantile matching the observed value
            qUpper <- boot.qEmp(qUpper, boot.pEmp(qUpper, D))
          }
          
          ## shifts distribution by the difference between the observed effect size and the empirical effect size
          myBoot.Shifted <- ecdf(myBoot$t + hypTrueEff)
          rdRes[1, 3] <- power <- 1 - myBoot.Shifted(qUpper)
          # typeM error rate via Estimation
          estimate <-
            D + sample(myBoot$t, replace = T, size = 10000)
          significant <- estimate > qUpper
          if (hypTrueEff == 0){
            hypTrueEff <- observedSE*2
          }
          rdRes[1, 5] <- hypTrueEff
          rdRes[1, 2] <-
            typeMError <- mean(estimate[significant]) / hypTrueEff
          return(rdRes)
        }
        
        retroDesign.coefficients <- function(hypTrueEff, coefficient, coefficientsSE, alpha, df, sigOnly) {
          D <- abs(hypTrueEff - coefficient)
          lambda <- D / coefficientsSE
          
          if (sigOnly) {
            # Quantile matching the upper 1 - alpha in the emp. dist.
            z <- qt(1 - (alpha), df)
          } else {
            # Quantile matching the observed value
            z <- qt(pt(lambda, df = df), df = df)
          }
          
          exp1S <- pt(-z - lambda, df)
          exp2S <- pt(z - lambda, df)
          
          power <- exp1S + 1 - exp2S
          typeS <- exp1S / (exp1S + 1 - exp2S)
          
          # typeM error rate
          exp1M <- dt(lambda + z, df)
          exp2M <- dt(lambda - z, df)
          exp3M <- pt(lambda + z, df)
          exp4M <- pt(lambda - z, df)
          
          typeM <- (exp1M + exp2M +
                      lambda * (exp3M + exp4M - 1)) /
            (lambda * (1 - exp3M + exp4M))
          return(list("obsEff" = lambda, "typeS"=typeS, "typeM"=typeM, "power"=power, "label"=hypTrueEff, "bootSE"=coefficientsSE))
        }
        



================================================
FILE: R/DIF_utilities_binary.R
================================================
# Binary DIF ----
# difLogReg is a starter function to determine whether GLM or LM should be used, as well as QA on the arguments input

binaryDIF.logistic <-
    function (DATA,
              group,
              groupOne,
              anchor,
              anchorNames,
              groupType,
              match,
              type,
              criterion,
              alpha,
              purify,
              nIter,
              pAdjustMethod)
    {
        if (purify & match[1] != "score") {
            stop(
                "purification not allowed when using a custom matching variable. Please remove the custom matching variable or deselect 'Purification'."
            )
            return()
        }

        internalLog <- function() {
          DF <- ifelse(type == "both", 2 * length(groupOne), length(groupOne))
            if (groupType == "group") {
                # Group <- rep(0, NROW(DATA))
                # Group[group == groupOne] <- 1
                # for (i in 1:DF) Group[group == groupOne[i]] <- i
              Group <- group
            } else {
                Group <- group
            }

            sigThreshold <-
                switch(
                    type,
                    both = qchisq(1 - alpha, 2 * length(groupOne)),
                    udif = qchisq(1 -
                                      alpha, length(groupOne)),
                    nudif = qchisq(1 - alpha, length(groupOne))
                )

            # Purification == FALSE ----

            if (!purify) {
                PROV <- Logistik(
                    DATA,
                    Group,
                    groupType = groupType,
                    match = match,
                    type = type,
                    criterion = criterion,
                    anchor = anchor
                )
                chiSquared <- PROV$stat
                PVAL <- 1 - pchisq(chiSquared, DF)
                deltaR2 <- PROV$deltaR2
                if (max(chiSquared) <= sigThreshold) {
                    DIFitems <- "No DIF item detected"
                }
                else {
                    DIFitems <- (1:NCOL(DATA))[chiSquared > sigThreshold]
                }

                RES <-
                    list(
                        Logistik = chiSquared,
                        p.value = PVAL,
                        deltaR2 = deltaR2,
                        coefficients = PROV$coefficients,
                        alpha = alpha,
                        thr = sigThreshold,
                        DIFitems = DIFitems,
                        groupType = groupType,
                        match = PROV$match,
                        type = type,
                        pAdjustMethod = pAdjustMethod,
                        adjusted.p = NULL,
                        purification = purify,
                        names = colnames(DATA),
                        anchor.names = anchorNames,
                        criterion = criterion,
                        groupOne = groupOne,
                        matchScores = PROV$matchScores,
                        ZT = as.character(symnum(
                            deltaR2,
                            c(0, 0.13, 0.26, 1),
                            symbols = c("A", "B", "C"),
                            legend = FALSE
                        )),
                        JG = as.character(symnum(
                            deltaR2,
                            c(0, 0.035, 0.07, 1),
                            symbols = c("A", "B", "C"),
                            legend = FALSE
                        )),
                        sigThreshold = sigThreshold,
                                            m0 = PROV$m0,
                    m1 = PROV$m1,
                    coefficientsSE = PROV$coefficientsSE
                    )

            }
            # Purification == TRUE ----
            else {
                nrPur <- 0
                difPur <- NULL
                noLoop <- FALSE
                logistikRes1 <-
                    Logistik(
                        DATA,
                        Group,
                        groupType = groupType,
                        match = match,
                        anchor = anchor,
                        type = type,
                        criterion = criterion
                    )

                chiSquared1 <- logistikRes1$stat
                deltaR2 <- logistikRes1$deltaR2
                if (max(chiSquared1) <= sigThreshold) {
                    DIFitems <- "No DIF item detected"
                    noLoop <- TRUE
                }
                else {
                    dif <- (1:NCOL(DATA))[chiSquared1 > sigThreshold]
                    difPur <- rep(0, length(chiSquared1))
                    difPur[dif] <- 1
                    repeat {
                        if (nrPur >= nIter) {
                            break
                        } else {
                            nrPur <- nrPur + 1
                            nodif <- NULL
                            if (is.null(dif)) {
                                nodif <- 1:NCOL(DATA)
                            } else {
                                for (i in 1:NCOL(DATA)) {
                                    if (sum(i == dif) == 0) {
                                        nodif <- cbind(anchor, DATA[i])
                                    }
                                }
                            }
                            logistikRes2 <- Logistik(
                                DATA,
                                Group,
                                anchor = nodif,
                                groupType = groupType,
                                match = match,
                                type = type,
                                criterion = criterion
                            )
                            
                            chiSquared2 <- logistikRes2$stat
                            deltaR2 <- logistikRes2$deltaR2
                            if (max(chiSquared2) <= sigThreshold) {
                                dif2 <- NULL
                            } else {
                                dif2 <- (1:NCOL(DATA))[chiSquared2 > sigThreshold]
                                difPur <- rbind(difPur, rep(0, NCOL(DATA)))
                                difPur[nrPur + 1, dif2] <- 1
                            }

                            if (length(dif) != length(dif2)) {
                                dif <- dif2
                            } else {
                                dif <- sort(dif)
                                dif2 <- sort(dif2)
                                if (sum(dif == dif2) == length(dif)) {
                                    noLoop <- TRUE
                                    break
                                } else {
                                    dif <- dif2
                                }
                            }
                        }
                    }
                    logistikRes1 <- logistikRes2
                    chiSquared1 <- chiSquared2
                    PVAL <- 1 - pchisq(chiSquared1, DF)
                    deltaR2 <- deltaR2
                    DIFitems <-
                        (1:NCOL(DATA))[chiSquared1 > sigThreshold]
                }
                if (is.null(difPur) == FALSE) {
                    ro <- co <- NULL
                    for (ir in 1:NROW(difPur))
                        ro[ir] <- paste("Step",
                                        ir - 1, sep = "")
                    for (ic in 1:NCOL(difPur))
                        co[ic] <- paste("Item",
                                        ic, sep = "")
                    rownames(difPur) <- ro
                    colnames(difPur) <- co
                }
                RES <-
                    list(
                        Logistik = chiSquared1,
                        deltaR2 = deltaR2,
                        coefficients = logistikRes1$coefficients,
                        alpha = alpha,
                        sigThreshold = sigThreshold,
                        DIFitems = DIFitems,
                        groupType = groupType,
                        match = logistikRes1$match,
                        type = type,
                        pAdjustMethod = pAdjustMethod,
                        adjusted.p = NULL,
                        purification = purify,
                        nrPur = nrPur,
                        difPur = difPur,
                        convergence = noLoop,
                        names = colnames(DATA),
                        anchor.names = NULL,
                        criterion = criterion,
                        groupOne = groupOne,
                        matchScores = logistikRes1$matchScores,
                        ZT = as.character(symnum(
                            deltaR2,
                            c(0, 0.13, 0.26, 1),
                            symbols = c("A", "B", "C"),
                            legend = FALSE
                        )),
                        JG = as.character(symnum(
                            deltaR2,
                            c(0, 0.035, 0.07, 1),
                            symbols = c("A", "B", "C"),
                            legend = FALSE
                        )),
                        m0 = logistikRes1$m0,
                        m1 = logistikRes1$m1,
                        coefficientsSE = logistikRes1$coefficientsSE
                        
                    )
            }
            # p-Adjust ----
            df <- switch(type,
                         both = 2,
                         udif = 1,
                         nudif = 1)
            pval <- 1 - pchisq(RES$Logistik, df)
            RES$adjusted.p <-
                p.adjust(pval, method = pAdjustMethod)
            if (min(RES$adjusted.p, na.rm = TRUE) > alpha) {
                RES$DIFitems <- "No DIF item detected"
            } else {
                RES$DIFitems <- which(RES$adjusted.p < alpha)
            }
            class(RES) <- "Logistic"
            return(RES)
        }

        resToReturn <- internalLog()

        return(resToReturn)
    }

Logistik <-
    function (data,
              member,
              groupType,
              match,
              anchor,
              type,
              criterion)
    {
        R2 <-
            function(m, n)
                1 - (exp(-m$null.deviance / 2 + m$deviance / 2)) ^ (2 / n)
        R2max <- function(m, n)
            1 - (exp(-m$null.deviance / 2)) ^ (2 / n)
        R2DIF <- function(m, n)
            R2(m, n) / R2max(m, n)
        nGroup <- length(unique(member)) - 1
        dev <- R2full <- R2simple <- deltaR <- NULL
        coefficientsSE <- mFull <-
            mSimple <-
            seFull <- seSimple <- matrix(0, NCOL(data), 2 + 2 * nGroup)
        cov.matM0 <- cov.matM1 <- NULL
        if (groupType == "group") {
            GROUP <- as.factor(member)
            GROUP <- relevel(GROUP, ref = "Reference Group")
        } else {
            GROUP <- member
        }
        for (item in 1:ncol(data)) {
            if (match[1] == "score") {
                if (!is.null(anchor)) {
                    data2 <- cbind(data, anchor)
                    SCORES <-
                        rowSums(sapply(data2, jmvcore::toNumeric), na.rm = TRUE)
                } else {
                    SCORES <- rowSums(sapply(data, jmvcore::toNumeric))
                }
            }
            else {
                SCORES <- match
            }

            ITEM <- data[, item]
            m0 <- switch(
                type,
                both = glm(ITEM ~ SCORES * GROUP,
                           family = "binomial"),
                udif = glm(ITEM ~ SCORES +
                               GROUP, family = "binomial"),
                nudif = glm(ITEM ~ SCORES *
                                GROUP, family = "binomial")
            )

            m1 <-
                switch(
                    type,
                    both = glm(ITEM ~ SCORES, family = "binomial"),
                    udif = glm(ITEM ~ SCORES, family = "binomial"),
                    nudif = glm(ITEM ~
                                    SCORES + GROUP, family = "binomial")
                )
            if (criterion == "LRT") {
                dev[item] <- deviance(m1) - deviance(m0)
            } else {
                if (criterion != "Wald"){
                    stop("'criterion' must be either 'LRT' or Wald'",
                         call. = FALSE)
                } else {
                    coeff <- as.numeric(coefficients(m0))
                    covMat <- summary(m0)$cov.scaled
                    if (type == "udif") {
                        C <- rbind(c(0, 0, 1))
                    }                     else {
                        if (type == "nudif") {
                            C <- matrix(0, nGroup, length(coeff))
                            for (tt in 1:nGroup)
                                C[tt, 2 + nGroup + tt] <- 1
                        }
                        else {
                            C <- matrix(0, nGroup * 2, length(coeff))
                            for (tt in 1:(2 * nGroup))
                                C[tt, 2 + tt] <- 1
                        }
                    }
                    dev[item] <-
                        t(C %*% coeff) %*% solve(C %*% covMat %*%
                                                     t(C)) %*% C %*% coeff
                }
            }

                R2full[item] <- R2DIF(m0, NROW(data))
                R2simple[item] <- R2DIF(m1, NROW(data))
                deltaR[item] <-
                    R2DIF(m0, NROW(data)) - R2DIF(m1, NROW(data))
                mFull[item, 1:length(m0$coefficients)] <-
                    m0$coefficients
                coefficientsSE[item, 1:length(m0$coefficients)] <- summary(m0)$coefficients[,2]
                mSimple[item, 1:length(m1$coefficients)] <-
                    m1$coefficients
        }
        names <- c("(Intercept)", "Match Variable")
        groupNames <- sort(unique(GROUP))
        for (i in 2:length(groupNames))
            names <- c(names, paste(
                                    groupNames[i], sep = ""))
        for (i in 2:length(groupNames))
            names <- c(names, paste("Match Variable : ",
                                    groupNames[i], sep = ""))
        colnames(coefficientsSE) <- colnames(mFull) <- colnames(mSimple) <- names
            res <-
                list(
                    stat = dev,
                    m0 = m0,
                    m1 = m1,
                    deltaR2 = deltaR,
                    coefficients = mFull,
                    coefficientsSE = coefficientsSE,
                    criterion = criterion,
                    groupType = groupType,
                    match = ifelse(match[1] ==
                                       "score", "score", "matching variable"),
                    matchScores = SCORES
                )
            return(res)
        }



================================================
FILE: R/DIF_utilities_ordinal.R
================================================
# Ordinal DIF ----
ordinal.logistic <- function (items,
                              group,
                              anchor,
                              anchorNames,
                              groupType,
                              match,
                              type,
                              criterion,
                              alpha,
                              purify,
                              nIter,
                              pAdjustMethod) {
    # if (purify & match[1] != "score") {
    #     stop(
    #         "purification not allowed when using a custom matching variable. Please remove the custom matching variable or deselect 'Purification'."
    #     )
    #     return()
    # }
    
    internalLog <- function() {
        sigThreshold <-
            list(
                baseline = qchisq(1 - alpha, 1),
                uniform = qchisq(1 -
                                     alpha, 1),
                both = qchisq(1 - alpha, 2 * 1)
            )
        
        # Model fitting ----
        
        modelResults <- ordinalLogistik(
            data = items,
            group = group,
            groupType = groupType,
            match = match,
            type = type,
            criterion = criterion,
            anchor = anchor,
            alpha = alpha,
            pAdjustMethod
        )
        
        RES <-
            list(
                models = modelResults$models,
                betaChange = modelResults$betaChange,
                deviance = modelResults$deviance,
                chiSquared = modelResults$chiSquared,
                degreesOfFreedom = modelResults$degreesOfFreedom,
                pValue = modelResults$pValue,
                deltaR2 = modelResults$deltaR2,
                R2 = modelResults$R2,
                flags = modelResults$flags,
                ZT = modelResults$ZT,
                JG = modelResults$JG,
                alpha = alpha,
                sigThreshold = sigThreshold,
                names = colnames(items)
            )
        class(RES) <- "ordinalLogistic"
        return(RES)
    }
    
    resToReturn <- internalLog()
    
    return(resToReturn)
}


R2 <- function(nullDeviance, fullDeviance, n) {
    1 - (exp(-nullDeviance / 2 + fullDeviance / 2) ^ (2 / n))
}

R2max <- function(nullDeviance, n) {
    1 - (exp(-nullDeviance / 2) ^ (2 / n))
}

R2DIF <- function(nullDeviance, fullDeviance, n) {
    R2(nullDeviance, fullDeviance, n) / R2max(nullDeviance, n)
}

ordinalLogistik <-
    function (data,
              group,
              groupType,
              match,
              anchor,
              type,
              criterion,
              pAdjustMethod,
              alpha,
              betaChangeThreshold = 0.10) {
        
        itemRes <- list(
            models = list(),
            betaChange = list(),
            deviance = list(),
            chiSquared = list(),
            degreesOfFreedom = list(),
            flags = list(),
            ZT = list(),
            JG = list(),
            R2 = list(),
            deltaR2 = list()
        )
        
        sigThreshold <-
            list(
                baseline = qchisq(1 - alpha, 1),
                uniform = qchisq(1 - alpha, 1),
                both = qchisq(1 - alpha, 2 * 1)
            )
        
        nGroup <- length(unique(group)) - 1
        
        if (groupType == "group") {
            GROUP <- as.factor(group)
            # GROUP <- relevel(GROUP, ref = "Reference Group")
        } else {
            GROUP <- group
        }
        
        for (item in 1:ncol(data)) {
            if (match[1] == "score") {
                if (!is.null(anchor)) {
                    data2 <- cbind(data, anchor)
                    SCORES <-
                        rowSums(sapply(data2, as.numeric), na.rm = TRUE)
                } else {
                    SCORES <- rowSums(sapply(data, as.numeric))
                }
            }
            else {
                SCORES <- match
            }
            
            ITEM <- as.factor(data[, item])
            
            nullModel <- MASS::polr(ITEM ~ 1, Hess = TRUE)
            baselineModel <- MASS::polr(ITEM ~ SCORES, Hess = TRUE)
            uniformModel <-
                MASS::polr(ITEM ~ SCORES + GROUP, Hess = TRUE)
            bothModel <-
                MASS::polr(ITEM ~ SCORES * GROUP, Hess = TRUE)
            
            uniformBetaChange <- list(matchingVar = round(abs((
                uniformModel$coefficients[[1]] -
                    baselineModel$coefficients[[1]]
            ) / baselineModel$coefficients[[1]]
            ), 4))
            
            bothBetaChange <-
                list(matchingVar = round(abs((bothModel$coefficients[[1]] - uniformModel$coefficients[[1]]) / uniformModel$coefficients[[1]]
                ), 4),
                groupingVar = round(abs((bothModel$coefficients[[2]] - uniformModel$coefficients[[2]]) / uniformModel$coefficients[[2]]
                ), 4))
            
            nullDeviance <- nullModel$deviance
            baselineDeviance <- baselineModel$deviance
            uniformDeviance <- uniformModel$deviance
            bothDeviance <- bothModel$deviance
            
            nObs = length(ITEM)
            
            R2 <-
                list(
                    baseline = R2DIF(nullDeviance, baselineDeviance, nObs),
                    uniform = R2DIF(nullDeviance, uniformDeviance, nObs),
                    both = R2DIF(nullDeviance, bothDeviance, nObs)
                )
            
            deltaR2 <- list(
                baseline = R2$uniform - R2$baseline,
                uniform = R2$both - R2$uniform,
                both = R2$both - R2$baseline
            )
            
            degreesOfFreedom <- list(
                baseline = nGroup,
                uniform = nGroup,
                both = 2 * nGroup
            )
            
            likelihoodRatioChiSquared = list(
                baseline = nullDeviance - baselineDeviance,
                uniform = uniformDeviance - bothDeviance,
                both = baselineDeviance - bothDeviance
            )
            
            likelihoodRatioPValue <-
                list(
                    baseline = round(
                        1 - pchisq(likelihoodRatioChiSquared[["baseline"]],
                                   degreesOfFreedom[["baseline"]]),
                        4
                    ),
                    uniform = round(
                        1 - pchisq(likelihoodRatioChiSquared[["uniform"]],
                                   degreesOfFreedom[["uniform"]]),
                        4
                    ),
                    both = round(
                        1 - pchisq(likelihoodRatioChiSquared[["both"]],
                                   degreesOfFreedom[["both"]]),
                        4
                    )
                )
            
            itemRes$flags[[item]] <- list(
                chiSquared = likelihoodRatioChiSquared >= unlist(sigThreshold),
                pValue = likelihoodRatioPValue <= alpha,
                uniformBetaChange = uniformBetaChange >= betaChangeThreshold,
                bothBetaChange = bothBetaChange >= betaChangeThreshold
            )
            
            # p-Adjust
            if (!is.null(pAdjustMethod)) {
                RES$adjusted.p <-
                    p.adjust(modelResults$likelihoodRatioPValue, method = pAdjustMethod)
                if (min(RES$adjusted.p, na.rm = TRUE) > alpha) {
                    RES$DIFitems <- "No DIF item detected"
                } else {
                    RES$DIFitems <- which(RES$adjusted.p < alpha)
                }
            }
            
            itemRes$ZT[[item]] = as.character(symnum(
                unlist(deltaR2),
                c(0, 0.13, 0.26, 1),
                symbols = c("A", "B", "C"),
                legend = FALSE
            ))
            
            itemRes$JG[[item]] = as.character(symnum(
                unlist(deltaR2),
                c(0, 0.035, 0.07, 1),
                symbols = c("A", "B", "C"),
                legend = FALSE
            ))
            
            itemRes$models[[item]] = list(
                nullModel = nullModel,
                baselineModel = baselineModel,
                uniformModel = uniformModel,
                bothModel = bothModel
            )
            itemRes$betaChange[[item]] = list(uniformBetaChange = uniformBetaChange,
                                              bothBetaChange = bothBetaChange)
            itemRes$deviance[[item]] = list(
                nullDeviance = nullDeviance,
                baselineDeviance = baselineDeviance,
                uniformDeviance = uniformDeviance,
                bothDeviance = bothDeviance
            )
            
            itemRes$chiSquared[[item]] = likelihoodRatioChiSquared
            itemRes$pValue[[item]] = likelihoodRatioPValue
            itemRes$degreesOfFreedom[[item]] = degreesOfFreedom
            itemRes$R2[[item]] = R2
            itemRes$deltaR2[[item]] = deltaR2
            
        }
        itemRes <- lapply(itemRes, setNames, c(names(data)))
        return(itemRes)
    }



================================================
FILE: R/glmdif.b.R
================================================

# Data Wrangling ----

glmDIFClass <- if (requireNamespace('jmvcore'))
  R6::R6Class(
    "glmDIFClass",
    inherit = glmDIFBase,
    private = list(
      .init = function() {
        if (!is.null(self$options$group) &
            !is.null(self$data) & !is.null(self$options$item)) {
          self$results$DESCtable$setVisible(visible = TRUE)
          self$results$DIFtable$setVisible(visible = TRUE)
        }
      },
      .run = function() {
      if (is.null(self$options$group) |
            is.null(self$data) | is.null(self$options$item)) {
          self$results$instructions$setContent(
            "<html>
            <head>
            </head>
            <body>
            <div class='instructions'>
            <p>Welcome to PsychoPDA's Binary LogR Differential Item Functioning analysis. To get started:</p>
            <ol>
            <li>Place items to be assessed for DIF in the 'Item(s) for analysis' slot.<br /><br /></li>
            <li>[<em>Optional</em>] Place the remaining measure items in the 'Anchor Items' slot. This is not needed if a Matching Variable is supplied.<br /><br /></li>
            <li>[<em>Optional</em>] Place an external matching variable in the 'Matching Variable' slot. The measure total score will be calculated and used for matching if this option is omitted.<br /><br /></li>
            <li>Place the grouping variable in the 'Grouping Variable' slot.</li>
            </ol>
            <p>If you encounter any errors, or have questions, please see the <a href='https://lucasjfriesen.github.io/jamoviPsychoPDA_docs/DIF_index.html' target = '_blank'>documentation</a></p>
            <p>If this software is used in conducting published research, please do provide a citation using the information at the bottom of the analysis.</p>
            </div>
            </body>
            </html>")
          if (is.null(self$options$group) |
            is.null(self$data) |
            is.null(self$options$item)) {
          return()
        }
        } else {
          self$results$instructions$setVisible(visible = FALSE)
        }
        
        # The full DF
        data <- self$data

        # Data frame containing all items selected for analysis
        Data <-
          data.frame(jmvcore::toNumeric(data[, self$options$item]))
        colnames(Data) <- self$options$item
        for (i in 1:length(self$options$item)) {
          if (!all(unique(Data[, i]) %in% c(0, 1, NA))) {
            stop(
              paste(
                "One or more rows contains an invalid value in column: ",
                colnames(Data)[i]
              ),
              ". (Item responses must be one of c(0,1,NA))",
              call. = FALSE
            )
          }
        }
        
        if (is.null(self$options$anchor)) {
          anchor <- NULL
        } else {
          anchor <-
            data.frame(jmvcore::toNumeric(data[, self$options$anchor]))
          colnames(anchor) <- self$options$anchor
        }
        
        # Vector containing matching data
        match <-
          data.frame(jmvcore::toNumeric(data[, self$options$matchVar]))
        if (length(match) == 0) {
          match <- "score"
        } else {
          colnames(match) <- self$options$matchVar
          match <- unlist(match)
        }
        
        # Vector containing grouping data
        group <- as.character(data[, self$options$group])
        groupType_ <- self$options$groupType
        if (groupType_ == "groupBin" | groupType_ == "groupNonBin"){
          groupType <- "group"
        }
        if (groupType == "group") {
          groupElementList <- sort(unique(group))
          if (groupType_ == "groupBin") {
            groupOne <- unique(group)[1]
            group <- ifelse(group == groupOne, "Reference Group", "Contrast Group")
            groupOne <- "Reference Group"
            groupContrasts <- unique(group)
          } else {
            groupContrasts <- self$options$groupContrasts
            groupContrastsLIST <-
              paste0("<li>", groupElementList, "</li>", collapse = "")
            if (length(groupContrasts) == 0) {
              contrastInstructions <- paste0(
                "<html>
                <head>
                <style>
                div.instructions {
                width: 500px;
                height: 225px;
                display: flex;
                flex-wrap: wrap;
                align-content: center;
                }
                </style>
                </head>
                <body>
                <div class='instructions'><p>The grouping variable provided has ",
                length(unique(group)),
                " elements. In order to specifiy which groups should be contrasted, enter the names of the desired groups seperated by commas.",
                "</p>",
                "<p><ul style='list-style-type:none'>",
                groupContrastsLIST,
                "</ul></p></div>
                </body>
                </html>")
              self$results$instructions$setContent(contrastInstructions)
              self$results$instructions$setVisible(visible = TRUE)
              return()
            }
            groupContrasts <-
              sort(unlist(strsplit(groupContrasts, split = ",")))
            if (!all(groupContrasts %in% unique(group))) {
              contrastInstructions <- paste0(
                "<html>
                <head>
                <style>
                div.instructions {
                width: 500px;
                height: 225px;
                display: flex;
                flex-wrap: wrap;
                align-content: center;
                }
                </style>
                </head>
                <body>
                <div class='instructions'><p>In order to specifiy which groups should be contrasted, enter the names of the desired groups seperated by commas. You must specify only elements which are found in the group column",
                "</p>",
                "<p>You entered the following values, at least one of which is invalid:
                <ul style='list-style-type:none'>",
                groupContrastsLIST,
                "</ul></p></div>
                </body>
                </html>")
              self$results$instructions$setContent(contrastInstructions)
              self$results$instructions$setVisible(visible = TRUE)
              return()
            }
            groupNames <-
              paste0("Contrast Group ", toupper(letters[1:length(groupContrasts)]))
            names(groupContrasts) <- groupNames
            names(groupElementList)[groupElementList %in%groupContrasts] <- c(groupNames)
            names(groupElementList)[is.na(names(groupElementList))] <- "Reference Group"
            for (i in groupElementList){
              group <- replace(group, group == i, names(groupElementList[groupElementList == i]))
            }
            groupOne <- names(groupContrasts)
          }
        } else {
          groupOne <- median(group)
          groupElementList <- c(min(group), max(group))
        }
        
        # Check no singular group values
        
        groupCheck <- table(group)
        if (length(names(groupCheck)[groupCheck== 1]) != 0){
          stop(paste0("Only one row contains the group value(s) (", names(groupCheck)[groupCheck == 1],") . This row cannot be used in fitting a linear model. Either remove the row, or use the '2 Group' option."))
        }
        
        type <- self$options$type
        
        criterion <- self$options$criterion
        
        alpha <- self$options$alpha
        
        purify <- self$options$purify
        
        nIter <- self$options$nIter
        
        pAdjustMethod <- self$options$pAdjustMethod
        
        bootSims = self$options$bootSims
        
        # Results functions ----
        
        highlight <- function(table, row, column) {
          for (i in column) {
            table$addFormat(
              rowNo = row,
              col = i,
              format = jmvcore::Cell.NEGATIVE
            )
          }
        }
        
        blankRow <- function(table) {
          table[nrow(table) + 1, "bob"] = ""
          return(table)
        }
      
        buildGC <- function(GC, table) {
          
          if (self$options$designAnalysisEffectType == "nagR2"){
            for (item in 1:nrow(GC)) {
              table$setTitle("Design Analysis - Naeglekirke R\u00B2")
              table$addRow(
                rowKey = item,
                values = list(
                  label = GC[item, 1],
                  itemName = GC[item, 2],
                  obsEff = GC[item, 4],
                  bootSE = GC[item, 7],
                  hypTrueEff = GC[item, 3],
                  typeM = GC[item, 5],
                  estimatedTE = GC[item, 4] / GC[item, 5],
                  power = GC[item, 6]
                )
              )

              if (self$options$D == "") {
                table$setNote(
                  "nullHyp",
                  "The hypothesis of the DIF effect being equal to 0 is the 'A' level hypothesis, and uses 0 + 2 * observedSE as a proxy for 0."
                )
              }
              if (GC[item, 4] < GC[item, 3]) {
                highlight(table, item, 5)
                table$setNote(
                  "interpretGC",
                  "Several items (flagged red) have observed effect sizes smaller the hypothesized true effect. In these cases the Type-M error is a ratio and should be interpretted with caution."
                )
              }
            }
            } else {
            table$setTitle("Design Analysis - Logistic Regression Coefficients")
              # self$results$debug$setContent(self$options$designAnalysisEffectType)
              designList = GC[[1]]
              GC = GC[[2]]
              for (item in 1:length(designList)) {
                subList <- as.data.frame(GC[[item]])
                for (i in 1:NROW(subList)) {
                  table$addRow(rowKey = item, values = c("itemName"=designList[item],
                                                         "coefficientName" = rownames(subList)[i],
                                                         subList[i, ]))
                }
              }
              table$setNote(
                "interpretGC",
                "Coefficients have been transformed into absolute value SD units for Type-M/Type-S error calculations"
              )
            }
          }
        
        # Model ----
        model <-
          binaryDIF.logistic(
            DATA = Data,
            group = group,
            groupOne = groupOne,
            anchor = anchor,
            anchorNames = self$options$anchor,
            groupType = groupType,
            match = match,
            type = type,
            criterion = criterion,
            alpha = alpha,
            purify = purify,
            nIter = nIter,
            pAdjustMethod = pAdjustMethod
          )
        
        # Build GC tables ----
        runDesignAnalysis <- function() {
            if (self$options$designAnalysisSigOnly) {
              designList <- model$names[model$DIFitems]
            } else {
              designList <- model$names
            }
            if (is.na(designList[1])) {
              self$results$gcTable$addRow(
                rowKey = "doesntMatter",
                values = list(itemName = "No items flagged as exhibitting DIF.")
              )
              return()
            }
            if (self$options$designAnalysisEffectType == "nagR2") {
              GCTable = designAnalysis.nagR2(
                designList = designList,
                Data = Data,
                group = group,
                match = model$matchScores,
                bootSims = bootSims,
                type = type,
                hypTrueEff = self$options$D,
                alpha = alpha,
                difFlagScale = self$options$difFlagScale,
                sigOnly = self$options$designAnalysisSigOnly
              )
              return(GCTable)
            }
            
            if (self$options$designAnalysisEffectType == "coefficients") {
              gcTableCoefficients = designAnalysis.coefficients(
                designList = designList,
                coefficient = model$coefficients,
                coefficientsSE = model$coefficientsSE,
                alpha = self$options$alpha,
                hypTrueEff = self$options$D,
                difFlagScale = self$options$difFlagScale,
                df = model$m0$df.residual,
                sigOnly = self$options$designAnalysisSigOnly
              )
              return(list(designList, gcTableCoefficients))
            }
          }
        
        
        # Description Results Table ----
        calculateDESCtable <- function() {
          resDescTable <- data.frame(bob = NA)
          table <- self$results$DESCtable
          mess1 <-
            switch(model$type,
                   both = " both types of ",
                   nudif = " nonuniform ",
                   udif = " uniform ")
          if (model$purification) {
            pur <- "with "
          } else {
            pur <- "without "
          }
          
          if (class(model) == "Logistic") {
            df <- ifelse(type == "both", 2, 1)
          } else {
            df <-
              ifelse(type == "both", 2 * length(groupOne), length(groupOne))
          }
          
          resDescTable[1, "bob"] =
            paste0(
              "Detection of",
              mess1,
              "Differential Item Functioning using the "
              ,
              switch(
                class(model),
                Logistic = "Logistic regression method ",
                genLogistic = "Generalized logistic regression method "
              ),
              pur,
              "item purification and with ",
              # length(model$groupOne),
              #  " reference group(s) and ",
              df,
              " degree(s) of freedom."
            )
          
          resDescTable <- blankRow(resDescTable)
          
          resDescTable[nrow(resDescTable) + 1, "bob"] = paste0(
            "DIF flagging criterion: ",
            ifelse(
              model$criterion == "Wald",
              paste0(
                "Wald test of joint significance on ",
                df,
                " degree(s) of freedom"
              ),
              "Likelihood ratio test"
            )
          )
          
          resDescTable <- blankRow(resDescTable)
          
          if (model$pAdjustMethod == "none") {
            resDescTable[nrow(resDescTable) + 1, "bob"] = "No p-value adjustment for multiple comparisons"
          } else {
            pAdjMeth <- switch(
              model$pAdjustMethod,
              bonferroni = "Bonferroni",
              holm = "Holm",
              hochberg = "Hochberg",
              hommel = "Hommel",
              BH = "Benjamini-Hochberg",
              BY = "Benjamini-Yekutieli"
            )
            resDescTable[nrow(resDescTable) + 1, "bob"] = paste("Multiple comparisons made with ",
                                                                pAdjMeth,
                                                                " adjustment of p-values.")
          }
          
          resDescTable <- blankRow(resDescTable)
          
          if (model$purification) {
            if (model$nrPur <= 1) {
              word <- " iteration"
            } else {
              word <- " iterations"
            }
            if (!model$convergence) {
              resDescTable[nrow(resDescTable) + 1, "bob"] = paste("WARNING: no item purification convergence after ",
                                                                  model$nrPur,
                                                                  word,
                                                                  sep = " ")
              loop <- NULL
              for (i in 1:model$nrPur) {
                loop[i] <- sum(model$difPur[1,] == model$difPur[i + 1,])
              }
              if (max(loop) != length(model$genLogistik)) {
                resDescTable[nrow(resDescTable) + 1, "bob"] = paste("(Note: no loop detected in less than ",
                                                                    model$nrPur,
                                                                    word,
                                                                    ")",
                                                                    sep = "")
              } else {
                resDescTable[nrow(resDescTable) + 1, "bob"] = paste("(Note: loop of length ",
                                                                    min((1:model$nrPur)[loop ==
                                                                                          length(model$genLogistik)]),
                                                                    " in the item purification process)",
                                                                    sep = " ")
                resDescTable[nrow(resDescTable) + 1, "bob"] = paste("WARNING: following results based on the last iteration of the purification")
              }
            } else {
              resDescTable[nrow(resDescTable) + 1, "bob"] = paste("Convergence reached after ", model$nrPur, word, sep = " ")
              resDescTable <- blankRow(resDescTable)
            }
          }
          
          resDescTable[nrow(resDescTable) + 1, "bob"] = paste0("Grouping variable: ", list(self$options$group))
          
          if (groupType_ == "groupBin") {
            
            if (length(groupElementList) > 2) {
              resDescTable <- blankRow(resDescTable)
              resDescTable[nrow(resDescTable) + 1, "bob"] = paste0(
                "(The data file provided non-binary groupings, but 'Discrete Groups (n = 2)' was selected as the Group Type . Please see below for the recoding legend.)"
              )
              resDescTable <- blankRow(resDescTable)
            }
            
            for (i in 1:length(groupElementList)) {
              resDescTable[nrow(resDescTable) + 1, "bob"] = paste0(ifelse(i == 1, "Reference Group", "Contrast Group"),
                                                                   " : ",
                                                                   groupElementList[i])
            }
          } 
          if (groupType_ == "groupNonBin"){
            sortedNames <- names(groupElementList)
            names(sortedNames) <- groupElementList
            sortedNames <- sort(sortedNames)
            for (i in 1:length(sortedNames)) {
              resDescTable[nrow(resDescTable) + 1, "bob"] = paste0(sortedNames[i], " : ", names(sortedNames)[i])
          }}
          if (groupType == "cont" ){
            resDescTable[nrow(resDescTable) + 1, "bob"] = paste0("Group Range: ")
            resDescTable[nrow(resDescTable) + 1, "bob"] = paste0("Min Value : ", groupElementList[1])
            resDescTable[nrow(resDescTable) + 1, "bob"] = paste0("Max Value : ", groupElementList[2])
          }
          
          resDescTable <- blankRow(resDescTable)
          
          if (model$match[1] == "score") {
            resDescTable[nrow(resDescTable) + 1, "bob"] = "Matching variable: Test score"
          } else {
            resDescTable[nrow(resDescTable) + 1, "bob"] = paste0("Matching variable: ", self$options$matchVar)
          }
          resDescTable <- blankRow(resDescTable)
          if (is.null(model$anchor.names) |
              model$match != "score") {
            resDescTable[nrow(resDescTable) + 1, "bob"] = "No set of anchor items was provided"
          }
          else {
            resDescTable[nrow(resDescTable) + 1, "bob"] =  "Anchor items (provided by the user): "
            for (i in 1:length(self$options$anchor)) {
              resDescTable[nrow(resDescTable) + 1, "bob"] = self$options$anchor[[i]]
            }
          }
          resDescTable <- blankRow(resDescTable)
          
          resDescTable[nrow(resDescTable) + 1, "bob"] =  paste0("Effect size (change in Nagelkerke's R\u00B2: \u0394R\u00B2) scale: ", switch(self$options$difFlagScale,
                                                                                                                            zt = "Zumbo-Thomas",
                                                                                                                            jg = "Jodoin-Gierl"))
          resDescTable[nrow(resDescTable) + 1, "bob"] =  switch(self$options$difFlagScale,
                                                                zt = "'A': Negligible effect (0 \u2264 \u0394R\u00B2 \u2264 0.13)",
                                                                jg = "'A': Negligible effect (0 \u2264 \u0394R\u00B2 \u2264 0.035)")
          resDescTable[nrow(resDescTable) + 1, "bob"] =  switch(self$options$difFlagScale,
                                                                zt = "'B': Moderate effect (0.13 \u2264 \u0394R\u00B2 \u2264 0.26)",
                                                                jg = "'B': Moderate effect (0.035 \u2264 \u0394R\u00B2 \u2264 0.07)")
          resDescTable[nrow(resDescTable) + 1, "bob"] =  switch(self$options$difFlagScale,
                                                                zt = "'C': Large effect (0.26 \u2264 \u0394R\u00B2 \u2264 1)",
                                                                jg = "'C': Large effect (0.07 \u2264 \u0394R\u00B2 \u2264 1)")
          resDescTable <- blankRow(resDescTable)
          
          if (self$options$designAnalysis & self$options$designAnalysisEffectType == "nagR2") {
            resDescTable[nrow(resDescTable) + 1, "bob"] = paste0(
              "Post-Data Design Analysis performed on ",
              ifelse(
                self$options$designAnalysisSigOnly,
                "only flagged ",
                "all "
              ),
              "items using ",
              self$options$bootSims,
              " bootstraps to create an empirical distribution for ",
              "\u0394 Naeglekirke R\u00B2."
            )
            resDescTable <- blankRow(resDescTable)
          }
          return(resDescTable)
        }
        
        
        # DIF Results Table ----
        
        calculateDIFTable <- function() {
          for (i in 1:length(Data)) {
            if (self$results$DIFtable$isNotFilled()) {
              table <- self$results$DIFtable
              for (i in 1:length(Data)) {
                table$setRow(
                  rowNo = i,
                  values = list(
                    item = model$names[i],
                    chiSquare = model$Logistik[i],
                    p = model$adjusted.p[i],
                    effSize = model$deltaR2[i],
                    ZT = ifelse(model$adjusted.p[i] <= alpha, model$ZT[i], "No flag"),
                    JG = ifelse(model$adjusted.p[i] <= alpha, model$JG[i], "No flag")
                  )
                )
              }
            }
            
            # Highlight DIF results table
            # if (self$options$difFlagScale == "zt") {
            #   if (model$adjusted.p[i] <= alpha) {
            #     highlight(table, i, "ZT")
            #     highlight(table, i, "item")
            #   }
            # } else {
            #   if (model$adjusted.p[i] <= alpha) {
            #     highlight(table, i, "JG")
            #     highlight(table, i, "item")
            #   }
            # }
          }
          
          df <-
            ifelse(type == "both", 2 * length(groupOne), length(groupOne))
          table$setNote(
            key = "df",
            note = paste0(
              "Tests of significance conducted using: ",
              df,
              " degrees of freedom (\u03A7\u00B2 significance threshold = ", round(model$sigThreshold, 3),")"
            )
          )
        }
        
        # Coefficients table ----
        calculateCoefficientsTable <- function(){
          self$results$coefficientsTable$setVisible(visible = TRUE)
          table <- self$results$coefficientsTable
          coefficientsList <- model$coefficients
          
          for (i in names(coefficientsList[1,])){
            table$addColumn(name = i)
          }

          for (j in 1:NCOL(Data)){
            table$addRow(rowKey = j, values = coefficientsList[j,])
            table$setRow(rowKey = j, values = list(itemName = model$names[j]))
          }
        }
        
        # State Savers ----
        # DIF state ----
        DIFstate <- self$results$DIFtable$state
        if (!is.null(DIFstate)) {
          # ... populate the table from the state
        } else {
          # ... create the table and the state
          DIFstate <- calculateDIFTable()
          self$results$DIFtable$setState(DIFstate)
        }
        
        # Coefficient state ----
        coeffState <- self$results$coefficientsTable$state
        if (!is.null(coeffState)) {
          # ... populate the table from the state
        } else {
          # ... create the table and the state
          if (self$options$coeffEff){
            coeffState <- calculateCoefficientsTable()
            self$results$coefficientsTable$setState(coeffState)
          }
        }
        
        # DESC state ----
        DESCstate <- self$results$DESCtable$state
        if (!is.null(DESCstate)) {
          # ... populate the table from the state
          table <- self$results$DESCtable
          for (i in 1:nrow(DESCstate)) {
            table$addRow(rowKey = i,
                         values = list(bob = DESCstate$bob[i]))
          }
        } else {
          # ... calculate the state
          table <- self$results$DESCtable
          DESCstate <- calculateDESCtable()
          for (i in 1:nrow(DESCstate)) {
            table$addRow(rowKey = i,
                         values = list(bob = DESCstate$bob[i]))
          }
          self$results$DESCtable$setState(DESCstate)
        }
        # GC state ----
        gcState <- self$results$gcTable$state
        if (self$options$designAnalysis){
          if (!is.null(gcState)) {
            # ... populate the table from the state
            if (length(gcState) != 0) {
              table <- self$results$gcTable
              buildGC(gcState, table)
            }
          } else {
            # ... populate the table from the state
            gcState <- runDesignAnalysis()
            if (length(gcState) != 0) {
              table <- self$results$gcTable
              buildGC(gcState, table)
            }
            self$results$gcTable$setState(gcState)
          }
        }
        
        table <- self$results$gcTable
        if (table$rowCount == 0) {
          table$addRow(
            rowKey = 1,
            values = list(item = "No items were flagged as exhibiting statistically significant DIF", NULL, NULL, NULL)
          )
        }
        
        # ICC plot data ----
        
        if (!is.null(self$options$plotVarsICC)) {
          if (self$results$ICCplots$isNotFilled()) {
            items <- self$options$plotVarsICC
            
            for (i in unique(items)) {
              private$.checkpoint()
              
              if (!is.null(anchor)) {
                data2 <- cbind(Data, anchor)
                match <-
                  rowSums(sapply(data2, jmvcore::toNumeric))
              }
              if (is.null(self$options$matchVar)){
                match <- rowSums(sapply(Data, jmvcore::toNumeric))
              }
              
              plotData <-
                data.frame(jmvcore::toNumeric(Data[, colnames(Data) == i]), match, group)
              
              colnames(plotData) <-
                c(i, "match", "group")
              
              imageICC <- self$results$ICCplots$get(key = i)
              imageICC$setState(list(plotData, model))
            }
          }
        }
        },
      
      .plotICC = function(imageICC, ggtheme, theme,...) {
        if (is.null(self$options$group) |
            is.null(self$data) | is.null(self$options$item)) {
          return()
        }
        
        plotData <- data.frame(imageICC$state[[1]])
        model <- imageICC$state[[2]]
        
        if (!all(self$options$plotVarsICC %in% self$options$item)) {
          stop(
            paste0(
              "Not all items selected to be plotted have been evaluated, please remove: ",
              self$options$plotVarsICC[!self$options$plotVarsICC %in% self$options$item]
            ),
            call. = FALSE
          )
        }
        
        if (is.null(imageICC$state)){
          return(FALSE)
        }
        
        p <- ggplot(data = as.data.frame(plotData),
                    aes(
                      x = jmvcore::toNumeric(plotData$match),
                      y = as.integer(plotData[, 1]),
                      colour = plotData$group
                    )) +
          geom_smooth(
            method = "glm",
            level = 1 - self$options$alpha,
            se = TRUE,
            method.args = (family = "binomial")
          ) +
          labs(colour = "Group membership") +
          ggtitle(paste("Item: ", colnames(plotData)),
                  subtitle = paste(
                    "Effect Size: ",
                    round(model$deltaR2[model$names == colnames(plotData)[1]], 3),
                    " | p = ",
                    round(model$adjusted.p[model$names == colnames(plotData)[1]], 3)
                  )) +
          xlab(ifelse(
            is.null(self$options$matchVar),
            "Total sore",
            "Supplied matching variable range"
          )) +
          ylab("Prediicted probability of endorsement") +
          ggtheme + theme(plot.title = ggplot2::element_text(margin=ggplot2::margin(b = 5.5 * 1.2)),
                          plot.margin = ggplot2::margin(5.5, 5.5, 5.5, 5.5))
        
        print(p)
        TRUE
      }
              )
    )



================================================
FILE: R/glmdif.h.R
================================================

# This file is automatically generated, you probably don't want to edit this

glmDIFOptions <- if (requireNamespace('jmvcore')) R6::R6Class(
    "glmDIFOptions",
    inherit = jmvcore::Options,
    public = list(
        initialize = function(
            item = NULL,
            group = NULL,
            groupContrasts = NULL,
            matchVar = NULL,
            anchor = NULL,
            groupType = NULL,
            difFlagScale = NULL,
            designAnalysis = FALSE,
            designAnalysisEffectType = "nagR2",
            designAnalysisSigOnly = TRUE,
            bootSims = 1000,
            power = FALSE,
            D = "",
            type = "both",
            criterion = NULL,
            nagEff = TRUE,
            coeffEff = FALSE,
            alpha = 0.05,
            purify = FALSE,
            nIter = 10,
            pAdjustMethod = "none",
            plotVarsICC = NULL, ...) {

            super$initialize(
                package='psychoPDA',
                name='glmDIF',
                requiresData=TRUE,
                ...)

            private$..item <- jmvcore::OptionVariables$new(
                "item",
                item,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..group <- jmvcore::OptionVariable$new(
                "group",
                group,
                suggested=list(
                    "nominal"),
                permitted=list(
                    "factor",
                    "numeric"))
            private$..groupContrasts <- jmvcore::OptionString$new(
                "groupContrasts",
                groupContrasts)
            private$..matchVar <- jmvcore::OptionVariable$new(
                "matchVar",
                matchVar,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..anchor <- jmvcore::OptionVariables$new(
                "anchor",
                anchor,
                suggested=list(
                    "continuous"),
                permitted=list(
                    "numeric"))
            private$..groupType <- jmvcore::OptionList$new(
                "groupType",
                groupType,
                options=list(
                    "groupBin",
                    "groupNonBin",
                    "cont"))
            private$..difFlagScale <- jmvcore::OptionList$new(
                "difFlagScale",
                difFlagScale,
                options=list(
                    "zt",
                    "jg"))
            private$..designAnalysis <- jmvcore::OptionBool$new(
                "designAnalysis",
                designAnalysis,
                default=FALSE)
            private$..designAnalysisEffectType <- jmvcore::OptionList$new(
                "designAnalysisEffectType",
                designAnalysisEffectType,
                options=list(
                    "nagR2",
                    "coefficients"),
                default="nagR2")
            private$..designAnalysisSigOnly <- jmvcore::OptionBool$new(
                "designAnalysisSigOnly",
                designAnalysisSigOnly,
                default=TRUE)
            private$..bootSims <- jmvcore::OptionNumber$new(
                "bootSims",
                bootSims,
                default=1000)
            private$..power <- jmvcore::OptionBool$new(
                "power",
                power,
                default=FALSE)
            private$..D <- jmvcore::OptionString$new(
                "D",
                D,
                default="")
            private$..type <- jmvcore::OptionList$new(
                "type",
                type,
                options=list(
                    "udif",
                    "nudif",
                    "both"),
                default="both")
            private$..criterion <- jmvcore::OptionList$new(
                "criterion",
                criterion,
                options=list(
                    "Wald",
                    "LRT"))
            private$..nagEff <- jmvcore::OptionBool$new(
                "nagEff",
                nagEff,
                default=TRUE)
            private$..coeffEff <- jmvcore::OptionBool$new(
                "coeffEff",
                coeffEff,
                default=FALSE)
            private$..alpha <- jmvcore::OptionNumber$new(
                "alpha",
                alpha,
                default=0.05)
            private$..purify <- jmvcore::OptionBool$new(
                "purify",
                purify,
                default=FALSE)
            private$..nIter <- jmvcore::OptionNumber$new(
                "nIter",
                nIter,
                default=10)
            private$..pAdjustMethod <- jmvcore::OptionList$new(
                "pAdjustMethod",
                pAdjustMethod,
                options=list(
                    "bonferroni",
                    "holm",
                    "hochberg",
                    "hommel",
                    "BH",
                    "BY",
                    "none"),
                default="none")
            private$..plotVarsICC <- jmvcore::OptionVariables$new(
                "plotVarsICC",
                plotVarsICC)

            self$.addOption(private$..item)
            self$.addOption(private$..group)
            self$.addOption(private$..groupContrasts)
            self$.addOption(private$..matchVar)
            self$.addOption(private$..anchor)
            self$.addOption(private$..groupType)
            self$.addOption(private$..difFlagScale)
            self$.addOption(private$..designAnalysis)
            self$.addOption(private$..designAnalysisEffectType)
            self$.addOption(private$..designAnalysisSigOnly)
            self$.addOption(private$..bootSims)
            self$.addOption(private$..power)
            self$.addOption(private$..D)
            self$.addOption(private$..type)
            self$.addOption(private$..criterion)
            self$.addOption(private$..nagEff)
            self$.addOption(private$..coeffEff)
            self$.addOption(private$..alpha)
            self$.addOption(private$..purify)
            self$.addOption(private$..nIter)
            self$.addOption(private$..pAdjustMethod)
            self$.addOption(private$..plotVarsICC)
        }),
    active = list(
        item = function() private$..item$value,
        group = function() private$..group$value,
        groupContrasts = function() private$..groupContrasts$value,
        matchVar = function() private$..matchVar$value,
        anchor = function() private$..anchor$value,
        groupType = function() private$..groupType$value,
        difFlagScale = function() private$..difFlagScale$value,
        designAnalysis = function() private$..designAnalysis$value,
        designAnalysisEffectType = function() private$..designAnalysisEffectType$value,
        designAnalysisSigOnly = function() private$..designAnalysisSigOnly$value,
        bootSims = function() private$..bootSims$value,
        power = function() private$..power$value,
        D = function() private$..D$value,
        type = function() private$..type$value,
        criterion = function() private$..criterion$value,
        nagEff = function() private$..nagEff$value,
        coeffEff = function() private$..coeffEff$value,
        alpha = function() private$..alpha$value,
        purify = function() private$..purify$value,
        nIter = function() private$..nIter$value,
        pAdjustMethod = function() private$..pAdjustMethod$value,
        plotVarsICC = function() private$..plotVarsICC$value),
    private = list(
        ..item = NA,
        ..group = NA,
        ..groupContrasts = NA,
        ..matchVar = NA,
        ..anchor = NA,
        ..groupType = NA,
        ..difFlagScale = NA,
        ..designAnalysis = NA,
        ..designAnalysisEffectType = NA,
        ..designAnalysisSigOnly = NA,
        ..bootSims = NA,
        ..power = NA,
        ..D = NA,
        ..type = NA,
        ..criterion = NA,
        ..nagEff = NA,
        ..coeffEff = NA,
        ..alpha = NA,
        ..purify = NA,
        ..nIter = NA,
        ..pAdjustMethod = NA,
        ..plotVarsICC = NA)
)

glmDIFResults <- if (requireNamespace('jmvcore')) R6::R6Class(
    inherit = jmvcore::Group,
    active = list(
        instructions = function() private$.items[["instructions"]],
        DESCtable = function() private$.items[["DESCtable"]],
        DIFtable = function() private$.items[["DIFtable"]],
        coefficientsTable = function() private$.items[["coefficientsTable"]],
        gcTable = function() private$.items[["gcTable"]],
        ICCplots = function() private$.items[["ICCplots"]]),
    private = list(),
    public=list(
        initialize=function(options) {
            super$initialize(
                options=options,
                name="",
                title="Differential Item Functioning - Binary Logistic Regression")
            self$add(jmvcore::Html$new(
                options=options,
                name="instructions",
                title="Instructions",
                visible=TRUE))
            self$add(jmvcore::Table$new(
                options=options,
                name="DESCtable",
                title="Procedure Notes",
                visible=FALSE,
                rows=0,
                refs="binaryDIF",
                clearWith=list(
                    "item",
                    "group",
                    "matchVar",
                    "anchor",
                    "groupType",
                    "difFlagScale",
                    "type",
                    "criterion",
                    "alpha",
                    "nIter",
                    "purify",
                    "pAdjustMethod",
                    "designAnalysis",
                    "designAnalysisSigOnly",
                    "bootSims",
                    "D",
                    "twoGroups",
                    "groupContrasts"),
                columns=list(
                    list(
                        `name`="bob", 
                        `title`="", 
                        `type`="text"))))
            self$add(jmvcore::Table$new(
                options=options,
                name="DIFtable",
                title="Differential Item Functioning Analysis - Binary Logistic Regresion",
                visible=FALSE,
                rows="(item)",
                clearWith=list(
                    "item",
                    "group",
                    "matchVar",
                    "anchor",
                    "groupType",
                    "difFlagScale",
                    "type",
                    "criterion",
                    "alpha",
                    "nIter",
                    "purify",
                    "pAdjustMethod",
                    "twoGroups",
                    "groupContrasts"),
                columns=list(
                    list(
                        `name`="item", 
                        `title`="Item", 
                        `type`="text"),
                    list(
                        `name`="ZT", 
                        `refs`="zumboThomas", 
                        `title`="Zumbo-Thomas", 
                        `type`="text", 
                        `visible`="(difFlagScale:zt)"),
                    list(
                        `name`="JG", 
                        `title`="Jodoin-Gierl", 
                        `type`="text", 
                        `visible`="(difFlagScale:jg)"),
                    list(
                        `name`="p", 
                        `title`="P-value", 
                        `type`="number", 
                        `format`="zto,pvalue"),
                    list(
                        `name`="chiSquare", 
                        `title`="\u03A7\u00B2 Stat.", 
                        `type`="number"),
                    list(
                        `name`="effSize", 
                        `title`="\u0394 R\u00B2", 
                        `type`="number", 
                        `format`="zto", 
                        `visible`="(nagEff)"))))
            self$add(jmvcore::Table$new(
                options=options,
                name="coefficientsTable",
                title="Binary Logistic Regression Coefficients",
                rows=0,
                columns=list(
                    list(
                        `name`="itemName", 
                        `title`="Item", 
                        `type`="text")),
                visible=FALSE,
                clearWith=list(
                    "item",
                    "group",
                    "matchVar",
                    "anchor",
                    "groupType",
                    "difFlagScale",
                    "type",
                    "criterion",
                    "alpha",
                    "nIter",
                    "purify",
                    "pAdjustMethod",
                    "designAnalysis",
                    "designAnalysisSigOnly",
                    "bootSims",
                    "D",
                    "twoGroups",
                    "groupContrasts")))
            self$add(jmvcore::Table$new(
                options=options,
                name="gcTable",
                title="Design Analysis - ",
                refs="gelmanCarlin2014",
                rows=0,
                visible="(designAnalysis)",
                clearWith=list(
                    "item",
                    "group",
                    "matchVar",
                    "anchor",
                    "groupType",
                    "difFlagScale",
                    "type",
                    "criterion",
                    "alpha",
                    "nIter",
                    "purify",
                    "pAdjustMethod",
                    "designAnalysis",
                    "designAnalysisSigOnly",
                    "bootSims",
                    "D",
                    "groupContrasts",
                    "designAnalysisEffectType"),
                columns=list(
                    list(
                        `name`="itemName", 
                        `title`="Item", 
                        `type`="text", 
                        `combineBelow`=TRUE),
                    list(
                        `name`="coefficientName", 
                        `title`="Term", 
                        `type`="text", 
                        `visible`="(designAnalysisEffectType:coefficients)", 
                        `combineBelow`=TRUE),
                    list(
                        `name`="obsEff", 
                        `title`="Obs. Effect", 
                        `type`="text", 
                        `combineBelow`=TRUE),
                    list(
                        `name`="bootSE", 
                        `title`="Bootstrap SE", 
                        `type`="number", 
                        `combineBelow`=TRUE),
                    list(
                        `name`="label", 
                        `title`="Classification", 
                        `type`="text"),
                    list(
                        `name`="hypTrueEff", 
                        `title`="Hyp. True Effect", 
                        `type`="number"),
                    list(
                        `name`="typeM", 
                        `title`="Type-M Error", 
                        `type`="number"),
                    list(
                        `name`="typeS", 
                        `title`="Type-S Error", 
                        `type`="number", 
                        `visible`="(designAnalysisEffectType:coefficients)"),
                    list(
                        `name`="estimatedTE", 
                        `title`="Est. True Effect", 
                        `type`="number"),
                    list(
                        `name`="power", 
                        `title`="Empirical Observed Power", 
                        `type`="number", 
                        `format`="(zto)", 
                        `visible`="(power)"))))
            self$add(jmvcore::Array$new(
                options=options,
                name="ICCplots",
                title="Item Response Curves - Based on Logistic Regression",
                items="(plotVarsICC)",
                template=jmvcore::Image$new(
                    options=options,
                    width=550,
                    height=450,
                    renderFun=".plotICC",
                    visible="(plotVarsICC)",
                    requiresData=TRUE,
                    clearWith=list(
                        "item",
                        "group",
                        "matchVar",
                        "anchor",
                        "groupType",
                        "difFlagScale",
                        "type",
                        "criterion",
                        "alpha",
                        "nIter",
                        "purify",
                        "pAdjustMethod",
                        "twoGroups",
                        "groupContrasts"))))}))

glmDIFBase <- if (requireNamespace('jmvcore')) R6::R6Class(
    "glmDIFBase",
    inherit = jmvcore::Analysis,
    public = list(
        initialize = function(options, data=NULL, datasetId="", analysisId="", revision=0) {
            super$initialize(
                package = 'psychoPDA',
                name = 'glmDIF',
                version = c(1,0,0),
                options = options,
                results = glmDIFResults$new(options=options),
                data = data,
                datasetId = datasetId,
                analysisId = analysisId,
                revision = revision,
                pause = NULL,
                completeWhenFilled = FALSE,
                requiresMissings = FALSE)
        }))

#' Binary LogR
#'
#' Differential Item Functioning (DIF) analysis is used to assess items on
#' a test or measure to determine whether or not certain groups are performing
#' diferentially on that item.
#' 
#'
#' @examples
#' \dontrun{
#' data('verbal')}
#' @param data The raw data with rows as test takers and item, grouping, and
#'   matching variables as columns
#' @param item A vector of strings naming the item columns from \code{data}
#'   which are to be assessed for DIF
#' @param group A string naming the grouping variable from \code{data}
#' @param groupContrasts .
#' @param matchVar A string naming the matching variable from \code{data}
#' @param anchor a vector of strings naming the anchor item columns from
#'   \code{data} for use in purification. This will be ignored if an external
#'   matching variable is supplied
#' @param groupType Either "discrete" (default) to specify that group
#'   membership is made of two (or more than two) groups, or "continuous" to
#'   indicate that group membership is based on a continuous criterion.
#' @param difFlagScale The effect size criterion scale to be used in assigning
#'   'level' to flagged items
#' @param designAnalysis True/False, perform a design analysis. NB:
#'   Computationally intensive
#' @param designAnalysisEffectType In progress
#' @param designAnalysisSigOnly True/False, should only items which have been
#'   flagged for exhibitting DIF be considered in the Design Analysis?
#' @param bootSims Number of bootstrap simulations to perform
#' @param power True/False, display the empirical observed power
#' @param D A character string indicating the hypothesized True Effect to be
#'   used in Design Analysis. Left blank will default to the category thresholds
#'   of the DIF scale selected
#' @param type A character string specifying which DIF effects must be tested.
#'   Possible values are "both" (default), "udif" and "nudif"
#' @param criterion A character string specifying which DIF statistic is
#'   computed. Possible values are "LRT" (default) or "Wald"
#' @param nagEff .
#' @param coeffEff .
#' @param alpha Significance level
#' @param purify Should the method be used iteratively to purify the set of
#'   anchor items? (default is FALSE). Ignored if an external matching variable
#'   is supplied
#' @param nIter The maximal number of iterations in the item purification
#'   process. (default is 10)
#' @param pAdjustMethod Either none (default) or the acronym of the method for
#'   p-value adjustment for multiple comparisons.
#' @param plotVarsICC A vector of strings naming the item columns for plotting
#'   Item Response Curves
#' @return A results object containing:
#' \tabular{llllll}{
#'   \code{results$instructions} \tab \tab \tab \tab \tab a html \cr
#'   \code{results$DESCtable} \tab \tab \tab \tab \tab a table \cr
#'   \code{results$DIFtable} \tab \tab \tab \tab \tab a table \cr
#'   \code{results$coefficientsTable} \tab \tab \tab \tab \tab a table \cr
#'   \code{results$gcTable} \tab \tab \tab \tab \tab a table \cr
#'   \code{results$ICCplots} \tab \tab \tab \tab \tab an array of images \cr
#' }
#'
#' Tables can be converted to data frames with \code{asDF} or \code{\link{as.data.frame}}. For example:
#'
#' \code{results$DESCtable$asDF}
#'
#' \code{as.data.frame(results$DESCtable)}
#'
#' @export
glmDIF <- function(
    data,
    item,
    group,
    groupContrasts,
    matchVar,
    anchor,
    groupType,
    difFlagScale,
    designAnalysis = FALSE,
    designAnalysisEffectType = "nagR2",
    designAnalysisSigOnly = TRUE,
    bootSims = 1000,
    power = FALSE,
    D = "",
    type = "both",
    criterion,
    nagEff = TRUE,
    coeffEff = FALSE,
    alpha = 0.05,
    purify = FALSE,
    nIter = 10,
    pAdjustMethod = "none",
    plotVarsICC) {

    if ( ! requireNamespace('jmvcore'))
        stop('glmDIF requires jmvcore to be installed (restart may be required)')

    if ( ! missing(item)) item <- jmvcore::resolveQuo(jmvcore::enquo(item))
    if ( ! missing(group)) group <- jmvcore::resolveQuo(jmvcore::enquo(group))
    if ( ! missing(matchVar)) matchVar <- jmvcore::resolveQuo(jmvcore::enquo(matchVar))
    if ( ! missing(anchor)) anchor <- jmvcore::resolveQuo(jmvcore::enquo(anchor))
    if ( ! missing(plotVarsICC)) plotVarsICC <- jmvcore::resolveQuo(jmvcore::enquo(plotVarsICC))
    if (missing(data))
        data <- jmvcore::marshalData(
            parent.frame(),
            `if`( ! missing(item), item, NULL),
            `if`( ! missing(group), group, NULL),
            `if`( ! missing(matchVar), matchVar, NULL),
            `if`( ! missing(anchor), anchor, NULL),
            `if`( ! missing(plotVarsICC), plotVarsICC, NULL))


    options <- glmDIFOptions$new(
        item = item,
        group = group,
        groupContrasts = groupContrasts,
        matchVar = matchVar,
        anchor = anchor,
        groupType = groupType,
        difFlagScale = difFlagScale,
        designAnalysis = designAnalysis,
        designAnalysisEffectType = designAnalysisEffectType,
        designAnalysisSigOnly = designAnalysisSigOnly,
        bootSims = bootSims,
        power = power,
        D = D,
        type = type,
        criterion = criterion,
        nagEff = nagEff,
        coeffEff = coeffEff,
        alpha = alpha,
        purify = purify,
        nIter = nIter,
        pAdjustMethod = pAdjustMethod,
        plotVarsICC = plotVarsICC)

    analysis <- glmDIFClass$new(
        options = options,
        data = data)

    analysis$run()

    analysis$results
}



================================================
FILE: R/IRT_utilities_nonParametric.R
================================================



# Data ----

# Plot ----

# Test-level plots ----

# SD ----

buildSDData <- function(data, axistype) {
  if (axistype == 'distribution') {
    axis <- data$evalpoints
    quants <- data$subjthetasummary
    xlab <-
      paste(
        "Quantiles of Distribution:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
  }
  else{
    axis <- data$expectedscores
    quants <- data$subjscoresummary
    xlab <- "Expected Score"
  }
  
  Testvar <-
    apply(data$OCC[, -c(1:3)], 2, function(x)
      sum(x * data$OCC[, 3] ** 2 - (x * data$OCC[, 3]) ** 2))
  
  Testsd <- sqrt(Testvar)
  
  return(list(
    axis = axis,
    quants = quants,
    xlab = xlab,
    Testsd = Testsd
  ))
}

buildSD <- function (data, ggtheme, theme, axistype, ...) {
  p <- ggplot() +
    geom_line(aes(x = data$axis, y = data$Testsd)) +
    geom_vline(xintercept = data$quants,
               linetype = "dashed",
               colour = "blue") +
    geom_text(mapping = aes(
      x = data$quants,
      y = min(data$Testsd),
      label = labels(data$quants),
      hjust = -.1,
      vjust = -1
    )) +
    labs(title = "Test Standard Deviation",
         x = data$xlab,
         y = "Standard Deviations") +
    ggtheme + theme(
      plot.title = ggplot2::element_text(margin = ggplot2::margin(b = 5.5 * 1.2)),
      plot.margin = ggplot2::margin(5.5, 5.5, 5.5, 5.5)
    )
  
  return(p)
}

buildSDDIFData <- function(data, axistype) {
  Testvar <-
    apply(data$OCC[, -c(1:3)], 2, function(x)
      sum(x * data$OCC[, 3] ** 2 - (x * data$OCC[, 3]) ** 2))
  Testsd <- sqrt(Testvar)
  newData <- as.data.frame(cbind(Testsd = Testsd, model = "Full"))
  
  if (axistype == 'distribution') {
    newData$axis <- data$evalpoints
    quants <- data$subjthetasummary
    xlab <-
      paste(
        "Quantiles of Distribution:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
  }
  else{
    newData$axis <- t(data$expectedscores)
    quants <- data$subjscoresummary
    xlab <- "Expected Score"
  }
  
  for (group in data$groups) {
    Testvar <-
      apply(data$DIF[[which(data$groups == group)]]$OCC[, -c(1:3)],
            2,
            function(x)
              sum(x * data$DIF[[which(data$groups == group)]]$OCC[, 3] ** 2 - (x * data$DIF[[which(data$groups == group)]]$OCC[, 3]) **
                    2))
    Testsd <- sqrt(Testvar)
    Testsd <- data.frame(cbind(Testsd = Testsd, model = group))
    
    if (axistype == 'distribution') {
      Testsd$axis <- data$evalpoints
    }
    else {
      Testsd$axis <- t(data$expectedscores)
    }
    
    
    newData = rbind(newData, Testsd)
  }
  newData$Testsd <- as.numeric(newData$Testsd)
  return(list(
    axis = newData$axis,
    quants = quants,
    xlab = xlab,
    Testsd = newData$Testsd
  ))
}

buildSDDIF <- function (data, ggtheme, theme, axistype, ...) {
  p <- ggplot() +
    geom_line(aes(
      x = data$axis,
      y = data$Testsd,
      colour = data$model
    )) +
    geom_vline(xintercept = data$quants,
               linetype = "dashed",
               colour = "blue") +
    geom_text(mapping = aes(
      x = data$quants,
      y = min(data$Testsd),
      label = labels(data$quants),
      hjust = -.1,
      vjust = -1
    )) +
    labs(
      title = "Test Standard Deviation",
      x = data$xlab,
      y = "Standard Deviations",
      colour = "Model"
    ) +
    ggtheme + theme(
      plot.title = ggplot2::element_text(margin = ggplot2::margin(b = 5.5 * 1.2)),
      plot.margin = ggplot2::margin(5.5, 5.5, 5.5, 5.5)
    )
  
  return(p)
}

# Expected ----

buildExpectedData <- function(data, axistype) {
  if (axistype == 'distribution') {
    axis <- data$evalpoints
    yaxis <- t(data$expectedscores)
    quants <- data$subjthetasummary
    xlab <-
      paste(
        "Quantiles of Distribution:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
    ylab <- "Expected Score"
  }
  else {
    axis <- t(data$expectedscores)
    yaxis <- data$evalpoints
    quants <- data$subjscoresummary
    xlab <- "Expected Score"
    ylab <-
      paste(
        "Quantiles of Distribution:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
  }
  return(list(
    axis = axis,
    yaxis = yaxis,
    quants = quants,
    xlab = xlab,
    ylab = ylab
  ))
}

buildExpected <- function (data, ggtheme, theme, axistype, ...)
{
  p <- ggplot() +
    geom_line(aes(x = data$axis, y = data$yaxis)) +
    geom_vline(xintercept = data$quants,
               linetype = "dashed",
               colour = "blue") +
    geom_text(mapping = aes(
      x = data$quants,
      y = min(data$yaxis),
      label = labels(data$quants),
      hjust = -.1,
      vjust = -1
    )) +
    labs(title = "Expected Total Score",
         x = data$xlab,
         y = data$ylab) +
    ggtheme + theme(
      plot.title = ggplot2::element_text(margin = ggplot2::margin(b = 5.5 * 1.2)),
      plot.margin = ggplot2::margin(5.5, 5.5, 5.5, 5.5)
    )
  
  return(p)
}

buildExpectedDIFData <- function(data, axistype) {
  if (axistype == 'distribution') {
    quants <- data$subjthetasummary
    xlab <-
      paste(
        "Quantiles of Distribution:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
    ylab <- "Expected Score"
  } else {
    quants <- data$subjscoresummary
    xlab <- "Expected Score"
    ylab <-
      paste(
        "Quantiles of Distribution:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
  }
  
  if (axistype == 'distribution') {
    newData = data.frame(
      axis = data$evalpoints,
      yaxis = t(data$expectedscores),
      model = "Full"
    )
  } else {
    newData = data.frame(
      axis = t(data$expectedscores),
      yaxis = data$evalpoints,
      model = "Full"
    )
  }
  
  for (group in data$groups) {
    if (axistype == 'distribution') {
      newData = rbind(newData,
                      data.frame(
                        axis = data$evalpoints,
                        yaxis = t(data$DIF[[which(data$groups == group)]]$expectedscores),
                        model = group
                      ))
    }
    else{
      newData = rbind(newData,
                      data.frame(
                        axis = t(data$DIF[[which(data$groups == group)]]$expectedscores),
                        yaxis = data$evalpoints,
                        model = group
                      ))
    }
  }
  
  return(
    list(
      axis = newData$axis,
      yaxis = newData$yaxis,
      model = newData$model,
      quants = quants,
      xlab = xlab,
      ylab = ylab
    )
  )
}

buildExpectedDIF <- function (data, ggtheme, theme, axistype, ...)
{
  p <- ggplot() +
    geom_line(aes(
      x = data$axis,
      y = data$yaxis,
      colour = data$model
    )) +
    geom_vline(xintercept = data$quants,
               linetype = "dashed",
               colour = "blue") +
    geom_text(mapping = aes(
      x = data$quants,
      y = min(data$yaxis),
      label = labels(data$quants),
      hjust = -.1,
      vjust = -1
    )) +
    labs(
      title = "Expected Total Score",
      subtitle = "Differential Item Functioning",
      x = data$xlab,
      y = data$ylab,
      colour = "Model"
    ) +
    ggtheme + theme(
      plot.title = ggplot2::element_text(margin = ggplot2::margin(b = 5.5 * 1.2)),
      plot.margin = ggplot2::margin(5.5, 5.5, 5.5, 5.5)
    )
  
  return(p)
}

# Density ----

buildDensityData <- function(data, axistype) {
  if (axistype == 'distribution') {
    axis <- data$subjtheta
    quants <- data$subjthetasummary
    xlab <-
      paste(
        "Quantiles of Distribution:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
    ylab <- "Density of Theta"
  } else{
    axis <- data$subjscore
    quants <- data$subjscoresummary
    xlab <- "Density of Scores"
    ylab <-
      paste(
        "Quantiles of Expected Scores:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
  }
  return(list(
    axis = axis,
    quants = quants,
    xlab = xlab,
    ylab = ylab
  ))
}

buildDensity <- function(data, ggtheme, theme, axistype, ...) {
  p <- ggplot() +
    geom_density(aes(x = data$axis)) +
    geom_vline(xintercept = data$quants,
               linetype = "dashed",
               colour = "blue") +
    geom_text(aes(
      x = data$quants,
      y = 0,
      label = labels(data$quants),
      hjust = -.1,
      vjust = -1
    )) +
    labs(title = "Observed Score Distribution",
         x = data$xlab,
         y = data$ylab) +
    ggtheme + theme(
      plot.title = ggplot2::element_text(margin = ggplot2::margin(b = 5.5 * 1.2)),
      plot.margin = ggplot2::margin(5.5, 5.5, 5.5, 5.5)
    )
  
  return(p)
}

buildDensityDIFData <- function(data, axistype) {
  if (axistype == 'distribution') {
    newData <- data.frame(cbind(axis = data$subjtheta, model = "Full"))
    for (group in data$groups) {
      newData = rbind(newData, cbind(axis = data$DIF[[which(data$groups == group)]]$subjtheta, model = group))
    }
    
    quants <- data$subjthetasummary
    xlab <-
      paste(
        "Quantiles of Distribution:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
    ylab <- "Density of Scores"
  } else{
    newData <- data.frame(cbind(axis = data$subjscore, model = "Full"))
    for (group in data$groups) {
      newData = rbind(newData, cbind(axis = data$DIF[[which(data$groups == group)]]$subjscore, model = group))
    }
    
    quants <- data$subjscoresummary
    xlab <- "Density of Theta"
    ylab <-
      paste(
        "Quantiles of Expected Scores:",
        data$thetadist[1],
        ", Mean:",
        data$thetadist[2],
        ", SD:",
        data$thetadist[3]
      )
  }
  
  
  newData <- newData[newData$axis != 0,]
  return(
    list(
      axis = newData$axis,
      model = newData$model,
      quants = quants,
      xlab = xlab,
      ylab = ylab
    )
  )
  
}

buildDensityDIF <- function(data, ggtheme, theme, axistype, ...) {
  p <- ggplot() +
    geom_density(aes(x = as.numeric(data$axis), colour = data$model)) +
    geom_vline(xintercept = data$quants,
               linetype = "dashed",
               colour = "blue") +
    geom_text(aes(
      x = data$quants,
      y = 0,
      label = labels(data$quants),
      hjust = -.1,
      vjust = -1
    )) +
    labs(
      title = "Observed Score Distribution",
      subtitle = "Differential Item Functioning",
      x = data$xlab,
      y = data$ylab,
      colour = "Model"
    ) +
    ggtheme + theme(
      plot.title = ggplot2::element_text(margin = ggplot2::margin(b = 5.5 * 1.2)),
      plot.margin = ggplot2::margin(5.5, 5.5, 5.5, 5.5)
    )
  
  return(p)
}

# Item-level plots ----

buildOCCData <- function(data, item, axisType) {
  IRFlines <-
    tidyr::pivot_longer(data.frame(data$OCC[which(data$OCC[, 1] == which(data$itemlabels == item)), ]),
                        !c(X1, X2, X3),
                        names_to = "evalPoint",
                        values_to = "Probability")
  expectedScores <-
    rep(data$expectedscores, length.out = nrow(IRFlines))
  IRFlines$evalPoint <-
    rep(data$evalpoints, length.out = nrow(IRFlines))
  IRFlines <- cbind(IRFlines, expectedScores)
  
  if (axisType == "distribution") {
    colnames(IRFlines) = c("Item",
                           "Option",
                           "Key",
                           "axis",
                           "Probability",
                           "Expected Score")
    xlab <-
    