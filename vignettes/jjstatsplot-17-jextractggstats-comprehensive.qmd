---
title: "Statistical Data Extraction from ggstatsplot"
author: "ClinicoPath"
date: "`r Sys.Date()`"
output: 
  html_document:
    toc: true
    toc_float: true
    code_folding: show
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  echo = TRUE,
  warning = FALSE,
  message = FALSE,
  fig.width = 8,
  fig.height = 6,
  dpi = 300,
  out.width = "100%"
)
```

## Overview

The `jextractggstats` function provides a comprehensive interface for extracting statistical data from ggstatsplot analyses within the jamovi framework. This function allows researchers to access detailed statistical results computed by ggstatsplot, making them available for custom reporting, meta-analysis, or integration with other analytical workflows.

## Key Features

- **Multiple Analysis Types**: Supports between-groups comparisons, within-subjects analysis, histogram distributions, correlations, scatterplots, categorical data analysis, contingency table analysis, and one-sample tests
- **Comprehensive Data Extraction**: Extracts subtitle data, caption information, pairwise comparisons, and descriptive statistics
- **Flexible Statistical Testing**: Supports parametric, non-parametric, robust, and Bayesian methods
- **Customizable Output**: Multiple extraction components and formatting options
- **Natural Language Interpretation**: Provides automated interpretation of results

## Loading Required Packages

```{r load-packages}
library(ClinicoPath)
library(dplyr)
library(ggplot2)

# Load example data
data(histopathology, package = "ClinicoPath")
```

## Basic Usage

### Single Variable Analysis (Histogram)

```{r basic-histogram}
# Basic histogram analysis with statistical tests
result_histogram <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  analysis_type = "histogram",
  extract_components = "all",
  detailed_results = TRUE,
  show_interpretation = TRUE
)

# Results are automatically displayed in jamovi
# In R, you can access the analysis object
class(result_histogram)
```

### Between-Groups Comparison

```{r between-groups}
# Compare age between males and females
result_between <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "parametric",
  extract_components = "all",
  pairwise_comparisons = TRUE,
  pairwise_correction = "holm",
  detailed_results = TRUE
)

# The function extracts all statistical components from ggstatsplot
class(result_between)
```

## Advanced Analysis Types

### Correlation Analysis

```{r correlation-analysis}
# Correlation between age and survival time
result_correlation <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "OverallTime",
  analysis_type = "correlation",
  statistical_test = "parametric",
  extract_components = "all",
  detailed_results = TRUE,
  show_interpretation = TRUE
)

class(result_correlation)
```

### Scatterplot with Marginal Distributions

```{r scatterplot}
# Enhanced scatterplot with marginal distributions
result_scatter <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "OverallTime",
  analysis_type = "scatterplot",
  statistical_test = "parametric",
  extract_components = "all",
  detailed_results = TRUE
)

class(result_scatter)
```

### Within-Subjects Analysis

```{r within-subjects}
# Create paired data for demonstration
paired_data <- histopathology %>%
  filter(!is.na(MeasurementA) & !is.na(MeasurementB)) %>%
  select(MeasurementA, MeasurementB, Sex) %>%
  tidyr::gather(key = "Measurement", value = "Value", MeasurementA, MeasurementB) %>%
  mutate(Subject = rep(1:(n()/2), each = 2))

# Within-subjects comparison
result_within <- jextractggstats(
  data = paired_data,
  dep_var = "Value",
  group_var = "Measurement",
  analysis_type = "within_stats",
  statistical_test = "parametric",
  extract_components = "all",
  pairwise_comparisons = TRUE
)

class(result_within)
```

### Categorical Data Analysis

```{r categorical-analysis}
# Bar chart analysis for categorical relationships
result_bar <- jextractggstats(
  data = histopathology,
  dep_var = "Grade",
  group_var = "Sex",
  analysis_type = "bar_chart",
  statistical_test = "parametric",
  extract_components = "all",
  detailed_results = TRUE
)

class(result_bar)
```

### Contingency Table Analysis

```{r contingency-analysis}
# Contingency table analysis for two categorical variables
result_contingency <- jextractggstats(
  data = histopathology,
  dep_var = "Sex",
  group_var = "Outcome",
  analysis_type = "contingency_stats",
  statistical_test = "parametric",
  extract_components = "all",
  detailed_results = TRUE,
  show_interpretation = TRUE
)

class(result_contingency)
```

### One-Sample Tests

```{r one-sample-analysis}
# One-sample test against theoretical value
result_one_sample <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  analysis_type = "one_sample_stats",
  test_value = 65,  # Test against age 65
  statistical_test = "parametric",
  extract_components = "all",
  detailed_results = TRUE,
  show_interpretation = TRUE
)

class(result_one_sample)

# One-sample test against zero (common in biomarker studies)
result_one_sample_zero <- jextractggstats(
  data = histopathology,
  dep_var = "MeasurementA",
  analysis_type = "one_sample_stats",
  test_value = 0,
  statistical_test = "parametric",
  extract_components = "all"
)

class(result_one_sample_zero)
```

## Statistical Test Options

### Parametric vs Non-parametric Analysis

```{r test-methods}
# Parametric analysis
result_parametric <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "parametric",
  extract_components = "all"
)

# Non-parametric analysis
result_nonparametric <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "nonparametric",
  extract_components = "all"
)

# Robust analysis
result_robust <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "robust",
  extract_components = "all"
)

# Bayesian analysis
result_bayes <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "bayes",
  extract_components = "all"
)
```

### Effect Size Options

```{r effect-sizes}
# Different effect size types
result_eta <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  effect_size_type = "eta",
  extract_components = "all"
)

result_cohens_d <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  effect_size_type = "cohens_d",
  extract_components = "all"
)

result_omega <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  effect_size_type = "omega",
  extract_components = "all"
)
```

## Extraction Components

### Selective Component Extraction

```{r component-extraction}
# Extract only subtitle data (main results)
result_subtitle <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "subtitle_data",
  detailed_results = FALSE
)

# Extract only descriptive statistics
result_descriptive <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "descriptive_data",
  detailed_results = FALSE
)

# Extract only pairwise comparisons
result_pairwise <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Group",  # Group has multiple levels
  analysis_type = "between_stats",
  extract_components = "pairwise_data",
  pairwise_comparisons = TRUE,
  detailed_results = FALSE
)

# Extract caption data
result_caption <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "caption_data",
  detailed_results = FALSE
)
```

### Complete Data Extraction

```{r complete-extraction}
# Extract all available components
result_complete <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "all",
  include_plot_data = TRUE,
  include_model_data = TRUE,
  detailed_results = TRUE,
  show_interpretation = TRUE
)

class(result_complete)
```

## Pairwise Comparisons

### Multiple Comparison Corrections

```{r pairwise-corrections}
# Holm correction (default)
result_holm <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Group",
  analysis_type = "between_stats",
  pairwise_comparisons = TRUE,
  pairwise_correction = "holm",
  extract_components = "pairwise_data"
)

# Bonferroni correction
result_bonferroni <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Group",
  analysis_type = "between_stats",
  pairwise_comparisons = TRUE,
  pairwise_correction = "bonferroni",
  extract_components = "pairwise_data"
)

# FDR correction
result_fdr <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Group",
  analysis_type = "between_stats",
  pairwise_comparisons = TRUE,
  pairwise_correction = "fdr",
  extract_components = "pairwise_data"
)
```

## Confidence Intervals

### Different Confidence Levels

```{r confidence-intervals}
# 95% confidence intervals (default)
result_95ci <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  conf_level = 0.95,
  extract_components = "all"
)

# 99% confidence intervals
result_99ci <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  conf_level = 0.99,
  extract_components = "all"
)

# 90% confidence intervals
result_90ci <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  conf_level = 0.90,
  extract_components = "all"
)
```

## Bayesian Analysis Options

### Bayesian Factor Settings

```{r bayesian-analysis}
# Default Bayesian prior
result_bayes_default <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "bayes",
  bf_prior = 0.707,
  extract_components = "all"
)

# Conservative Bayesian prior
result_bayes_conservative <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "bayes",
  bf_prior = 0.5,
  extract_components = "all"
)

# Liberal Bayesian prior
result_bayes_liberal <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "bayes",
  bf_prior = 1.0,
  extract_components = "all"
)
```

## Plotting Options

### Centrality and Outlier Settings

```{r plotting-options}
# With centrality plotting and outlier tagging
result_full_plot <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  centrality_plotting = TRUE,
  outlier_tagging = TRUE,
  extract_components = "all"
)

# Minimal plotting options
result_minimal_plot <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  centrality_plotting = FALSE,
  outlier_tagging = FALSE,
  extract_components = "all"
)
```

## Output Formatting

### Different Output Formats

```{r output-formats}
# HTML table format (default)
result_table <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  output_format = "table",
  extract_components = "all"
)

# Data frame format
result_dataframe <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  output_format = "dataframe",
  extract_components = "all"
)

# JSON format
result_json <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  output_format = "json",
  extract_components = "all"
)
```

## Data Inclusion Options

### Including Additional Data

```{r data-inclusion}
# Include plot data for custom visualization
result_with_plot_data <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  include_plot_data = TRUE,
  extract_components = "all"
)

# Include model data for further analysis
result_with_model_data <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  include_model_data = TRUE,
  extract_components = "all"
)

# Include both plot and model data
result_with_all_data <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  include_plot_data = TRUE,
  include_model_data = TRUE,
  extract_components = "all"
)
```

## Comprehensive Analysis Example

### Multi-Parameter Analysis

```{r comprehensive-example}
# Comprehensive analysis with all major options
result_comprehensive <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "all",
  statistical_test = "parametric",
  effect_size_type = "eta",
  pairwise_comparisons = TRUE,
  pairwise_correction = "holm",
  conf_level = 0.95,
  bf_prior = 0.707,
  centrality_plotting = TRUE,
  outlier_tagging = FALSE,
  output_format = "table",
  include_plot_data = TRUE,
  include_model_data = TRUE,
  detailed_results = TRUE,
  show_interpretation = TRUE
)

# This provides complete statistical extraction
class(result_comprehensive)
```

## Error Handling and Edge Cases

### Small Sample Sizes

```{r small-samples}
# Test with small sample
small_data <- histopathology[1:20, ]

result_small <- jextractggstats(
  data = small_data,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "all"
)

class(result_small)
```

### Missing Data Handling

```{r missing-data}
# Create data with missing values
test_data <- histopathology[1:100, ]
test_data$Age[1:10] <- NA
test_data$Sex[11:20] <- NA

result_missing <- jextractggstats(
  data = test_data,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "all"
)

class(result_missing)
```

## Clinical Applications

### Biomarker Analysis

```{r biomarker-analysis}
# Analyze biomarker measurements by treatment response
result_biomarker <- jextractggstats(
  data = histopathology,
  dep_var = "MeasurementA",
  group_var = "Outcome",
  analysis_type = "between_stats",
  statistical_test = "nonparametric",
  extract_components = "all",
  pairwise_comparisons = TRUE,
  detailed_results = TRUE,
  show_interpretation = TRUE
)

class(result_biomarker)
```

### Survival Analysis Components

```{r survival-components}
# Extract components for survival-related variables
result_survival <- jextractggstats(
  data = histopathology,
  dep_var = "OverallTime",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "parametric",
  extract_components = "all",
  effect_size_type = "cohens_d",
  detailed_results = TRUE
)

class(result_survival)
```

### Pathological Grade Analysis

```{r grade-analysis}
# Analyze continuous variables by pathological grade
result_grade <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Grade",
  analysis_type = "between_stats",
  statistical_test = "parametric",
  extract_components = "all",
  pairwise_comparisons = TRUE,
  pairwise_correction = "holm",
  detailed_results = TRUE
)

class(result_grade)
```

## Performance Considerations

### Large Dataset Handling

```{r large-datasets}
# Test with full dataset
result_large <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "all",
  detailed_results = TRUE
)

# Medium sample for comparison
medium_data <- histopathology[1:100, ]
result_medium <- jextractggstats(
  data = medium_data,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "all"
)

class(result_large)
class(result_medium)
```

## Integration with Other Analyses

### Meta-Analysis Preparation

```{r meta-analysis}
# Extract effect sizes for meta-analysis
result_meta <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "parametric",
  effect_size_type = "cohens_d",
  extract_components = "all",
  include_model_data = TRUE,
  detailed_results = TRUE
)

class(result_meta)
```

### Custom Reporting

```{r custom-reporting}
# Extract data for custom reports
result_reporting <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "all",
  output_format = "dataframe",
  include_plot_data = TRUE,
  detailed_results = TRUE,
  show_interpretation = TRUE
)

class(result_reporting)
```

## Best Practices

### Recommended Workflow

```{r recommended-workflow}
# Step 1: Start with basic analysis
basic_result <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats"
)

# Step 2: Add statistical details
detailed_result <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "parametric",
  extract_components = "all",
  detailed_results = TRUE
)

# Step 3: Include interpretation
final_result <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "parametric",
  extract_components = "all",
  detailed_results = TRUE,
  show_interpretation = TRUE
)

class(final_result)
```

### Parameter Selection Guidelines

```{r parameter-guidelines}
# For hypothesis testing
hypothesis_result <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "parametric",
  extract_components = "subtitle_data",
  detailed_results = TRUE
)

# For effect size estimation
effect_result <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  statistical_test = "parametric",
  effect_size_type = "cohens_d",
  extract_components = "all",
  detailed_results = TRUE
)

# For descriptive analysis
descriptive_result <- jextractggstats(
  data = histopathology,
  dep_var = "Age",
  group_var = "Sex",
  analysis_type = "between_stats",
  extract_components = "descriptive_data",
  detailed_results = TRUE
)

class(hypothesis_result)
class(effect_result)
class(descriptive_result)
```

## Summary

The `jextractggstats` function provides a comprehensive solution for extracting statistical data from ggstatsplot analyses within the jamovi framework. Key advantages include:

1. **Comprehensive Extraction**: Access to all statistical components computed by ggstatsplot
2. **Multiple Analysis Types**: Support for various statistical analyses and visualizations
3. **Flexible Configuration**: Extensive customization options for different research needs
4. **Integration Ready**: Extracted data suitable for meta-analysis and custom reporting
5. **Clinical Applications**: Designed for biomarker analysis, survival studies, and pathological research

### Key Applications

- **Research Documentation**: Extract detailed statistics for manuscripts and reports
- **Meta-Analysis**: Gather effect sizes and confidence intervals for systematic reviews
- **Custom Visualization**: Access underlying data for specialized plotting
- **Quality Control**: Verify statistical computations and assumptions
- **Educational Use**: Access step-by-step statistical calculations for teaching

This function bridges the gap between ggstatsplot's powerful statistical capabilities and the need for detailed, accessible statistical output in clinical and pathological research contexts.

## Session Information

```{r session-info}
sessionInfo()
```